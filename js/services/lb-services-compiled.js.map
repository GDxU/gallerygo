{"version":3,"sources":["lb-services.js"],"names":[],"mappings":"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","file":"lb-services-compiled.js","sourcesContent":["// CommonJS package manager support\nif (typeof module !== 'undefined' && typeof exports !== 'undefined' &&\n  module.exports === exports) {\n  // Export the *name* of this Angular module\n  // Sample usage:\n  //\n  //   import lbServices from './lb-services';\n  //   angular.module('app', [lbServices]);\n  //\n  module.exports = \"lbServices\";\n}\n\n(function (window, angular, undefined) {\n  'use strict';\n  //location.host = \"localhost:3000\";\n  var urlBase = \"/api\";\n  var authHeader = 'authorization';\n\n  function getHost(url) {\n    var m = url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);\n    return m ? m[1] : null;\n  }\n\n  var urlBaseHost = getHost(urlBase) || location.host;\n // urlBaseHost = \"localhost:3000\" + urlBaseHost;\n\n  /**\n   * @ngdoc overview\n   * @name lbServices\n   * @module\n   * @description\n   *\n   * The `lbServices` module provides services for interacting with\n   * the models exposed by the LoopBack server via the REST API.\n   *\n   */\n  var module = angular.module(\"lbServices\", ['ngResource']);\n\n  /**\n   * @ngdoc object\n   * @name lbServices.Issue\n   * @header lbServices.Issue\n   * @object\n   *\n   * @description\n   *\n   * A $resource object for interacting with the `Issue` model.\n   *\n   * ## Example\n   *\n   * See\n   * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n   * for an example of using this object.\n   *\n   */\n  module.factory(\n    \"Issue\",\n    [\n      'LoopBackResource', 'LoopBackAuth', '$injector',\n      function (Resource, LoopBackAuth, $injector) {\n        var R = Resource(\n          urlBase + \"/Issues/:id\",\n          {'id': '@id'},\n          {\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#create\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n            \"create\": {\n              url: urlBase + \"/Issues\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#createMany\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n            \"createMany\": {\n              isArray: true,\n              url: urlBase + \"/Issues\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#patchOrCreate\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n            \"patchOrCreate\": {\n              url: urlBase + \"/Issues\",\n              method: \"PATCH\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#replaceOrCreate\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Replace an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n            \"replaceOrCreate\": {\n              url: urlBase + \"/Issues/replaceOrCreate\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#upsertWithWhere\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Update an existing model instance or insert a new one into the data source based on the where criteria.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n            \"upsertWithWhere\": {\n              url: urlBase + \"/Issues/upsertWithWhere\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#exists\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Check whether a model instance exists in the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `exists` – `{boolean=}` -\n             */\n            \"exists\": {\n              url: urlBase + \"/Issues/:id/exists\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#findById\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Find a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `filter` – `{object=}` - Filter defining fields and include\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n            \"findById\": {\n              url: urlBase + \"/Issues/:id\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#replaceById\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Replace attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n            \"replaceById\": {\n              url: urlBase + \"/Issues/:id/replace\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#find\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Find all instances of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n            \"find\": {\n              isArray: true,\n              url: urlBase + \"/Issues\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#findOne\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Find first instance of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n            \"findOne\": {\n              url: urlBase + \"/Issues/findOne\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#updateAll\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Update instances of the model matched by {{where}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Information related to the outcome of the operation\n             */\n            \"updateAll\": {\n              url: urlBase + \"/Issues/update\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#deleteById\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n            \"deleteById\": {\n              url: urlBase + \"/Issues/:id\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#count\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Count instances of the model matched by where from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n            \"count\": {\n              url: urlBase + \"/Issues/count\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#prototype$patchAttributes\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Patch attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             *  - `data` – `{object=}` - An object of model property name/value pairs\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n            \"prototype$patchAttributes\": {\n              url: urlBase + \"/Issues/:id\",\n              method: \"PATCH\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#createChangeStream\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Create a change stream.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `changes` – `{ReadableStream=}` -\n             */\n            \"createChangeStream\": {\n              url: urlBase + \"/Issues/change-stream\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#resolve_issue\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Update resolved issue with the document..\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Return value\n             */\n            \"resolve_issue\": {\n              url: urlBase + \"/Issues/resolve_issue\",\n              method: \"POST\",\n            },\n          }\n        );\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Issue#upsert\n         * @methodOf lbServices.Issue\n         *\n         * @description\n         *\n         * Patch an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `data` – `{object=}` - Model instance data\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Issue` object.)\n         * </em>\n         */\n        R[\"upsert\"] = R[\"patchOrCreate\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Issue#updateOrCreate\n         * @methodOf lbServices.Issue\n         *\n         * @description\n         *\n         * Patch an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `data` – `{object=}` - Model instance data\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Issue` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"patchOrCreate\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Issue#patchOrCreateWithWhere\n         * @methodOf lbServices.Issue\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source based on the where criteria.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Issue` object.)\n         * </em>\n         */\n        R[\"patchOrCreateWithWhere\"] = R[\"upsertWithWhere\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Issue#update\n         * @methodOf lbServices.Issue\n         *\n         * @description\n         *\n         * Update instances of the model matched by {{where}} from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Information related to the outcome of the operation\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Issue#destroyById\n         * @methodOf lbServices.Issue\n         *\n         * @description\n         *\n         * Delete a model instance by {{id}} from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Issue` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Issue#removeById\n         * @methodOf lbServices.Issue\n         *\n         * @description\n         *\n         * Delete a model instance by {{id}} from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Issue` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Issue#updateAttributes\n         * @methodOf lbServices.Issue\n         *\n         * @description\n         *\n         * Patch attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         *  - `data` – `{object=}` - An object of model property name/value pairs\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Issue` object.)\n         * </em>\n         */\n        R[\"updateAttributes\"] = R[\"prototype$patchAttributes\"];\n\n\n        /**\n         * @ngdoc property\n         * @name lbServices.Issue#modelName\n         * @propertyOf lbServices.Issue\n         * @description\n         * The name of the model represented by this $resource,\n         * i.e. `Issue`.\n         */\n        R.modelName = \"Issue\";\n\n\n        return R;\n      }]);\n\n  /**\n   * @ngdoc object\n   * @name lbServices.Contract\n   * @header lbServices.Contract\n   * @object\n   *\n   * @description\n   *\n   * A $resource object for interacting with the `Contract` model.\n   *\n   * ## Example\n   *\n   * See\n   * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n   * for an example of using this object.\n   *\n   */\n  module.factory(\n    \"Contract\",\n    [\n      'LoopBackResource', 'LoopBackAuth', '$injector',\n      function (Resource, LoopBackAuth, $injector) {\n        var R = Resource(\n          urlBase + \"/Contracts/:id\",\n          {'id': '@id'},\n          {\n\n            // INTERNAL. Use Contract.user() instead.\n            \"prototype$__get__user\": {\n              url: urlBase + \"/Contracts/:id/user\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Contract#create\n             * @methodOf lbServices.Contract\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Contract` object.)\n             * </em>\n             */\n            \"create\": {\n              url: urlBase + \"/Contracts\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Contract#createMany\n             * @methodOf lbServices.Contract\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Contract` object.)\n             * </em>\n             */\n            \"createMany\": {\n              isArray: true,\n              url: urlBase + \"/Contracts\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Contract#patchOrCreate\n             * @methodOf lbServices.Contract\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Contract` object.)\n             * </em>\n             */\n            \"patchOrCreate\": {\n              url: urlBase + \"/Contracts\",\n              method: \"PATCH\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Contract#replaceOrCreate\n             * @methodOf lbServices.Contract\n             *\n             * @description\n             *\n             * Replace an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Contract` object.)\n             * </em>\n             */\n            \"replaceOrCreate\": {\n              url: urlBase + \"/Contracts/replaceOrCreate\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Contract#upsertWithWhere\n             * @methodOf lbServices.Contract\n             *\n             * @description\n             *\n             * Update an existing model instance or insert a new one into the data source based on the where criteria.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Contract` object.)\n             * </em>\n             */\n            \"upsertWithWhere\": {\n              url: urlBase + \"/Contracts/upsertWithWhere\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Contract#exists\n             * @methodOf lbServices.Contract\n             *\n             * @description\n             *\n             * Check whether a model instance exists in the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `exists` – `{boolean=}` -\n             */\n            \"exists\": {\n              url: urlBase + \"/Contracts/:id/exists\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Contract#findById\n             * @methodOf lbServices.Contract\n             *\n             * @description\n             *\n             * Find a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `filter` – `{object=}` - Filter defining fields and include\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Contract` object.)\n             * </em>\n             */\n            \"findById\": {\n              url: urlBase + \"/Contracts/:id\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Contract#replaceById\n             * @methodOf lbServices.Contract\n             *\n             * @description\n             *\n             * Replace attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Contract` object.)\n             * </em>\n             */\n            \"replaceById\": {\n              url: urlBase + \"/Contracts/:id/replace\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Contract#find\n             * @methodOf lbServices.Contract\n             *\n             * @description\n             *\n             * Find all instances of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Contract` object.)\n             * </em>\n             */\n            \"find\": {\n              isArray: true,\n              url: urlBase + \"/Contracts\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Contract#findOne\n             * @methodOf lbServices.Contract\n             *\n             * @description\n             *\n             * Find first instance of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Contract` object.)\n             * </em>\n             */\n            \"findOne\": {\n              url: urlBase + \"/Contracts/findOne\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Contract#updateAll\n             * @methodOf lbServices.Contract\n             *\n             * @description\n             *\n             * Update instances of the model matched by {{where}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Information related to the outcome of the operation\n             */\n            \"updateAll\": {\n              url: urlBase + \"/Contracts/update\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Contract#deleteById\n             * @methodOf lbServices.Contract\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Contract` object.)\n             * </em>\n             */\n            \"deleteById\": {\n              url: urlBase + \"/Contracts/:id\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Contract#count\n             * @methodOf lbServices.Contract\n             *\n             * @description\n             *\n             * Count instances of the model matched by where from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n            \"count\": {\n              url: urlBase + \"/Contracts/count\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Contract#prototype$patchAttributes\n             * @methodOf lbServices.Contract\n             *\n             * @description\n             *\n             * Patch attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             *  - `data` – `{object=}` - An object of model property name/value pairs\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Contract` object.)\n             * </em>\n             */\n            \"prototype$patchAttributes\": {\n              url: urlBase + \"/Contracts/:id\",\n              method: \"PATCH\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Contract#createChangeStream\n             * @methodOf lbServices.Contract\n             *\n             * @description\n             *\n             * Create a change stream.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `changes` – `{ReadableStream=}` -\n             */\n            \"createChangeStream\": {\n              url: urlBase + \"/Contracts/change-stream\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Contract#construct_contract\n             * @methodOf lbServices.Contract\n             *\n             * @description\n             *\n             * Construct the certificate from given ids.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `user_id` – `{string}` - the user id gain contract certificate\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `data` – `{object}` - when the admin resolve an issue\n             *\n             *  - `req` – `{object=}` -\n             *\n             *  - `res` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Return value\n             */\n            \"construct_contract\": {\n              url: urlBase + \"/Contracts/construct_contract/:user_id\",\n              method: \"POST\",\n            },\n          }\n        );\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Contract#upsert\n         * @methodOf lbServices.Contract\n         *\n         * @description\n         *\n         * Patch an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `data` – `{object=}` - Model instance data\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Contract` object.)\n         * </em>\n         */\n        R[\"upsert\"] = R[\"patchOrCreate\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Contract#updateOrCreate\n         * @methodOf lbServices.Contract\n         *\n         * @description\n         *\n         * Patch an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `data` – `{object=}` - Model instance data\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Contract` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"patchOrCreate\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Contract#patchOrCreateWithWhere\n         * @methodOf lbServices.Contract\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source based on the where criteria.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Contract` object.)\n         * </em>\n         */\n        R[\"patchOrCreateWithWhere\"] = R[\"upsertWithWhere\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Contract#update\n         * @methodOf lbServices.Contract\n         *\n         * @description\n         *\n         * Update instances of the model matched by {{where}} from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Information related to the outcome of the operation\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Contract#destroyById\n         * @methodOf lbServices.Contract\n         *\n         * @description\n         *\n         * Delete a model instance by {{id}} from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Contract` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Contract#removeById\n         * @methodOf lbServices.Contract\n         *\n         * @description\n         *\n         * Delete a model instance by {{id}} from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Contract` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Contract#updateAttributes\n         * @methodOf lbServices.Contract\n         *\n         * @description\n         *\n         * Patch attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         *  - `data` – `{object=}` - An object of model property name/value pairs\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Contract` object.)\n         * </em>\n         */\n        R[\"updateAttributes\"] = R[\"prototype$patchAttributes\"];\n\n\n        /**\n         * @ngdoc property\n         * @name lbServices.Contract#modelName\n         * @propertyOf lbServices.Contract\n         * @description\n         * The name of the model represented by this $resource,\n         * i.e. `Contract`.\n         */\n        R.modelName = \"Contract\";\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Contract#user\n         * @methodOf lbServices.Contract\n         *\n         * @description\n         *\n         * Fetches belongsTo relation user.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         *  - `refresh` – `{boolean=}` -\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R.user = function () {\n          var TargetResource = $injector.get(\"User\");\n          var action = TargetResource[\"::get::Contract::user\"];\n          return action.apply(R, arguments);\n        };\n\n\n        return R;\n      }]);\n\n  /**\n   * @ngdoc object\n   * @name lbServices.Basemap\n   * @header lbServices.Basemap\n   * @object\n   *\n   * @description\n   *\n   * A $resource object for interacting with the `Basemap` model.\n   *\n   * ## Example\n   *\n   * See\n   * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n   * for an example of using this object.\n   *\n   */\n  module.factory(\n    \"Basemap\",\n    [\n      'LoopBackResource', 'LoopBackAuth', '$injector',\n      function (Resource, LoopBackAuth, $injector) {\n        var R = Resource(\n          urlBase + \"/Basemaps/:id\",\n          {'id': '@id'},\n          {\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#create\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n            \"create\": {\n              url: urlBase + \"/Basemaps\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#createMany\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n            \"createMany\": {\n              isArray: true,\n              url: urlBase + \"/Basemaps\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#patchOrCreate\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n            \"patchOrCreate\": {\n              url: urlBase + \"/Basemaps\",\n              method: \"PATCH\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#replaceOrCreate\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Replace an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n            \"replaceOrCreate\": {\n              url: urlBase + \"/Basemaps/replaceOrCreate\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#upsertWithWhere\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Update an existing model instance or insert a new one into the data source based on the where criteria.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n            \"upsertWithWhere\": {\n              url: urlBase + \"/Basemaps/upsertWithWhere\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#exists\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Check whether a model instance exists in the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `exists` – `{boolean=}` -\n             */\n            \"exists\": {\n              url: urlBase + \"/Basemaps/:id/exists\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#findById\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Find a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `filter` – `{object=}` - Filter defining fields and include\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n            \"findById\": {\n              url: urlBase + \"/Basemaps/:id\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#replaceById\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Replace attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n            \"replaceById\": {\n              url: urlBase + \"/Basemaps/:id/replace\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#find\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Find all instances of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n            \"find\": {\n              isArray: true,\n              url: urlBase + \"/Basemaps\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#findOne\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Find first instance of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n            \"findOne\": {\n              url: urlBase + \"/Basemaps/findOne\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#updateAll\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Update instances of the model matched by {{where}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Information related to the outcome of the operation\n             */\n            \"updateAll\": {\n              url: urlBase + \"/Basemaps/update\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#deleteById\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n            \"deleteById\": {\n              url: urlBase + \"/Basemaps/:id\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#count\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Count instances of the model matched by where from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n            \"count\": {\n              url: urlBase + \"/Basemaps/count\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#prototype$patchAttributes\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Patch attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             *  - `data` – `{object=}` - An object of model property name/value pairs\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n            \"prototype$patchAttributes\": {\n              url: urlBase + \"/Basemaps/:id\",\n              method: \"PATCH\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#createChangeStream\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Create a change stream.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `changes` – `{ReadableStream=}` -\n             */\n            \"createChangeStream\": {\n              url: urlBase + \"/Basemaps/change-stream\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#get_custom_job\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Cron get empty removals ...\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Return value\n             */\n            \"get_custom_job\": {\n              url: urlBase + \"/Basemaps/get_custom_job/\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#get_empty_check\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Cron get empty removals ...\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Return value\n             */\n            \"get_empty_check\": {\n              url: urlBase + \"/Basemaps/check_removals/\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#get_by_owner_v2\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Cron job to the list locally..\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `owner` – `{string}` - list the items by the owner\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Return value\n             */\n            \"get_by_owner_v2\": {\n              isArray: true,\n              url: urlBase + \"/Basemaps/get_by_owner/:owner\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#get_lucky_list\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Cron job to the list locally..\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `count` – `{number}` - the count number of the random list\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Return value\n             */\n            \"get_lucky_list\": {\n              isArray: true,\n              url: urlBase + \"/Basemaps/getlucky/:count\",\n              method: \"GET\",\n            },\n          }\n        );\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Basemap#upsert\n         * @methodOf lbServices.Basemap\n         *\n         * @description\n         *\n         * Patch an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `data` – `{object=}` - Model instance data\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Basemap` object.)\n         * </em>\n         */\n        R[\"upsert\"] = R[\"patchOrCreate\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Basemap#updateOrCreate\n         * @methodOf lbServices.Basemap\n         *\n         * @description\n         *\n         * Patch an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `data` – `{object=}` - Model instance data\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Basemap` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"patchOrCreate\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Basemap#patchOrCreateWithWhere\n         * @methodOf lbServices.Basemap\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source based on the where criteria.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Basemap` object.)\n         * </em>\n         */\n        R[\"patchOrCreateWithWhere\"] = R[\"upsertWithWhere\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Basemap#update\n         * @methodOf lbServices.Basemap\n         *\n         * @description\n         *\n         * Update instances of the model matched by {{where}} from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Information related to the outcome of the operation\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Basemap#destroyById\n         * @methodOf lbServices.Basemap\n         *\n         * @description\n         *\n         * Delete a model instance by {{id}} from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Basemap` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Basemap#removeById\n         * @methodOf lbServices.Basemap\n         *\n         * @description\n         *\n         * Delete a model instance by {{id}} from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Basemap` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Basemap#updateAttributes\n         * @methodOf lbServices.Basemap\n         *\n         * @description\n         *\n         * Patch attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         *  - `data` – `{object=}` - An object of model property name/value pairs\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Basemap` object.)\n         * </em>\n         */\n        R[\"updateAttributes\"] = R[\"prototype$patchAttributes\"];\n\n\n        /**\n         * @ngdoc property\n         * @name lbServices.Basemap#modelName\n         * @propertyOf lbServices.Basemap\n         * @description\n         * The name of the model represented by this $resource,\n         * i.e. `Basemap`.\n         */\n        R.modelName = \"Basemap\";\n\n\n        return R;\n      }]);\n\n  /**\n   * @ngdoc object\n   * @name lbServices.User\n   * @header lbServices.User\n   * @object\n   *\n   * @description\n   *\n   * A $resource object for interacting with the `User` model.\n   *\n   * ## Example\n   *\n   * See\n   * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n   * for an example of using this object.\n   *\n   */\n  module.factory(\n    \"User\",\n    [\n      'LoopBackResource', 'LoopBackAuth', '$injector',\n      function (Resource, LoopBackAuth, $injector) {\n        var R = Resource(\n          urlBase + \"/users/:id\",\n          {'id': '@id'},\n          {\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#prototype$__findById__accessTokens\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Find a related item by id for accessTokens.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `fk` – `{*}` - Foreign key for accessTokens\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"prototype$__findById__accessTokens\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/accessTokens/:fk\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#prototype$__destroyById__accessTokens\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Delete a related item by id for accessTokens.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `fk` – `{*}` - Foreign key for accessTokens\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"prototype$__destroyById__accessTokens\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/accessTokens/:fk\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#prototype$__updateById__accessTokens\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Update a related item by id for accessTokens.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `fk` – `{*}` - Foreign key for accessTokens\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"prototype$__updateById__accessTokens\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/accessTokens/:fk\",\n              method: \"PUT\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#prototype$__get__accessTokens\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Queries accessTokens of user.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `filter` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"prototype$__get__accessTokens\": {\n              isArray: true,\n              url: urlBase + \"/users/:id/accessTokens\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#prototype$__create__accessTokens\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Creates a new instance in accessTokens of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"prototype$__create__accessTokens\": {\n              url: urlBase + \"/users/:id/accessTokens\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#prototype$__delete__accessTokens\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Deletes all accessTokens of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"prototype$__delete__accessTokens\": {\n              url: urlBase + \"/users/:id/accessTokens\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#prototype$__count__accessTokens\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Counts accessTokens of user.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n            \"prototype$__count__accessTokens\": {\n              url: urlBase + \"/users/:id/accessTokens/count\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#create\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"create\": {\n              url: urlBase + \"/users\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#createMany\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"createMany\": {\n              isArray: true,\n              url: urlBase + \"/users\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#patchOrCreate\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `data` – `{object=}` - Model instance data\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"patchOrCreate\": {\n              url: urlBase + \"/users\",\n              method: \"PATCH\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#replaceOrCreate\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Replace an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"replaceOrCreate\": {\n              url: urlBase + \"/users/replaceOrCreate\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#upsertWithWhere\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Update an existing model instance or insert a new one into the data source based on the where criteria.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"upsertWithWhere\": {\n              url: urlBase + \"/users/upsertWithWhere\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#exists\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Check whether a model instance exists in the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `exists` – `{boolean=}` -\n             */\n            \"exists\": {\n              url: urlBase + \"/users/:id/exists\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#findById\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Find a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `filter` – `{object=}` - Filter defining fields and include\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"findById\": {\n              url: urlBase + \"/users/:id\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#replaceById\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Replace attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"replaceById\": {\n              url: urlBase + \"/users/:id/replace\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#find\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Find all instances of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"find\": {\n              isArray: true,\n              url: urlBase + \"/users\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#findOne\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Find first instance of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"findOne\": {\n              url: urlBase + \"/users/findOne\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#updateAll\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Update instances of the model matched by {{where}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Information related to the outcome of the operation\n             */\n            \"updateAll\": {\n              url: urlBase + \"/users/update\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#deleteById\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"deleteById\": {\n              url: urlBase + \"/users/:id\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#count\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Count instances of the model matched by where from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n            \"count\": {\n              url: urlBase + \"/users/count\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#prototype$patchAttributes\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Patch attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `data` – `{object=}` - An object of model property name/value pairs\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"prototype$patchAttributes\": {\n              url: urlBase + \"/users/:id\",\n              method: \"PATCH\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#createChangeStream\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Create a change stream.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `changes` – `{ReadableStream=}` -\n             */\n            \"createChangeStream\": {\n              url: urlBase + \"/users/change-stream\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#login\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Login a user with username/email and password.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.\n             *   Default value: `user`.\n             *\n             *  - `rememberMe` - `boolean` - Whether the authentication credentials\n             *     should be remembered in localStorage across app/browser restarts.\n             *     Default: `true`.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * The response body contains properties of the AccessToken created on login.\n             * Depending on the value of `include` parameter, the body may contain additional properties:\n             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)\n             *\n             */\n            \"login\": {\n              params: {\n                include: 'user',\n              },\n              interceptor: {\n                response: function (response) {\n                  var accessToken = response.data;\n                  LoopBackAuth.setUser(\n                    accessToken.id, accessToken.userId, accessToken.user);\n                  LoopBackAuth.rememberMe =\n                    response.config.params.rememberMe !== false;\n                  LoopBackAuth.save();\n                  return response.resource;\n                },\n              },\n              url: urlBase + \"/users/login\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#logout\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Logout a user with access token.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"logout\": {\n              interceptor: {\n                response: function (response) {\n                  LoopBackAuth.clearUser();\n                  LoopBackAuth.clearStorage();\n                  return response.resource;\n                },\n                responseError: function (responseError) {\n                  LoopBackAuth.clearUser();\n                  LoopBackAuth.clearStorage();\n                  return responseError.resource;\n                },\n              },\n              url: urlBase + \"/users/logout\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#confirm\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Confirm a user registration with email verification token.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `uid` – `{string}` -\n             *\n             *  - `token` – `{string}` -\n             *\n             *  - `redirect` – `{string=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"confirm\": {\n              url: urlBase + \"/users/confirm\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#resetPassword\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Reset password for a user with email.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"resetPassword\": {\n              url: urlBase + \"/users/reset\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#email_verify_from_code\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Email verification with the code.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Return value\n             */\n            \"email_verify_from_code\": {\n              url: urlBase + \"/users/reset_code_verify\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#email_verify\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Email verification.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Return value\n             */\n            \"email_verify\": {\n              url: urlBase + \"/users/reset_login_pass\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#fb_login_call\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Update facebook login access channel in here..\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Return value\n             */\n            \"fb_login_call\": {\n              url: urlBase + \"/users/login_facebook\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#loginWithCode\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Using token to login the system directly.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Return value\n             */\n            \"loginWithCode\": {\n              url: urlBase + \"/users/direct_login\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#most_popular\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * List out the filter of popular artist in the community.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Return value\n             */\n            \"most_popular\": {\n              url: urlBase + \"/users/most_popular\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#update_meta_call\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Update the data object from the object.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{string}` - id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Return value\n             */\n            \"update_meta_call\": {\n              url: urlBase + \"/users/:id/insertimagemeta\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#update_profile_photo\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Update user profile in this api\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `req` – `{object=}` -\n             *\n             *  - `res` – `{object=}` -\n             *\n             *  - `id` – `{string=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Return value\n             */\n            \"update_profile_photo\": {\n              url: urlBase + \"/users/update_profile_photo/:id\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Contract.user() instead.\n            \"::get::Contract::user\": {\n              url: urlBase + \"/Contracts/:id/user\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#getCurrent\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Get data of the currently logged user. Fail with HTTP result 401\n             * when there is no user logged in.\n             *\n             * @param {function(Object,Object)=} successCb\n             *    Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *    `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             */\n            'getCurrent': {\n              url: urlBase + \"/users\" + '/:id',\n              method: 'GET',\n              params: {\n                id: function () {\n                  var id = LoopBackAuth.currentUserId;\n                  if (id == null) id = '__anonymous__';\n                  return id;\n                },\n              },\n              interceptor: {\n                response: function (response) {\n                  LoopBackAuth.currentUserData = response.data;\n                  return response.resource;\n                },\n              },\n              __isGetCurrentUser__: true,\n            },\n          }\n        );\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#upsert\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Patch an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `data` – `{object=}` - Model instance data\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"upsert\"] = R[\"patchOrCreate\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#updateOrCreate\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Patch an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `data` – `{object=}` - Model instance data\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"patchOrCreate\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#patchOrCreateWithWhere\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source based on the where criteria.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"patchOrCreateWithWhere\"] = R[\"upsertWithWhere\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#update\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update instances of the model matched by {{where}} from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Information related to the outcome of the operation\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#destroyById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by {{id}} from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#removeById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by {{id}} from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#updateAttributes\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Patch attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `data` – `{object=}` - An object of model property name/value pairs\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"updateAttributes\"] = R[\"prototype$patchAttributes\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCachedCurrent\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Get data of the currently logged user that was returned by the last\n         * call to {@link lbServices.User#login} or\n         * {@link lbServices.User#getCurrent}. Return null when there\n         * is no user logged in or the data of the current user were not fetched\n         * yet.\n         *\n         * @returns {Object} A User instance.\n         */\n        R.getCachedCurrent = function () {\n          var data = LoopBackAuth.currentUserData;\n          return data ? new R(data) : null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#isAuthenticated\n         * @methodOf lbServices.User\n         *\n         * @returns {boolean} True if the current user is authenticated (logged in).\n         */\n        R.isAuthenticated = function () {\n          return this.getCurrentId() != null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCurrentId\n         * @methodOf lbServices.User\n         *\n         * @returns {Object} Id of the currently logged-in user or null.\n         */\n        R.getCurrentId = function () {\n          return LoopBackAuth.currentUserId;\n        };\n\n        /**\n         * @ngdoc property\n         * @name lbServices.User#modelName\n         * @propertyOf lbServices.User\n         * @description\n         * The name of the model represented by this $resource,\n         * i.e. `User`.\n         */\n        R.modelName = \"User\";\n\n\n        return R;\n      }]);\n\n  /**\n   * @ngdoc object\n   * @name lbServices.Container\n   * @header lbServices.Container\n   * @object\n   *\n   * @description\n   *\n   * A $resource object for interacting with the `Container` model.\n   *\n   * ## Example\n   *\n   * See\n   * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n   * for an example of using this object.\n   *\n   */\n  module.factory(\n    \"Container\",\n    [\n      'LoopBackResource', 'LoopBackAuth', '$injector',\n      function (Resource, LoopBackAuth, $injector) {\n        var R = Resource(\n          urlBase + \"/Containers/:id\",\n          {'id': '@id'},\n          {\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Container#getContainers\n             * @methodOf lbServices.Container\n             *\n             * @description\n             *\n             * <em>\n             * (The remote method definition does not provide any description.)\n             * </em>\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Container` object.)\n             * </em>\n             */\n            \"getContainers\": {\n              isArray: true,\n              url: urlBase + \"/Containers\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Container#createContainer\n             * @methodOf lbServices.Container\n             *\n             * @description\n             *\n             * <em>\n             * (The remote method definition does not provide any description.)\n             * </em>\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Container` object.)\n             * </em>\n             */\n            \"createContainer\": {\n              url: urlBase + \"/Containers\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Container#destroyContainer\n             * @methodOf lbServices.Container\n             *\n             * @description\n             *\n             * <em>\n             * (The remote method definition does not provide any description.)\n             * </em>\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `container` – `{string=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `` – `{undefined=}` -\n             */\n            \"destroyContainer\": {\n              url: urlBase + \"/Containers/:container\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Container#getContainer\n             * @methodOf lbServices.Container\n             *\n             * @description\n             *\n             * <em>\n             * (The remote method definition does not provide any description.)\n             * </em>\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `container` – `{string=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Container` object.)\n             * </em>\n             */\n            \"getContainer\": {\n              url: urlBase + \"/Containers/:container\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Container#getFiles\n             * @methodOf lbServices.Container\n             *\n             * @description\n             *\n             * <em>\n             * (The remote method definition does not provide any description.)\n             * </em>\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `container` – `{string=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Container` object.)\n             * </em>\n             */\n            \"getFiles\": {\n              isArray: true,\n              url: urlBase + \"/Containers/:container/files\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Container#getFile\n             * @methodOf lbServices.Container\n             *\n             * @description\n             *\n             * <em>\n             * (The remote method definition does not provide any description.)\n             * </em>\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `container` – `{string=}` -\n             *\n             *  - `file` – `{string=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Container` object.)\n             * </em>\n             */\n            \"getFile\": {\n              url: urlBase + \"/Containers/:container/files/:file\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Container#removeFile\n             * @methodOf lbServices.Container\n             *\n             * @description\n             *\n             * <em>\n             * (The remote method definition does not provide any description.)\n             * </em>\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `container` – `{string=}` -\n             *\n             *  - `file` – `{string=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `` – `{undefined=}` -\n             */\n            \"removeFile\": {\n              url: urlBase + \"/Containers/:container/files/:file\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Container#upload\n             * @methodOf lbServices.Container\n             *\n             * @description\n             *\n             * <em>\n             * (The remote method definition does not provide any description.)\n             * </em>\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `req` – `{object=}` -\n             *\n             *  - `res` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `result` – `{object=}` -\n             */\n            \"upload\": {\n              url: urlBase + \"/Containers/:container/upload\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Container#download\n             * @methodOf lbServices.Container\n             *\n             * @description\n             *\n             * <em>\n             * (The remote method definition does not provide any description.)\n             * </em>\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `container` – `{string=}` -\n             *\n             *  - `file` – `{string=}` -\n             *\n             *  - `req` – `{object=}` -\n             *\n             *  - `res` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"download\": {\n              url: urlBase + \"/Containers/:container/download/:file\",\n              method: \"GET\",\n            },\n          }\n        );\n\n\n        /**\n         * @ngdoc property\n         * @name lbServices.Container#modelName\n         * @propertyOf lbServices.Container\n         * @description\n         * The name of the model represented by this $resource,\n         * i.e. `Container`.\n         */\n        R.modelName = \"Container\";\n\n\n        return R;\n      }]);\n\n\n  module\n    .factory('LoopBackAuth', function () {\n      var props = ['accessTokenId', 'currentUserId', 'rememberMe'];\n      var propsPrefix = '$LoopBack$';\n\n      function LoopBackAuth() {\n        var self = this;\n        props.forEach(function (name) {\n          self[name] = load(name);\n        });\n        this.currentUserData = null;\n      }\n\n      LoopBackAuth.prototype.save = function () {\n        var self = this;\n        var storage = this.rememberMe ? localStorage : sessionStorage;\n        props.forEach(function (name) {\n          save(storage, name, self[name]);\n        });\n      };\n\n      LoopBackAuth.prototype.setUser = function (accessTokenId, userId, userData) {\n        this.accessTokenId = accessTokenId;\n        this.currentUserId = userId;\n        this.currentUserData = userData;\n      };\n\n      LoopBackAuth.prototype.clearUser = function () {\n        this.accessTokenId = null;\n        this.currentUserId = null;\n        this.currentUserData = null;\n      };\n\n      LoopBackAuth.prototype.clearStorage = function () {\n        props.forEach(function (name) {\n          save(sessionStorage, name, null);\n          save(localStorage, name, null);\n        });\n      };\n\n      return new LoopBackAuth();\n\n      // Note: LocalStorage converts the value to string\n      // We are using empty string as a marker for null/undefined values.\n      function save(storage, name, value) {\n        try {\n          var key = propsPrefix + name;\n          if (value == null) value = '';\n          storage[key] = value;\n        } catch (err) {\n          console.log('Cannot access local/session storage:', err);\n        }\n      }\n\n      function load(name) {\n        var key = propsPrefix + name;\n        return localStorage[key] || sessionStorage[key] || null;\n      }\n    })\n    .config(['$httpProvider', function ($httpProvider) {\n      $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');\n    }])\n    .factory('LoopBackAuthRequestInterceptor', ['$q', 'LoopBackAuth',\n      function ($q, LoopBackAuth) {\n        return {\n          'request': function (config) {\n            // filter out external requests\n            var host = getHost(config.url);\n            if (host && host !== urlBaseHost) {\n              return config;\n            }\n\n            if (LoopBackAuth.accessTokenId) {\n              config.headers[authHeader] = LoopBackAuth.accessTokenId;\n            } else if (config.__isGetCurrentUser__) {\n              // Return a stub 401 error for User.getCurrent() when\n              // there is no user logged in\n              var res = {\n                body: {error: {status: 401}},\n                status: 401,\n                config: config,\n                headers: function () {\n                  return undefined;\n                },\n              };\n              return $q.reject(res);\n            }\n            return config || $q.when(config);\n          },\n        };\n      }])\n\n    /**\n     * @ngdoc object\n     * @name lbServices.LoopBackResourceProvider\n     * @header lbServices.LoopBackResourceProvider\n     * @description\n     * Use `LoopBackResourceProvider` to change the global configuration\n     * settings used by all models. Note that the provider is available\n     * to Configuration Blocks only, see\n     * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}\n     * for more details.\n     *\n     * ## Example\n     *\n     * ```js\n     * angular.module('app')\n     *  .config(function(LoopBackResourceProvider) {\n   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');\n   *  });\n     * ```\n     */\n    .provider('LoopBackResource', function LoopBackResourceProvider() {\n      /**\n       * @ngdoc method\n       * @name lbServices.LoopBackResourceProvider#setAuthHeader\n       * @methodOf lbServices.LoopBackResourceProvider\n       * @param {string} header The header name to use, e.g. `X-Access-Token`\n       * @description\n       * Configure the REST transport to use a different header for sending\n       * the authentication token. It is sent in the `Authorization` header\n       * by default.\n       */\n      this.setAuthHeader = function (header) {\n        authHeader = header;\n      };\n\n      /**\n       * @ngdoc method\n       * @name lbServices.LoopBackResourceProvider#getAuthHeader\n       * @methodOf lbServices.LoopBackResourceProvider\n       * @description\n       * Get the header name that is used for sending the authentication token.\n       */\n      this.getAuthHeader = function () {\n        return authHeader;\n      };\n\n      /**\n       * @ngdoc method\n       * @name lbServices.LoopBackResourceProvider#setUrlBase\n       * @methodOf lbServices.LoopBackResourceProvider\n       * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.\n       * @description\n       * Change the URL of the REST API server. By default, the URL provided\n       * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n       */\n      this.setUrlBase = function (url) {\n        urlBase = url;\n        urlBaseHost = getHost(urlBase) || location.host;\n      };\n\n      /**\n       * @ngdoc method\n       * @name lbServices.LoopBackResourceProvider#getUrlBase\n       * @methodOf lbServices.LoopBackResourceProvider\n       * @description\n       * Get the URL of the REST API server. The URL provided\n       * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n       */\n      this.getUrlBase = function () {\n        return urlBase;\n      };\n\n      this.$get = ['$resource', function ($resource) {\n        var LoopBackResource = function (url, params, actions) {\n          var resource = $resource(url, params, actions);\n\n          // Angular always calls POST on $save()\n          // This hack is based on\n          // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/\n          resource.prototype.$save = function (success, error) {\n            // Fortunately, LoopBack provides a convenient `upsert` method\n            // that exactly fits our needs.\n            var result = resource.upsert.call(this, {}, this, success, error);\n            return result.$promise || result;\n          };\n          return resource;\n        };\n\n        LoopBackResource.getUrlBase = function () {\n          return urlBase;\n        };\n\n        LoopBackResource.getAuthHeader = function () {\n          return authHeader;\n        };\n\n        return LoopBackResource;\n      }];\n    });\n})(window, window.angular);\n"]}