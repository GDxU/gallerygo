{"version":3,"sources":["lb-services.js"],"names":[],"mappings":"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","file":"lb-services-compiled.js","sourcesContent":["// CommonJS package manager support\nif (typeof module !== 'undefined' && typeof exports !== 'undefined' &&\n  module.exports === exports) {\n  // Export the *name* of this Angular module\n  // Sample usage:\n  //\n  //   import lbServices from './lb-services';\n  //   angular.module('app', [lbServices]);\n  //\n  module.exports = \"lbServices\";\n}\n\n(function(window, angular, undefined) {\n  'use strict';\n\n  var urlBase = \"/api\";\n  var authHeader = 'authorization';\n\n  function getHost(url) {\n    var m = url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);\n    return m ? m[1] : null;\n  }\n\n  var urlBaseHost = getHost(urlBase) || location.host;\n\n/**\n * @ngdoc overview\n * @name lbServices\n * @module\n * @description\n *\n * The `lbServices` module provides services for interacting with\n * the models exposed by the LoopBack server via the REST API.\n *\n */\n  var module = angular.module(\"lbServices\", ['ngResource']);\n\n/**\n * @ngdoc object\n * @name lbServices.User\n * @header lbServices.User\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `User` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\n  module.factory(\n    \"User\",\n    [\n      'LoopBackResource', 'LoopBackAuth', '$injector',\n      function(Resource, LoopBackAuth, $injector) {\n        var R = Resource(\n        urlBase + \"/users/:id\",\n          { 'id': '@id' },\n          {\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#prototype$__findById__accessTokens\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Find a related item by id for accessTokens.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `fk` – `{*}` - Foreign key for accessTokens\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"prototype$__findById__accessTokens\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/accessTokens/:fk\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#prototype$__destroyById__accessTokens\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Delete a related item by id for accessTokens.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `fk` – `{*}` - Foreign key for accessTokens\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"prototype$__destroyById__accessTokens\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/accessTokens/:fk\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#prototype$__updateById__accessTokens\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Update a related item by id for accessTokens.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `fk` – `{*}` - Foreign key for accessTokens\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"prototype$__updateById__accessTokens\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/accessTokens/:fk\",\n              method: \"PUT\",\n            },\n\n            // INTERNAL. Use User.basemaps.findById() instead.\n            \"prototype$__findById__basemaps\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/basemaps/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use User.basemaps.destroyById() instead.\n            \"prototype$__destroyById__basemaps\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/basemaps/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use User.basemaps.updateById() instead.\n            \"prototype$__updateById__basemaps\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/basemaps/:fk\",\n              method: \"PUT\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#prototype$__get__accessTokens\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Queries accessTokens of user.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `filter` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"prototype$__get__accessTokens\": {\n              isArray: true,\n              url: urlBase + \"/users/:id/accessTokens\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#prototype$__create__accessTokens\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Creates a new instance in accessTokens of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"prototype$__create__accessTokens\": {\n              url: urlBase + \"/users/:id/accessTokens\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#prototype$__delete__accessTokens\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Deletes all accessTokens of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"prototype$__delete__accessTokens\": {\n              url: urlBase + \"/users/:id/accessTokens\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#prototype$__count__accessTokens\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Counts accessTokens of user.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n            \"prototype$__count__accessTokens\": {\n              url: urlBase + \"/users/:id/accessTokens/count\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use User.basemaps() instead.\n            \"prototype$__get__basemaps\": {\n              isArray: true,\n              url: urlBase + \"/users/:id/basemaps\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use User.basemaps.create() instead.\n            \"prototype$__create__basemaps\": {\n              url: urlBase + \"/users/:id/basemaps\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use User.basemaps.destroyAll() instead.\n            \"prototype$__delete__basemaps\": {\n              url: urlBase + \"/users/:id/basemaps\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use User.basemaps.count() instead.\n            \"prototype$__count__basemaps\": {\n              url: urlBase + \"/users/:id/basemaps/count\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#create\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"create\": {\n              url: urlBase + \"/users\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#createMany\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"createMany\": {\n              isArray: true,\n              url: urlBase + \"/users\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#upsert\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"upsert\": {\n              url: urlBase + \"/users\",\n              method: \"PUT\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#replaceOrCreate\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Replace an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"replaceOrCreate\": {\n              url: urlBase + \"/users/replaceOrCreate\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#upsertWithWhere\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Update an existing model instance or insert a new one into the data source based on the where criteria.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"upsertWithWhere\": {\n              url: urlBase + \"/users/upsertWithWhere\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#exists\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Check whether a model instance exists in the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `exists` – `{boolean=}` -\n             */\n            \"exists\": {\n              url: urlBase + \"/users/:id/exists\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#findById\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Find a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `filter` – `{object=}` - Filter defining fields and include\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"findById\": {\n              url: urlBase + \"/users/:id\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#replaceById\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Replace attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"replaceById\": {\n              url: urlBase + \"/users/:id/replace\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#find\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Find all instances of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"find\": {\n              isArray: true,\n              url: urlBase + \"/users\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#findOne\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Find first instance of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"findOne\": {\n              url: urlBase + \"/users/findOne\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#updateAll\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Update instances of the model matched by {{where}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * The number of instances updated\n             */\n            \"updateAll\": {\n              url: urlBase + \"/users/update\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#deleteById\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"deleteById\": {\n              url: urlBase + \"/users/:id\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#count\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Count instances of the model matched by where from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n            \"count\": {\n              url: urlBase + \"/users/count\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#prototype$updateAttributes\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Patch attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n            \"prototype$updateAttributes\": {\n              url: urlBase + \"/users/:id\",\n              method: \"PUT\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#createChangeStream\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Create a change stream.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `changes` – `{ReadableStream=}` -\n             */\n            \"createChangeStream\": {\n              url: urlBase + \"/users/change-stream\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#login\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Login a user with username/email and password.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.\n             *   Default value: `user`.\n             *\n             *  - `rememberMe` - `boolean` - Whether the authentication credentials\n             *     should be remembered in localStorage across app/browser restarts.\n             *     Default: `true`.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * The response body contains properties of the AccessToken created on login.\n             * Depending on the value of `include` parameter, the body may contain additional properties:\n             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)\n             *\n             */\n            \"login\": {\n              params: {\n                include: 'user',\n              },\n              interceptor: {\n                response: function(response) {\n                  var accessToken = response.data;\n                  LoopBackAuth.setUser(\n                    accessToken.id, accessToken.userId, accessToken.user);\n                  LoopBackAuth.rememberMe =\n                    response.config.params.rememberMe !== false;\n                  LoopBackAuth.save();\n                  return response.resource;\n                },\n              },\n              url: urlBase + \"/users/login\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#logout\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Logout a user with access token.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"logout\": {\n              interceptor: {\n                response: function(response) {\n                  LoopBackAuth.clearUser();\n                  LoopBackAuth.clearStorage();\n                  return response.resource;\n                },\n                responseError: function(responseError) {\n                  LoopBackAuth.clearUser();\n                  LoopBackAuth.clearStorage();\n                  return responseError.resource;\n                },\n              },\n              url: urlBase + \"/users/logout\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#confirm\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Confirm a user registration with email verification token.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `uid` – `{string}` -\n             *\n             *  - `token` – `{string}` -\n             *\n             *  - `redirect` – `{string=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"confirm\": {\n              url: urlBase + \"/users/confirm\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#resetPassword\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Reset password for a user with email.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"resetPassword\": {\n              url: urlBase + \"/users/reset\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#prototype$requestCode\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Remote method is allowing people to use it.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `credentials` – `{object}` - credential object json\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * The updated person object.\n             */\n            \"prototype$requestCode\": {\n              url: urlBase + \"/users/:id/requestCode\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#prototype$loginWithCode\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Allow login the account with login code\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `credential` – `{number}` - PersistedModel id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * The updated person object.\n             */\n            \"prototype$loginWithCode\": {\n              url: urlBase + \"/users/:id/loginWithCode\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#email_verify_from_code\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Email verification with the code. \n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Return value\n             */\n            \"email_verify_from_code\": {\n              url: urlBase + \"/users/reset_code_verify\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#email_verify\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Email verification. \n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Return value\n             */\n            \"email_verify\": {\n              url: urlBase + \"/users/reset_login_pass\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#fb_login_call\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Update facebook login access channel in here..\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Return value\n             */\n            \"fb_login_call\": {\n              url: urlBase + \"/users/login_facebook\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#most_popular\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * List out the filter of popular artist in the community.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Return value\n             */\n            \"most_popular\": {\n              url: urlBase + \"/users/most_popular\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#update_meta_call\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Update the data object from the object.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{string}` - id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Return value\n             */\n            \"update_meta_call\": {\n              url: urlBase + \"/users/:id/insertimagemeta\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Basemap.user() instead.\n            \"::get::Basemap::user\": {\n              url: urlBase + \"/Basemaps/:id/user\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#getCurrent\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Get data of the currently logged user. Fail with HTTP result 401\n             * when there is no user logged in.\n             *\n             * @param {function(Object,Object)=} successCb\n             *    Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *    `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             */\n            'getCurrent': {\n              url: urlBase + \"/users\" + '/:id',\n              method: 'GET',\n              params: {\n                id: function() {\n                  var id = LoopBackAuth.currentUserId;\n                  if (id == null) id = '__anonymous__';\n                  return id;\n                },\n              },\n              interceptor: {\n                response: function(response) {\n                  LoopBackAuth.currentUserData = response.data;\n                  return response.resource;\n                },\n              },\n              __isGetCurrentUser__: true,\n            },\n          }\n        );\n\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#patchOrCreate\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n        R[\"patchOrCreate\"] = R[\"upsert\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#updateOrCreate\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#patchOrCreateWithWhere\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Update an existing model instance or insert a new one into the data source based on the where criteria.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n        R[\"patchOrCreateWithWhere\"] = R[\"upsertWithWhere\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#update\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Update instances of the model matched by {{where}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * The number of instances updated\n             */\n        R[\"update\"] = R[\"updateAll\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#destroyById\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#removeById\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#patchAttributes\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Patch attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n        R[\"patchAttributes\"] = R[\"prototype$updateAttributes\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCachedCurrent\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Get data of the currently logged user that was returned by the last\n         * call to {@link lbServices.User#login} or\n         * {@link lbServices.User#getCurrent}. Return null when there\n         * is no user logged in or the data of the current user were not fetched\n         * yet.\n         *\n         * @returns {Object} A User instance.\n         */\n        R.getCachedCurrent = function() {\n          var data = LoopBackAuth.currentUserData;\n          return data ? new R(data) : null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#isAuthenticated\n         * @methodOf lbServices.User\n         *\n         * @returns {boolean} True if the current user is authenticated (logged in).\n         */\n        R.isAuthenticated = function() {\n          return this.getCurrentId() != null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCurrentId\n         * @methodOf lbServices.User\n         *\n         * @returns {Object} Id of the currently logged-in user or null.\n         */\n        R.getCurrentId = function() {\n          return LoopBackAuth.currentUserId;\n        };\n\n        /**\n        * @ngdoc property\n        * @name lbServices.User#modelName\n        * @propertyOf lbServices.User\n        * @description\n        * The name of the model represented by this $resource,\n        * i.e. `User`.\n        */\n        R.modelName = \"User\";\n\n    /**\n     * @ngdoc object\n     * @name lbServices.User.basemaps\n     * @header lbServices.User.basemaps\n     * @object\n     * @description\n     *\n     * The object `User.basemaps` groups methods\n     * manipulating `Basemap` instances related to `User`.\n     *\n     * Call {@link lbServices.User#basemaps User.basemaps()}\n     * to query all related instances.\n     */\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User#basemaps\n             * @methodOf lbServices.User\n             *\n             * @description\n             *\n             * Queries basemaps of user.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `filter` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n        R.basemaps = function() {\n          var TargetResource = $injector.get(\"Basemap\");\n          var action = TargetResource[\"::get::User::basemaps\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User.basemaps#count\n             * @methodOf lbServices.User.basemaps\n             *\n             * @description\n             *\n             * Counts basemaps of user.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n        R.basemaps.count = function() {\n          var TargetResource = $injector.get(\"Basemap\");\n          var action = TargetResource[\"::count::User::basemaps\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User.basemaps#create\n             * @methodOf lbServices.User.basemaps\n             *\n             * @description\n             *\n             * Creates a new instance in basemaps of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n        R.basemaps.create = function() {\n          var TargetResource = $injector.get(\"Basemap\");\n          var action = TargetResource[\"::create::User::basemaps\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User.basemaps#createMany\n             * @methodOf lbServices.User.basemaps\n             *\n             * @description\n             *\n             * Creates a new instance in basemaps of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n        R.basemaps.createMany = function() {\n          var TargetResource = $injector.get(\"Basemap\");\n          var action = TargetResource[\"::createMany::User::basemaps\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User.basemaps#destroyAll\n             * @methodOf lbServices.User.basemaps\n             *\n             * @description\n             *\n             * Deletes all basemaps of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.basemaps.destroyAll = function() {\n          var TargetResource = $injector.get(\"Basemap\");\n          var action = TargetResource[\"::delete::User::basemaps\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User.basemaps#destroyById\n             * @methodOf lbServices.User.basemaps\n             *\n             * @description\n             *\n             * Delete a related item by id for basemaps.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `fk` – `{*}` - Foreign key for basemaps\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.basemaps.destroyById = function() {\n          var TargetResource = $injector.get(\"Basemap\");\n          var action = TargetResource[\"::destroyById::User::basemaps\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User.basemaps#findById\n             * @methodOf lbServices.User.basemaps\n             *\n             * @description\n             *\n             * Find a related item by id for basemaps.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `fk` – `{*}` - Foreign key for basemaps\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n        R.basemaps.findById = function() {\n          var TargetResource = $injector.get(\"Basemap\");\n          var action = TargetResource[\"::findById::User::basemaps\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.User.basemaps#updateById\n             * @methodOf lbServices.User.basemaps\n             *\n             * @description\n             *\n             * Update a related item by id for basemaps.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `fk` – `{*}` - Foreign key for basemaps\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n        R.basemaps.updateById = function() {\n          var TargetResource = $injector.get(\"Basemap\");\n          var action = TargetResource[\"::updateById::User::basemaps\"];\n          return action.apply(R, arguments);\n        };\n\n\n        return R;\n      }]);\n\n/**\n * @ngdoc object\n * @name lbServices.CoffeeShop\n * @header lbServices.CoffeeShop\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `CoffeeShop` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\n  module.factory(\n    \"CoffeeShop\",\n    [\n      'LoopBackResource', 'LoopBackAuth', '$injector',\n      function(Resource, LoopBackAuth, $injector) {\n        var R = Resource(\n        urlBase + \"/CoffeeShops/:id\",\n          { 'id': '@id' },\n          {\n\n            // INTERNAL. Use CoffeeShop.reviews.findById() instead.\n            \"prototype$__findById__reviews\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/CoffeeShops/:id/reviews/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviews.destroyById() instead.\n            \"prototype$__destroyById__reviews\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/CoffeeShops/:id/reviews/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviews.updateById() instead.\n            \"prototype$__updateById__reviews\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/CoffeeShops/:id/reviews/:fk\",\n              method: \"PUT\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviewers.findById() instead.\n            \"prototype$__findById__reviewers\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/CoffeeShops/:id/reviewers/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviewers.destroyById() instead.\n            \"prototype$__destroyById__reviewers\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/CoffeeShops/:id/reviewers/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviewers.updateById() instead.\n            \"prototype$__updateById__reviewers\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/CoffeeShops/:id/reviewers/:fk\",\n              method: \"PUT\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviews() instead.\n            \"prototype$__get__reviews\": {\n              isArray: true,\n              url: urlBase + \"/CoffeeShops/:id/reviews\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviews.create() instead.\n            \"prototype$__create__reviews\": {\n              url: urlBase + \"/CoffeeShops/:id/reviews\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviews.destroyAll() instead.\n            \"prototype$__delete__reviews\": {\n              url: urlBase + \"/CoffeeShops/:id/reviews\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviews.count() instead.\n            \"prototype$__count__reviews\": {\n              url: urlBase + \"/CoffeeShops/:id/reviews/count\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviewers() instead.\n            \"prototype$__get__reviewers\": {\n              isArray: true,\n              url: urlBase + \"/CoffeeShops/:id/reviewers\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviewers.create() instead.\n            \"prototype$__create__reviewers\": {\n              url: urlBase + \"/CoffeeShops/:id/reviewers\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviewers.destroyAll() instead.\n            \"prototype$__delete__reviewers\": {\n              url: urlBase + \"/CoffeeShops/:id/reviewers\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviewers.count() instead.\n            \"prototype$__count__reviewers\": {\n              url: urlBase + \"/CoffeeShops/:id/reviewers/count\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop#create\n             * @methodOf lbServices.CoffeeShop\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `CoffeeShop` object.)\n             * </em>\n             */\n            \"create\": {\n              url: urlBase + \"/CoffeeShops\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop#createMany\n             * @methodOf lbServices.CoffeeShop\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `CoffeeShop` object.)\n             * </em>\n             */\n            \"createMany\": {\n              isArray: true,\n              url: urlBase + \"/CoffeeShops\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop#upsert\n             * @methodOf lbServices.CoffeeShop\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `CoffeeShop` object.)\n             * </em>\n             */\n            \"upsert\": {\n              url: urlBase + \"/CoffeeShops\",\n              method: \"PUT\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop#replaceOrCreate\n             * @methodOf lbServices.CoffeeShop\n             *\n             * @description\n             *\n             * Replace an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `CoffeeShop` object.)\n             * </em>\n             */\n            \"replaceOrCreate\": {\n              url: urlBase + \"/CoffeeShops/replaceOrCreate\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop#upsertWithWhere\n             * @methodOf lbServices.CoffeeShop\n             *\n             * @description\n             *\n             * Update an existing model instance or insert a new one into the data source based on the where criteria.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `CoffeeShop` object.)\n             * </em>\n             */\n            \"upsertWithWhere\": {\n              url: urlBase + \"/CoffeeShops/upsertWithWhere\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop#exists\n             * @methodOf lbServices.CoffeeShop\n             *\n             * @description\n             *\n             * Check whether a model instance exists in the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `exists` – `{boolean=}` -\n             */\n            \"exists\": {\n              url: urlBase + \"/CoffeeShops/:id/exists\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop#findById\n             * @methodOf lbServices.CoffeeShop\n             *\n             * @description\n             *\n             * Find a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `filter` – `{object=}` - Filter defining fields and include\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `CoffeeShop` object.)\n             * </em>\n             */\n            \"findById\": {\n              url: urlBase + \"/CoffeeShops/:id\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop#replaceById\n             * @methodOf lbServices.CoffeeShop\n             *\n             * @description\n             *\n             * Replace attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `CoffeeShop` object.)\n             * </em>\n             */\n            \"replaceById\": {\n              url: urlBase + \"/CoffeeShops/:id/replace\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop#find\n             * @methodOf lbServices.CoffeeShop\n             *\n             * @description\n             *\n             * Find all instances of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `CoffeeShop` object.)\n             * </em>\n             */\n            \"find\": {\n              isArray: true,\n              url: urlBase + \"/CoffeeShops\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop#findOne\n             * @methodOf lbServices.CoffeeShop\n             *\n             * @description\n             *\n             * Find first instance of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `CoffeeShop` object.)\n             * </em>\n             */\n            \"findOne\": {\n              url: urlBase + \"/CoffeeShops/findOne\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop#updateAll\n             * @methodOf lbServices.CoffeeShop\n             *\n             * @description\n             *\n             * Update instances of the model matched by {{where}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * The number of instances updated\n             */\n            \"updateAll\": {\n              url: urlBase + \"/CoffeeShops/update\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop#deleteById\n             * @methodOf lbServices.CoffeeShop\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `CoffeeShop` object.)\n             * </em>\n             */\n            \"deleteById\": {\n              url: urlBase + \"/CoffeeShops/:id\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop#count\n             * @methodOf lbServices.CoffeeShop\n             *\n             * @description\n             *\n             * Count instances of the model matched by where from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n            \"count\": {\n              url: urlBase + \"/CoffeeShops/count\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop#prototype$updateAttributes\n             * @methodOf lbServices.CoffeeShop\n             *\n             * @description\n             *\n             * Patch attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `CoffeeShop` object.)\n             * </em>\n             */\n            \"prototype$updateAttributes\": {\n              url: urlBase + \"/CoffeeShops/:id\",\n              method: \"PUT\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop#createChangeStream\n             * @methodOf lbServices.CoffeeShop\n             *\n             * @description\n             *\n             * Create a change stream.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `changes` – `{ReadableStream=}` -\n             */\n            \"createChangeStream\": {\n              url: urlBase + \"/CoffeeShops/change-stream\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop#status\n             * @methodOf lbServices.CoffeeShop\n             *\n             * @description\n             *\n             * <em>\n             * (The remote method definition does not provide any description.)\n             * </em>\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `status` – `{string=}` -\n             */\n            \"status\": {\n              url: urlBase + \"/CoffeeShops/status\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Review.coffeeShop() instead.\n            \"::get::Review::coffeeShop\": {\n              url: urlBase + \"/Reviews/:id/coffeeShop\",\n              method: \"GET\",\n            },\n          }\n        );\n\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop#patchOrCreate\n             * @methodOf lbServices.CoffeeShop\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `CoffeeShop` object.)\n             * </em>\n             */\n        R[\"patchOrCreate\"] = R[\"upsert\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop#updateOrCreate\n             * @methodOf lbServices.CoffeeShop\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `CoffeeShop` object.)\n             * </em>\n             */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop#patchOrCreateWithWhere\n             * @methodOf lbServices.CoffeeShop\n             *\n             * @description\n             *\n             * Update an existing model instance or insert a new one into the data source based on the where criteria.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `CoffeeShop` object.)\n             * </em>\n             */\n        R[\"patchOrCreateWithWhere\"] = R[\"upsertWithWhere\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop#update\n             * @methodOf lbServices.CoffeeShop\n             *\n             * @description\n             *\n             * Update instances of the model matched by {{where}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * The number of instances updated\n             */\n        R[\"update\"] = R[\"updateAll\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop#destroyById\n             * @methodOf lbServices.CoffeeShop\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `CoffeeShop` object.)\n             * </em>\n             */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop#removeById\n             * @methodOf lbServices.CoffeeShop\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `CoffeeShop` object.)\n             * </em>\n             */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop#patchAttributes\n             * @methodOf lbServices.CoffeeShop\n             *\n             * @description\n             *\n             * Patch attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `CoffeeShop` object.)\n             * </em>\n             */\n        R[\"patchAttributes\"] = R[\"prototype$updateAttributes\"];\n\n\n        /**\n        * @ngdoc property\n        * @name lbServices.CoffeeShop#modelName\n        * @propertyOf lbServices.CoffeeShop\n        * @description\n        * The name of the model represented by this $resource,\n        * i.e. `CoffeeShop`.\n        */\n        R.modelName = \"CoffeeShop\";\n\n    /**\n     * @ngdoc object\n     * @name lbServices.CoffeeShop.reviews\n     * @header lbServices.CoffeeShop.reviews\n     * @object\n     * @description\n     *\n     * The object `CoffeeShop.reviews` groups methods\n     * manipulating `Review` instances related to `CoffeeShop`.\n     *\n     * Call {@link lbServices.CoffeeShop#reviews CoffeeShop.reviews()}\n     * to query all related instances.\n     */\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop#reviews\n             * @methodOf lbServices.CoffeeShop\n             *\n             * @description\n             *\n             * Queries reviews of CoffeeShop.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             *  - `filter` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n        R.reviews = function() {\n          var TargetResource = $injector.get(\"Review\");\n          var action = TargetResource[\"::get::CoffeeShop::reviews\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop.reviews#count\n             * @methodOf lbServices.CoffeeShop.reviews\n             *\n             * @description\n             *\n             * Counts reviews of CoffeeShop.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n        R.reviews.count = function() {\n          var TargetResource = $injector.get(\"Review\");\n          var action = TargetResource[\"::count::CoffeeShop::reviews\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop.reviews#create\n             * @methodOf lbServices.CoffeeShop.reviews\n             *\n             * @description\n             *\n             * Creates a new instance in reviews of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n        R.reviews.create = function() {\n          var TargetResource = $injector.get(\"Review\");\n          var action = TargetResource[\"::create::CoffeeShop::reviews\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop.reviews#createMany\n             * @methodOf lbServices.CoffeeShop.reviews\n             *\n             * @description\n             *\n             * Creates a new instance in reviews of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n        R.reviews.createMany = function() {\n          var TargetResource = $injector.get(\"Review\");\n          var action = TargetResource[\"::createMany::CoffeeShop::reviews\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop.reviews#destroyAll\n             * @methodOf lbServices.CoffeeShop.reviews\n             *\n             * @description\n             *\n             * Deletes all reviews of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.reviews.destroyAll = function() {\n          var TargetResource = $injector.get(\"Review\");\n          var action = TargetResource[\"::delete::CoffeeShop::reviews\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop.reviews#destroyById\n             * @methodOf lbServices.CoffeeShop.reviews\n             *\n             * @description\n             *\n             * Delete a related item by id for reviews.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             *  - `fk` – `{*}` - Foreign key for reviews\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.reviews.destroyById = function() {\n          var TargetResource = $injector.get(\"Review\");\n          var action = TargetResource[\"::destroyById::CoffeeShop::reviews\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop.reviews#findById\n             * @methodOf lbServices.CoffeeShop.reviews\n             *\n             * @description\n             *\n             * Find a related item by id for reviews.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             *  - `fk` – `{*}` - Foreign key for reviews\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n        R.reviews.findById = function() {\n          var TargetResource = $injector.get(\"Review\");\n          var action = TargetResource[\"::findById::CoffeeShop::reviews\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop.reviews#updateById\n             * @methodOf lbServices.CoffeeShop.reviews\n             *\n             * @description\n             *\n             * Update a related item by id for reviews.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             *  - `fk` – `{*}` - Foreign key for reviews\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n        R.reviews.updateById = function() {\n          var TargetResource = $injector.get(\"Review\");\n          var action = TargetResource[\"::updateById::CoffeeShop::reviews\"];\n          return action.apply(R, arguments);\n        };\n    /**\n     * @ngdoc object\n     * @name lbServices.CoffeeShop.reviewers\n     * @header lbServices.CoffeeShop.reviewers\n     * @object\n     * @description\n     *\n     * The object `CoffeeShop.reviewers` groups methods\n     * manipulating `Reviewer` instances related to `CoffeeShop`.\n     *\n     * Call {@link lbServices.CoffeeShop#reviewers CoffeeShop.reviewers()}\n     * to query all related instances.\n     */\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop#reviewers\n             * @methodOf lbServices.CoffeeShop\n             *\n             * @description\n             *\n             * Queries reviewers of CoffeeShop.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             *  - `filter` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n        R.reviewers = function() {\n          var TargetResource = $injector.get(\"Reviewer\");\n          var action = TargetResource[\"::get::CoffeeShop::reviewers\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop.reviewers#count\n             * @methodOf lbServices.CoffeeShop.reviewers\n             *\n             * @description\n             *\n             * Counts reviewers of CoffeeShop.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n        R.reviewers.count = function() {\n          var TargetResource = $injector.get(\"Reviewer\");\n          var action = TargetResource[\"::count::CoffeeShop::reviewers\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop.reviewers#create\n             * @methodOf lbServices.CoffeeShop.reviewers\n             *\n             * @description\n             *\n             * Creates a new instance in reviewers of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n        R.reviewers.create = function() {\n          var TargetResource = $injector.get(\"Reviewer\");\n          var action = TargetResource[\"::create::CoffeeShop::reviewers\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop.reviewers#createMany\n             * @methodOf lbServices.CoffeeShop.reviewers\n             *\n             * @description\n             *\n             * Creates a new instance in reviewers of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n        R.reviewers.createMany = function() {\n          var TargetResource = $injector.get(\"Reviewer\");\n          var action = TargetResource[\"::createMany::CoffeeShop::reviewers\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop.reviewers#destroyAll\n             * @methodOf lbServices.CoffeeShop.reviewers\n             *\n             * @description\n             *\n             * Deletes all reviewers of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.reviewers.destroyAll = function() {\n          var TargetResource = $injector.get(\"Reviewer\");\n          var action = TargetResource[\"::delete::CoffeeShop::reviewers\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop.reviewers#destroyById\n             * @methodOf lbServices.CoffeeShop.reviewers\n             *\n             * @description\n             *\n             * Delete a related item by id for reviewers.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             *  - `fk` – `{*}` - Foreign key for reviewers\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.reviewers.destroyById = function() {\n          var TargetResource = $injector.get(\"Reviewer\");\n          var action = TargetResource[\"::destroyById::CoffeeShop::reviewers\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop.reviewers#findById\n             * @methodOf lbServices.CoffeeShop.reviewers\n             *\n             * @description\n             *\n             * Find a related item by id for reviewers.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             *  - `fk` – `{*}` - Foreign key for reviewers\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n        R.reviewers.findById = function() {\n          var TargetResource = $injector.get(\"Reviewer\");\n          var action = TargetResource[\"::findById::CoffeeShop::reviewers\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.CoffeeShop.reviewers#updateById\n             * @methodOf lbServices.CoffeeShop.reviewers\n             *\n             * @description\n             *\n             * Update a related item by id for reviewers.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             *  - `fk` – `{*}` - Foreign key for reviewers\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n        R.reviewers.updateById = function() {\n          var TargetResource = $injector.get(\"Reviewer\");\n          var action = TargetResource[\"::updateById::CoffeeShop::reviewers\"];\n          return action.apply(R, arguments);\n        };\n\n\n        return R;\n      }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Review\n * @header lbServices.Review\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Review` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\n  module.factory(\n    \"Review\",\n    [\n      'LoopBackResource', 'LoopBackAuth', '$injector',\n      function(Resource, LoopBackAuth, $injector) {\n        var R = Resource(\n        urlBase + \"/Reviews/:id\",\n          { 'id': '@id' },\n          {\n\n            // INTERNAL. Use Review.coffeeShop() instead.\n            \"prototype$__get__coffeeShop\": {\n              url: urlBase + \"/Reviews/:id/coffeeShop\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Review.reviewer() instead.\n            \"prototype$__get__reviewer\": {\n              url: urlBase + \"/Reviews/:id/reviewer\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Review#create\n             * @methodOf lbServices.Review\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n            \"create\": {\n              url: urlBase + \"/Reviews\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Review#createMany\n             * @methodOf lbServices.Review\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n            \"createMany\": {\n              isArray: true,\n              url: urlBase + \"/Reviews\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Review#upsert\n             * @methodOf lbServices.Review\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n            \"upsert\": {\n              url: urlBase + \"/Reviews\",\n              method: \"PUT\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Review#replaceOrCreate\n             * @methodOf lbServices.Review\n             *\n             * @description\n             *\n             * Replace an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n            \"replaceOrCreate\": {\n              url: urlBase + \"/Reviews/replaceOrCreate\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Review#upsertWithWhere\n             * @methodOf lbServices.Review\n             *\n             * @description\n             *\n             * Update an existing model instance or insert a new one into the data source based on the where criteria.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n            \"upsertWithWhere\": {\n              url: urlBase + \"/Reviews/upsertWithWhere\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Review#exists\n             * @methodOf lbServices.Review\n             *\n             * @description\n             *\n             * Check whether a model instance exists in the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `exists` – `{boolean=}` -\n             */\n            \"exists\": {\n              url: urlBase + \"/Reviews/:id/exists\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Review#findById\n             * @methodOf lbServices.Review\n             *\n             * @description\n             *\n             * Find a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `filter` – `{object=}` - Filter defining fields and include\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n            \"findById\": {\n              url: urlBase + \"/Reviews/:id\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Review#replaceById\n             * @methodOf lbServices.Review\n             *\n             * @description\n             *\n             * Replace attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n            \"replaceById\": {\n              url: urlBase + \"/Reviews/:id/replace\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Review#find\n             * @methodOf lbServices.Review\n             *\n             * @description\n             *\n             * Find all instances of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n            \"find\": {\n              isArray: true,\n              url: urlBase + \"/Reviews\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Review#findOne\n             * @methodOf lbServices.Review\n             *\n             * @description\n             *\n             * Find first instance of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n            \"findOne\": {\n              url: urlBase + \"/Reviews/findOne\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Review#updateAll\n             * @methodOf lbServices.Review\n             *\n             * @description\n             *\n             * Update instances of the model matched by {{where}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * The number of instances updated\n             */\n            \"updateAll\": {\n              url: urlBase + \"/Reviews/update\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Review#deleteById\n             * @methodOf lbServices.Review\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n            \"deleteById\": {\n              url: urlBase + \"/Reviews/:id\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Review#count\n             * @methodOf lbServices.Review\n             *\n             * @description\n             *\n             * Count instances of the model matched by where from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n            \"count\": {\n              url: urlBase + \"/Reviews/count\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Review#prototype$updateAttributes\n             * @methodOf lbServices.Review\n             *\n             * @description\n             *\n             * Patch attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n            \"prototype$updateAttributes\": {\n              url: urlBase + \"/Reviews/:id\",\n              method: \"PUT\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Review#createChangeStream\n             * @methodOf lbServices.Review\n             *\n             * @description\n             *\n             * Create a change stream.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `changes` – `{ReadableStream=}` -\n             */\n            \"createChangeStream\": {\n              url: urlBase + \"/Reviews/change-stream\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviews.findById() instead.\n            \"::findById::CoffeeShop::reviews\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/CoffeeShops/:id/reviews/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviews.destroyById() instead.\n            \"::destroyById::CoffeeShop::reviews\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/CoffeeShops/:id/reviews/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviews.updateById() instead.\n            \"::updateById::CoffeeShop::reviews\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/CoffeeShops/:id/reviews/:fk\",\n              method: \"PUT\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviews() instead.\n            \"::get::CoffeeShop::reviews\": {\n              isArray: true,\n              url: urlBase + \"/CoffeeShops/:id/reviews\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviews.create() instead.\n            \"::create::CoffeeShop::reviews\": {\n              url: urlBase + \"/CoffeeShops/:id/reviews\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviews.createMany() instead.\n            \"::createMany::CoffeeShop::reviews\": {\n              isArray: true,\n              url: urlBase + \"/CoffeeShops/:id/reviews\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviews.destroyAll() instead.\n            \"::delete::CoffeeShop::reviews\": {\n              url: urlBase + \"/CoffeeShops/:id/reviews\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviews.count() instead.\n            \"::count::CoffeeShop::reviews\": {\n              url: urlBase + \"/CoffeeShops/:id/reviews/count\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Reviewer.reviews.findById() instead.\n            \"::findById::Reviewer::reviews\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Reviewers/:id/reviews/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Reviewer.reviews.destroyById() instead.\n            \"::destroyById::Reviewer::reviews\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Reviewers/:id/reviews/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Reviewer.reviews.updateById() instead.\n            \"::updateById::Reviewer::reviews\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Reviewers/:id/reviews/:fk\",\n              method: \"PUT\",\n            },\n\n            // INTERNAL. Use Reviewer.reviews() instead.\n            \"::get::Reviewer::reviews\": {\n              isArray: true,\n              url: urlBase + \"/Reviewers/:id/reviews\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Reviewer.reviews.create() instead.\n            \"::create::Reviewer::reviews\": {\n              url: urlBase + \"/Reviewers/:id/reviews\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Reviewer.reviews.createMany() instead.\n            \"::createMany::Reviewer::reviews\": {\n              isArray: true,\n              url: urlBase + \"/Reviewers/:id/reviews\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Reviewer.reviews.destroyAll() instead.\n            \"::delete::Reviewer::reviews\": {\n              url: urlBase + \"/Reviewers/:id/reviews\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Reviewer.reviews.count() instead.\n            \"::count::Reviewer::reviews\": {\n              url: urlBase + \"/Reviewers/:id/reviews/count\",\n              method: \"GET\",\n            },\n          }\n        );\n\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Review#patchOrCreate\n             * @methodOf lbServices.Review\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n        R[\"patchOrCreate\"] = R[\"upsert\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Review#updateOrCreate\n             * @methodOf lbServices.Review\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Review#patchOrCreateWithWhere\n             * @methodOf lbServices.Review\n             *\n             * @description\n             *\n             * Update an existing model instance or insert a new one into the data source based on the where criteria.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n        R[\"patchOrCreateWithWhere\"] = R[\"upsertWithWhere\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Review#update\n             * @methodOf lbServices.Review\n             *\n             * @description\n             *\n             * Update instances of the model matched by {{where}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * The number of instances updated\n             */\n        R[\"update\"] = R[\"updateAll\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Review#destroyById\n             * @methodOf lbServices.Review\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Review#removeById\n             * @methodOf lbServices.Review\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Review#patchAttributes\n             * @methodOf lbServices.Review\n             *\n             * @description\n             *\n             * Patch attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n        R[\"patchAttributes\"] = R[\"prototype$updateAttributes\"];\n\n\n        /**\n        * @ngdoc property\n        * @name lbServices.Review#modelName\n        * @propertyOf lbServices.Review\n        * @description\n        * The name of the model represented by this $resource,\n        * i.e. `Review`.\n        */\n        R.modelName = \"Review\";\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Review#coffeeShop\n             * @methodOf lbServices.Review\n             *\n             * @description\n             *\n             * Fetches belongsTo relation coffeeShop.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             *  - `refresh` – `{boolean=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `CoffeeShop` object.)\n             * </em>\n             */\n        R.coffeeShop = function() {\n          var TargetResource = $injector.get(\"CoffeeShop\");\n          var action = TargetResource[\"::get::Review::coffeeShop\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Review#reviewer\n             * @methodOf lbServices.Review\n             *\n             * @description\n             *\n             * Fetches belongsTo relation reviewer.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             *  - `refresh` – `{boolean=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n        R.reviewer = function() {\n          var TargetResource = $injector.get(\"Reviewer\");\n          var action = TargetResource[\"::get::Review::reviewer\"];\n          return action.apply(R, arguments);\n        };\n\n\n        return R;\n      }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Issue\n * @header lbServices.Issue\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Issue` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\n  module.factory(\n    \"Issue\",\n    [\n      'LoopBackResource', 'LoopBackAuth', '$injector',\n      function(Resource, LoopBackAuth, $injector) {\n        var R = Resource(\n        urlBase + \"/Issues/:id\",\n          { 'id': '@id' },\n          {\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#create\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n            \"create\": {\n              url: urlBase + \"/Issues\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#createMany\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n            \"createMany\": {\n              isArray: true,\n              url: urlBase + \"/Issues\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#upsert\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n            \"upsert\": {\n              url: urlBase + \"/Issues\",\n              method: \"PUT\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#replaceOrCreate\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Replace an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n            \"replaceOrCreate\": {\n              url: urlBase + \"/Issues/replaceOrCreate\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#upsertWithWhere\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Update an existing model instance or insert a new one into the data source based on the where criteria.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n            \"upsertWithWhere\": {\n              url: urlBase + \"/Issues/upsertWithWhere\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#exists\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Check whether a model instance exists in the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `exists` – `{boolean=}` -\n             */\n            \"exists\": {\n              url: urlBase + \"/Issues/:id/exists\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#findById\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Find a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `filter` – `{object=}` - Filter defining fields and include\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n            \"findById\": {\n              url: urlBase + \"/Issues/:id\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#replaceById\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Replace attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n            \"replaceById\": {\n              url: urlBase + \"/Issues/:id/replace\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#find\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Find all instances of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n            \"find\": {\n              isArray: true,\n              url: urlBase + \"/Issues\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#findOne\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Find first instance of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n            \"findOne\": {\n              url: urlBase + \"/Issues/findOne\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#updateAll\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Update instances of the model matched by {{where}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * The number of instances updated\n             */\n            \"updateAll\": {\n              url: urlBase + \"/Issues/update\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#deleteById\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n            \"deleteById\": {\n              url: urlBase + \"/Issues/:id\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#count\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Count instances of the model matched by where from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n            \"count\": {\n              url: urlBase + \"/Issues/count\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#prototype$updateAttributes\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Patch attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n            \"prototype$updateAttributes\": {\n              url: urlBase + \"/Issues/:id\",\n              method: \"PUT\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#createChangeStream\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Create a change stream.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `changes` – `{ReadableStream=}` -\n             */\n            \"createChangeStream\": {\n              url: urlBase + \"/Issues/change-stream\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#resolve_issue\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Update resolved issue with the document..\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Return value\n             */\n            \"resolve_issue\": {\n              url: urlBase + \"/Issues/resolve_issue\",\n              method: \"POST\",\n            },\n          }\n        );\n\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#patchOrCreate\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n        R[\"patchOrCreate\"] = R[\"upsert\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#updateOrCreate\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#patchOrCreateWithWhere\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Update an existing model instance or insert a new one into the data source based on the where criteria.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n        R[\"patchOrCreateWithWhere\"] = R[\"upsertWithWhere\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#update\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Update instances of the model matched by {{where}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * The number of instances updated\n             */\n        R[\"update\"] = R[\"updateAll\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#destroyById\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#removeById\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Issue#patchAttributes\n             * @methodOf lbServices.Issue\n             *\n             * @description\n             *\n             * Patch attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Issue` object.)\n             * </em>\n             */\n        R[\"patchAttributes\"] = R[\"prototype$updateAttributes\"];\n\n\n        /**\n        * @ngdoc property\n        * @name lbServices.Issue#modelName\n        * @propertyOf lbServices.Issue\n        * @description\n        * The name of the model represented by this $resource,\n        * i.e. `Issue`.\n        */\n        R.modelName = \"Issue\";\n\n\n\n        return R;\n      }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Reviewer\n * @header lbServices.Reviewer\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Reviewer` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\n  module.factory(\n    \"Reviewer\",\n    [\n      'LoopBackResource', 'LoopBackAuth', '$injector',\n      function(Resource, LoopBackAuth, $injector) {\n        var R = Resource(\n        urlBase + \"/Reviewers/:id\",\n          { 'id': '@id' },\n          {\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#prototype$__findById__accessTokens\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Find a related item by id for accessTokens.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `fk` – `{*}` - Foreign key for accessTokens\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n            \"prototype$__findById__accessTokens\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Reviewers/:id/accessTokens/:fk\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#prototype$__destroyById__accessTokens\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Delete a related item by id for accessTokens.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `fk` – `{*}` - Foreign key for accessTokens\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"prototype$__destroyById__accessTokens\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Reviewers/:id/accessTokens/:fk\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#prototype$__updateById__accessTokens\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Update a related item by id for accessTokens.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `fk` – `{*}` - Foreign key for accessTokens\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n            \"prototype$__updateById__accessTokens\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Reviewers/:id/accessTokens/:fk\",\n              method: \"PUT\",\n            },\n\n            // INTERNAL. Use Reviewer.reviews.findById() instead.\n            \"prototype$__findById__reviews\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Reviewers/:id/reviews/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Reviewer.reviews.destroyById() instead.\n            \"prototype$__destroyById__reviews\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Reviewers/:id/reviews/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Reviewer.reviews.updateById() instead.\n            \"prototype$__updateById__reviews\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/Reviewers/:id/reviews/:fk\",\n              method: \"PUT\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#prototype$__get__accessTokens\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Queries accessTokens of Reviewer.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `filter` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n            \"prototype$__get__accessTokens\": {\n              isArray: true,\n              url: urlBase + \"/Reviewers/:id/accessTokens\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#prototype$__create__accessTokens\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Creates a new instance in accessTokens of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n            \"prototype$__create__accessTokens\": {\n              url: urlBase + \"/Reviewers/:id/accessTokens\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#prototype$__delete__accessTokens\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Deletes all accessTokens of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"prototype$__delete__accessTokens\": {\n              url: urlBase + \"/Reviewers/:id/accessTokens\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#prototype$__count__accessTokens\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Counts accessTokens of Reviewer.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n            \"prototype$__count__accessTokens\": {\n              url: urlBase + \"/Reviewers/:id/accessTokens/count\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Reviewer.reviews() instead.\n            \"prototype$__get__reviews\": {\n              isArray: true,\n              url: urlBase + \"/Reviewers/:id/reviews\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Reviewer.reviews.create() instead.\n            \"prototype$__create__reviews\": {\n              url: urlBase + \"/Reviewers/:id/reviews\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use Reviewer.reviews.destroyAll() instead.\n            \"prototype$__delete__reviews\": {\n              url: urlBase + \"/Reviewers/:id/reviews\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use Reviewer.reviews.count() instead.\n            \"prototype$__count__reviews\": {\n              url: urlBase + \"/Reviewers/:id/reviews/count\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#create\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n            \"create\": {\n              url: urlBase + \"/Reviewers\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#createMany\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n            \"createMany\": {\n              isArray: true,\n              url: urlBase + \"/Reviewers\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#upsert\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n            \"upsert\": {\n              url: urlBase + \"/Reviewers\",\n              method: \"PUT\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#replaceOrCreate\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Replace an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n            \"replaceOrCreate\": {\n              url: urlBase + \"/Reviewers/replaceOrCreate\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#upsertWithWhere\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Update an existing model instance or insert a new one into the data source based on the where criteria.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n            \"upsertWithWhere\": {\n              url: urlBase + \"/Reviewers/upsertWithWhere\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#exists\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Check whether a model instance exists in the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `exists` – `{boolean=}` -\n             */\n            \"exists\": {\n              url: urlBase + \"/Reviewers/:id/exists\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#findById\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Find a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `filter` – `{object=}` - Filter defining fields and include\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n            \"findById\": {\n              url: urlBase + \"/Reviewers/:id\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#replaceById\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Replace attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n            \"replaceById\": {\n              url: urlBase + \"/Reviewers/:id/replace\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#find\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Find all instances of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n            \"find\": {\n              isArray: true,\n              url: urlBase + \"/Reviewers\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#findOne\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Find first instance of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n            \"findOne\": {\n              url: urlBase + \"/Reviewers/findOne\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#updateAll\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Update instances of the model matched by {{where}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * The number of instances updated\n             */\n            \"updateAll\": {\n              url: urlBase + \"/Reviewers/update\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#deleteById\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n            \"deleteById\": {\n              url: urlBase + \"/Reviewers/:id\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#count\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Count instances of the model matched by where from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n            \"count\": {\n              url: urlBase + \"/Reviewers/count\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#prototype$updateAttributes\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Patch attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n            \"prototype$updateAttributes\": {\n              url: urlBase + \"/Reviewers/:id\",\n              method: \"PUT\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#createChangeStream\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Create a change stream.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `changes` – `{ReadableStream=}` -\n             */\n            \"createChangeStream\": {\n              url: urlBase + \"/Reviewers/change-stream\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#login\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Login a user with username/email and password.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.\n             *   Default value: `user`.\n             *\n             *  - `rememberMe` - `boolean` - Whether the authentication credentials\n             *     should be remembered in localStorage across app/browser restarts.\n             *     Default: `true`.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * The response body contains properties of the AccessToken created on login.\n             * Depending on the value of `include` parameter, the body may contain additional properties:\n             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)\n             *\n             */\n            \"login\": {\n              params: {\n                include: 'user',\n              },\n              interceptor: {\n                response: function(response) {\n                  var accessToken = response.data;\n                  LoopBackAuth.setUser(\n                    accessToken.id, accessToken.userId, accessToken.user);\n                  LoopBackAuth.rememberMe =\n                    response.config.params.rememberMe !== false;\n                  LoopBackAuth.save();\n                  return response.resource;\n                },\n              },\n              url: urlBase + \"/Reviewers/login\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#logout\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Logout a user with access token.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"logout\": {\n              interceptor: {\n                response: function(response) {\n                  LoopBackAuth.clearUser();\n                  LoopBackAuth.clearStorage();\n                  return response.resource;\n                },\n                responseError: function(responseError) {\n                  LoopBackAuth.clearUser();\n                  LoopBackAuth.clearStorage();\n                  return responseError.resource;\n                },\n              },\n              url: urlBase + \"/Reviewers/logout\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#confirm\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Confirm a user registration with email verification token.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `uid` – `{string}` -\n             *\n             *  - `token` – `{string}` -\n             *\n             *  - `redirect` – `{string=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"confirm\": {\n              url: urlBase + \"/Reviewers/confirm\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#resetPassword\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Reset password for a user with email.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n            \"resetPassword\": {\n              url: urlBase + \"/Reviewers/reset\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviewers.findById() instead.\n            \"::findById::CoffeeShop::reviewers\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/CoffeeShops/:id/reviewers/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviewers.destroyById() instead.\n            \"::destroyById::CoffeeShop::reviewers\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/CoffeeShops/:id/reviewers/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviewers.updateById() instead.\n            \"::updateById::CoffeeShop::reviewers\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/CoffeeShops/:id/reviewers/:fk\",\n              method: \"PUT\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviewers() instead.\n            \"::get::CoffeeShop::reviewers\": {\n              isArray: true,\n              url: urlBase + \"/CoffeeShops/:id/reviewers\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviewers.create() instead.\n            \"::create::CoffeeShop::reviewers\": {\n              url: urlBase + \"/CoffeeShops/:id/reviewers\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviewers.createMany() instead.\n            \"::createMany::CoffeeShop::reviewers\": {\n              isArray: true,\n              url: urlBase + \"/CoffeeShops/:id/reviewers\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviewers.destroyAll() instead.\n            \"::delete::CoffeeShop::reviewers\": {\n              url: urlBase + \"/CoffeeShops/:id/reviewers\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use CoffeeShop.reviewers.count() instead.\n            \"::count::CoffeeShop::reviewers\": {\n              url: urlBase + \"/CoffeeShops/:id/reviewers/count\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use Review.reviewer() instead.\n            \"::get::Review::reviewer\": {\n              url: urlBase + \"/Reviews/:id/reviewer\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#getCurrent\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Get data of the currently logged user. Fail with HTTP result 401\n             * when there is no user logged in.\n             *\n             * @param {function(Object,Object)=} successCb\n             *    Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *    `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             */\n            'getCurrent': {\n              url: urlBase + \"/Reviewers\" + '/:id',\n              method: 'GET',\n              params: {\n                id: function() {\n                  var id = LoopBackAuth.currentUserId;\n                  if (id == null) id = '__anonymous__';\n                  return id;\n                },\n              },\n              interceptor: {\n                response: function(response) {\n                  LoopBackAuth.currentUserData = response.data;\n                  return response.resource;\n                },\n              },\n              __isGetCurrentUser__: true,\n            },\n          }\n        );\n\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#patchOrCreate\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n        R[\"patchOrCreate\"] = R[\"upsert\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#updateOrCreate\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#patchOrCreateWithWhere\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Update an existing model instance or insert a new one into the data source based on the where criteria.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n        R[\"patchOrCreateWithWhere\"] = R[\"upsertWithWhere\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#update\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Update instances of the model matched by {{where}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * The number of instances updated\n             */\n        R[\"update\"] = R[\"updateAll\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#destroyById\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#removeById\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#patchAttributes\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Patch attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Reviewer` object.)\n             * </em>\n             */\n        R[\"patchAttributes\"] = R[\"prototype$updateAttributes\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Reviewer#getCachedCurrent\n         * @methodOf lbServices.Reviewer\n         *\n         * @description\n         *\n         * Get data of the currently logged user that was returned by the last\n         * call to {@link lbServices.Reviewer#login} or\n         * {@link lbServices.Reviewer#getCurrent}. Return null when there\n         * is no user logged in or the data of the current user were not fetched\n         * yet.\n         *\n         * @returns {Object} A Reviewer instance.\n         */\n        R.getCachedCurrent = function() {\n          var data = LoopBackAuth.currentUserData;\n          return data ? new R(data) : null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Reviewer#isAuthenticated\n         * @methodOf lbServices.Reviewer\n         *\n         * @returns {boolean} True if the current user is authenticated (logged in).\n         */\n        R.isAuthenticated = function() {\n          return this.getCurrentId() != null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Reviewer#getCurrentId\n         * @methodOf lbServices.Reviewer\n         *\n         * @returns {Object} Id of the currently logged-in user or null.\n         */\n        R.getCurrentId = function() {\n          return LoopBackAuth.currentUserId;\n        };\n\n        /**\n        * @ngdoc property\n        * @name lbServices.Reviewer#modelName\n        * @propertyOf lbServices.Reviewer\n        * @description\n        * The name of the model represented by this $resource,\n        * i.e. `Reviewer`.\n        */\n        R.modelName = \"Reviewer\";\n\n    /**\n     * @ngdoc object\n     * @name lbServices.Reviewer.reviews\n     * @header lbServices.Reviewer.reviews\n     * @object\n     * @description\n     *\n     * The object `Reviewer.reviews` groups methods\n     * manipulating `Review` instances related to `Reviewer`.\n     *\n     * Call {@link lbServices.Reviewer#reviews Reviewer.reviews()}\n     * to query all related instances.\n     */\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer#reviews\n             * @methodOf lbServices.Reviewer\n             *\n             * @description\n             *\n             * Queries reviews of Reviewer.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `filter` – `{object=}` -\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n        R.reviews = function() {\n          var TargetResource = $injector.get(\"Review\");\n          var action = TargetResource[\"::get::Reviewer::reviews\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer.reviews#count\n             * @methodOf lbServices.Reviewer.reviews\n             *\n             * @description\n             *\n             * Counts reviews of Reviewer.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n        R.reviews.count = function() {\n          var TargetResource = $injector.get(\"Review\");\n          var action = TargetResource[\"::count::Reviewer::reviews\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer.reviews#create\n             * @methodOf lbServices.Reviewer.reviews\n             *\n             * @description\n             *\n             * Creates a new instance in reviews of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n        R.reviews.create = function() {\n          var TargetResource = $injector.get(\"Review\");\n          var action = TargetResource[\"::create::Reviewer::reviews\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer.reviews#createMany\n             * @methodOf lbServices.Reviewer.reviews\n             *\n             * @description\n             *\n             * Creates a new instance in reviews of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n        R.reviews.createMany = function() {\n          var TargetResource = $injector.get(\"Review\");\n          var action = TargetResource[\"::createMany::Reviewer::reviews\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer.reviews#destroyAll\n             * @methodOf lbServices.Reviewer.reviews\n             *\n             * @description\n             *\n             * Deletes all reviews of this model.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.reviews.destroyAll = function() {\n          var TargetResource = $injector.get(\"Review\");\n          var action = TargetResource[\"::delete::Reviewer::reviews\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer.reviews#destroyById\n             * @methodOf lbServices.Reviewer.reviews\n             *\n             * @description\n             *\n             * Delete a related item by id for reviews.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `fk` – `{*}` - Foreign key for reviews\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * This method returns no data.\n             */\n        R.reviews.destroyById = function() {\n          var TargetResource = $injector.get(\"Review\");\n          var action = TargetResource[\"::destroyById::Reviewer::reviews\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer.reviews#findById\n             * @methodOf lbServices.Reviewer.reviews\n             *\n             * @description\n             *\n             * Find a related item by id for reviews.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `fk` – `{*}` - Foreign key for reviews\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n        R.reviews.findById = function() {\n          var TargetResource = $injector.get(\"Review\");\n          var action = TargetResource[\"::findById::Reviewer::reviews\"];\n          return action.apply(R, arguments);\n        };\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Reviewer.reviews#updateById\n             * @methodOf lbServices.Reviewer.reviews\n             *\n             * @description\n             *\n             * Update a related item by id for reviews.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - User id\n             *\n             *  - `fk` – `{*}` - Foreign key for reviews\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Review` object.)\n             * </em>\n             */\n        R.reviews.updateById = function() {\n          var TargetResource = $injector.get(\"Review\");\n          var action = TargetResource[\"::updateById::Reviewer::reviews\"];\n          return action.apply(R, arguments);\n        };\n\n\n        return R;\n      }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Basemap\n * @header lbServices.Basemap\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Basemap` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\n  module.factory(\n    \"Basemap\",\n    [\n      'LoopBackResource', 'LoopBackAuth', '$injector',\n      function(Resource, LoopBackAuth, $injector) {\n        var R = Resource(\n        urlBase + \"/Basemaps/:id\",\n          { 'id': '@id' },\n          {\n\n            // INTERNAL. Use Basemap.user() instead.\n            \"prototype$__get__user\": {\n              url: urlBase + \"/Basemaps/:id/user\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#create\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n            \"create\": {\n              url: urlBase + \"/Basemaps\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#createMany\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Create a new instance of the model and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n            \"createMany\": {\n              isArray: true,\n              url: urlBase + \"/Basemaps\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#upsert\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n            \"upsert\": {\n              url: urlBase + \"/Basemaps\",\n              method: \"PUT\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#replaceOrCreate\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Replace an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n            \"replaceOrCreate\": {\n              url: urlBase + \"/Basemaps/replaceOrCreate\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#upsertWithWhere\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Update an existing model instance or insert a new one into the data source based on the where criteria.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n            \"upsertWithWhere\": {\n              url: urlBase + \"/Basemaps/upsertWithWhere\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#exists\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Check whether a model instance exists in the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `exists` – `{boolean=}` -\n             */\n            \"exists\": {\n              url: urlBase + \"/Basemaps/:id/exists\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#findById\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Find a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             *  - `filter` – `{object=}` - Filter defining fields and include\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n            \"findById\": {\n              url: urlBase + \"/Basemaps/:id\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#replaceById\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Replace attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n            \"replaceById\": {\n              url: urlBase + \"/Basemaps/:id/replace\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#find\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Find all instances of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n             *\n             * @param {function(Array.<Object>,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Array.<Object>} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n            \"find\": {\n              isArray: true,\n              url: urlBase + \"/Basemaps\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#findOne\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Find first instance of the model matched by filter from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n            \"findOne\": {\n              url: urlBase + \"/Basemaps/findOne\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#updateAll\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Update instances of the model matched by {{where}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * The number of instances updated\n             */\n            \"updateAll\": {\n              url: urlBase + \"/Basemaps/update\",\n              method: \"POST\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#deleteById\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n            \"deleteById\": {\n              url: urlBase + \"/Basemaps/:id\",\n              method: \"DELETE\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#count\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Count instances of the model matched by where from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `count` – `{number=}` -\n             */\n            \"count\": {\n              url: urlBase + \"/Basemaps/count\",\n              method: \"GET\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#prototype$updateAttributes\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Patch attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n            \"prototype$updateAttributes\": {\n              url: urlBase + \"/Basemaps/:id\",\n              method: \"PUT\",\n            },\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#createChangeStream\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Create a change stream.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             *  - `options` – `{object=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * Data properties:\n             *\n             *  - `changes` – `{ReadableStream=}` -\n             */\n            \"createChangeStream\": {\n              url: urlBase + \"/Basemaps/change-stream\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use User.basemaps.findById() instead.\n            \"::findById::User::basemaps\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/basemaps/:fk\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use User.basemaps.destroyById() instead.\n            \"::destroyById::User::basemaps\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/basemaps/:fk\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use User.basemaps.updateById() instead.\n            \"::updateById::User::basemaps\": {\n              params: {\n                'fk': '@fk',\n              },\n              url: urlBase + \"/users/:id/basemaps/:fk\",\n              method: \"PUT\",\n            },\n\n            // INTERNAL. Use User.basemaps() instead.\n            \"::get::User::basemaps\": {\n              isArray: true,\n              url: urlBase + \"/users/:id/basemaps\",\n              method: \"GET\",\n            },\n\n            // INTERNAL. Use User.basemaps.create() instead.\n            \"::create::User::basemaps\": {\n              url: urlBase + \"/users/:id/basemaps\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use User.basemaps.createMany() instead.\n            \"::createMany::User::basemaps\": {\n              isArray: true,\n              url: urlBase + \"/users/:id/basemaps\",\n              method: \"POST\",\n            },\n\n            // INTERNAL. Use User.basemaps.destroyAll() instead.\n            \"::delete::User::basemaps\": {\n              url: urlBase + \"/users/:id/basemaps\",\n              method: \"DELETE\",\n            },\n\n            // INTERNAL. Use User.basemaps.count() instead.\n            \"::count::User::basemaps\": {\n              url: urlBase + \"/users/:id/basemaps/count\",\n              method: \"GET\",\n            },\n          }\n        );\n\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#patchOrCreate\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n        R[\"patchOrCreate\"] = R[\"upsert\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#updateOrCreate\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Patch an existing model instance or insert a new one into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *   This method does not accept any parameters.\n             *   Supply an empty object or omit this argument altogether.\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#patchOrCreateWithWhere\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Update an existing model instance or insert a new one into the data source based on the where criteria.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n        R[\"patchOrCreateWithWhere\"] = R[\"upsertWithWhere\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#update\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Update instances of the model matched by {{where}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `where` – `{object=}` - Criteria to match model instances\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * The number of instances updated\n             */\n        R[\"update\"] = R[\"updateAll\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#destroyById\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#removeById\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Delete a model instance by {{id}} from the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - Model id\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#patchAttributes\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Patch attributes for a model instance and persist it into the data source.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             * @param {Object} postData Request data.\n             *\n             * This method expects a subset of model properties as request parameters.\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `Basemap` object.)\n             * </em>\n             */\n        R[\"patchAttributes\"] = R[\"prototype$updateAttributes\"];\n\n\n        /**\n        * @ngdoc property\n        * @name lbServices.Basemap#modelName\n        * @propertyOf lbServices.Basemap\n        * @description\n        * The name of the model represented by this $resource,\n        * i.e. `Basemap`.\n        */\n        R.modelName = \"Basemap\";\n\n\n            /**\n             * @ngdoc method\n             * @name lbServices.Basemap#user\n             * @methodOf lbServices.Basemap\n             *\n             * @description\n             *\n             * Fetches belongsTo relation user.\n             *\n             * @param {Object=} parameters Request parameters.\n             *\n             *  - `id` – `{*}` - PersistedModel id\n             *\n             *  - `refresh` – `{boolean=}` -\n             *\n             * @param {function(Object,Object)=} successCb\n             *   Success callback with two arguments: `value`, `responseHeaders`.\n             *\n             * @param {function(Object)=} errorCb Error callback with one argument:\n             *   `httpResponse`.\n             *\n             * @returns {Object} An empty reference that will be\n             *   populated with the actual data once the response is returned\n             *   from the server.\n             *\n             * <em>\n             * (The remote method definition does not provide any description.\n             * This usually means the response is a `User` object.)\n             * </em>\n             */\n        R.user = function() {\n          var TargetResource = $injector.get(\"User\");\n          var action = TargetResource[\"::get::Basemap::user\"];\n          return action.apply(R, arguments);\n        };\n\n\n        return R;\n      }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Email\n * @header lbServices.Email\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Email` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\n  module.factory(\n    \"Email\",\n    [\n      'LoopBackResource', 'LoopBackAuth', '$injector',\n      function(Resource, LoopBackAuth, $injector) {\n        var R = Resource(\n        urlBase + \"/Emails/:id\",\n          { 'id': '@id' },\n          {\n          }\n        );\n\n\n\n\n        /**\n        * @ngdoc property\n        * @name lbServices.Email#modelName\n        * @propertyOf lbServices.Email\n        * @description\n        * The name of the model represented by this $resource,\n        * i.e. `Email`.\n        */\n        R.modelName = \"Email\";\n\n\n\n        return R;\n      }]);\n\n\n  module\n  .factory('LoopBackAuth', function() {\n    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];\n    var propsPrefix = '$LoopBack$';\n\n    function LoopBackAuth() {\n      var self = this;\n      props.forEach(function(name) {\n        self[name] = load(name);\n      });\n      this.currentUserData = null;\n    }\n\n    LoopBackAuth.prototype.save = function() {\n      var self = this;\n      var storage = this.rememberMe ? localStorage : sessionStorage;\n      props.forEach(function(name) {\n        save(storage, name, self[name]);\n      });\n    };\n\n    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {\n      this.accessTokenId = accessTokenId;\n      this.currentUserId = userId;\n      this.currentUserData = userData;\n    };\n\n    LoopBackAuth.prototype.clearUser = function() {\n      this.accessTokenId = null;\n      this.currentUserId = null;\n      this.currentUserData = null;\n    };\n\n    LoopBackAuth.prototype.clearStorage = function() {\n      props.forEach(function(name) {\n        save(sessionStorage, name, null);\n        save(localStorage, name, null);\n      });\n    };\n\n    return new LoopBackAuth();\n\n    // Note: LocalStorage converts the value to string\n    // We are using empty string as a marker for null/undefined values.\n    function save(storage, name, value) {\n      try {\n        var key = propsPrefix + name;\n        if (value == null) value = '';\n        storage[key] = value;\n      } catch (err) {\n        console.log('Cannot access local/session storage:', err);\n      }\n    }\n\n    function load(name) {\n      var key = propsPrefix + name;\n      return localStorage[key] || sessionStorage[key] || null;\n    }\n  })\n  .config(['$httpProvider', function($httpProvider) {\n    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');\n  }])\n  .factory('LoopBackAuthRequestInterceptor', ['$q', 'LoopBackAuth',\n    function($q, LoopBackAuth) {\n      return {\n        'request': function(config) {\n          // filter out external requests\n          var host = getHost(config.url);\n          if (host && host !== urlBaseHost) {\n            return config;\n          }\n\n          if (LoopBackAuth.accessTokenId) {\n            config.headers[authHeader] = LoopBackAuth.accessTokenId;\n          } else if (config.__isGetCurrentUser__) {\n            // Return a stub 401 error for User.getCurrent() when\n            // there is no user logged in\n            var res = {\n              body: { error: { status: 401 }},\n              status: 401,\n              config: config,\n              headers: function() { return undefined; },\n            };\n            return $q.reject(res);\n          }\n          return config || $q.when(config);\n        },\n      };\n    }])\n\n  /**\n   * @ngdoc object\n   * @name lbServices.LoopBackResourceProvider\n   * @header lbServices.LoopBackResourceProvider\n   * @description\n   * Use `LoopBackResourceProvider` to change the global configuration\n   * settings used by all models. Note that the provider is available\n   * to Configuration Blocks only, see\n   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}\n   * for more details.\n   *\n   * ## Example\n   *\n   * ```js\n   * angular.module('app')\n   *  .config(function(LoopBackResourceProvider) {\n   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');\n   *  });\n   * ```\n   */\n  .provider('LoopBackResource', function LoopBackResourceProvider() {\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#setAuthHeader\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @param {string} header The header name to use, e.g. `X-Access-Token`\n     * @description\n     * Configure the REST transport to use a different header for sending\n     * the authentication token. It is sent in the `Authorization` header\n     * by default.\n     */\n    this.setAuthHeader = function(header) {\n      authHeader = header;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#getAuthHeader\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @description\n     * Get the header name that is used for sending the authentication token.\n     */\n    this.getAuthHeader = function() {\n      return authHeader;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#setUrlBase\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.\n     * @description\n     * Change the URL of the REST API server. By default, the URL provided\n     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n     */\n    this.setUrlBase = function(url) {\n      urlBase = url;\n      urlBaseHost = getHost(urlBase) || location.host;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#getUrlBase\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @description\n     * Get the URL of the REST API server. The URL provided\n     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n     */\n    this.getUrlBase = function() {\n      return urlBase;\n    };\n\n    this.$get = ['$resource', function($resource) {\n      var LoopBackResource = function(url, params, actions) {\n        var resource = $resource(url, params, actions);\n\n        // Angular always calls POST on $save()\n        // This hack is based on\n        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/\n        resource.prototype.$save = function(success, error) {\n          // Fortunately, LoopBack provides a convenient `upsert` method\n          // that exactly fits our needs.\n          var result = resource.upsert.call(this, {}, this, success, error);\n          return result.$promise || result;\n        };\n        return resource;\n      };\n\n      LoopBackResource.getUrlBase = function() {\n        return urlBase;\n      };\n\n      LoopBackResource.getAuthHeader = function() {\n        return authHeader;\n      };\n\n      return LoopBackResource;\n    }];\n  });\n})(window, window.angular);\n"]}