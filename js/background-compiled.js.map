{"version":3,"sources":["background.js"],"names":[],"mappings":";;AAAA,IAAI,iBAAJ;AACA,IAAI,eAAJ;AACA,IAAI,iBAAJ;AACA,IAAI,cAAJ;AACA,IAAM,YAAY,SAAS,sBAAT,CAAgC,sBAAhC,EAAwD,CAAxD,CAAlB;AACA,IAAI,IAAI,UAAU,WAAlB;AACA,IAAI,IAAI,UAAU,YAAlB;AACA,IAAI,SAAS,EAAb;AACA,IAAI,WAAW;AACb,cAAY;AACV,WAAO,IAAI,MAAM,OAAV,CAAkB,CAAlB,EAAqB,CAArB;AADG,GADC;AAIb,WAAS;AACP,WAAO,IAAI,MAAM,OAAV,CAAkB,GAAlB,EAAuB,GAAvB;AADA;AAJI,CAAf;AAQA,SAAS,IAAT,GAAgB;AACd,aAAW,IAAI,MAAM,aAAV,CAAwB,EAAC,WAAW,IAAZ,EAAxB,CAAX;AACA,WAAS,OAAT,CAAiB,CAAjB,EAAoB,CAApB;AACA,WAAS,aAAT,CAAuB,QAAvB;AACA,WAAS,aAAT,CAAuB,OAAO,gBAA9B;AACA,YAAU,WAAV,CAAsB,SAAS,UAA/B;;AAEA,UAAQ,IAAI,MAAM,KAAV,EAAR;AACA,WAAS,IAAI,MAAM,iBAAV,CAA4B,EAA5B,EAAgC,IAAI,CAApC,EAAuC,CAAvC,EAA0C,IAA1C,CAAT;AACA,SAAO,QAAP,CAAgB,GAAhB,CAAoB,GAApB,EAAyB,CAAzB,EAA4B,CAA5B;AACA,SAAO,MAAP,CAAc,MAAM,QAApB;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,YAAY,IAAI,MAAM,eAAV,CAA0B,QAA1B,EAAoC,QAApC,EAA8C,CAA9C,CAAlB;AACA,QAAM,GAAN,CAAU,SAAV;AACA,QAAM,GAAN,CAAU,MAAV;AACA,QAAM,GAAN,CAAU,YAAV;AACA,gBAAc,IAAd,CAAmB,MAAnB;AACA;AACA;AACD;;AAED,SAAS,UAAT,CAAoB,KAApB,EAA2B;AACzB,MAAM,MAAM,IAAI,MAAM,mBAAV,CAA8B,IAA9B,EAAoC,IAApC,CAAZ;AACA,MAAM,WAAW,IAAI,MAAM,cAAV,CAAyB;AACxC,sBADwC;AAExC,oBAAgB;AAFwB,GAAzB,CAAjB;AAIA,MAAM,OAAO,IAAI,MAAM,IAAV,CAAe,GAAf,EAAoB,QAApB,CAAb;AACA;AACA,OAAK,QAAL,CAAc,GAAd,CAAkB,CAAC,GAAnB,EAAwB,CAAxB,EAA2B,CAA3B;AACA,OAAK,QAAL,CAAc,GAAd,CAAkB,CAAlB,EAAqB,KAAK,EAAL,GAAU,CAA/B,EAAkC,CAAlC;AACA,OAAK,KAAL,CAAW,GAAX,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAAC,CAAtB;AACA,SAAO,IAAP;AACD;;AAED,SAAS,WAAT,GAAuB;AACrB,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,QAAM,MAAM,IAAI,MAAM,mBAAV,CAA8B,EAA9B,EAAkC,CAAlC,CAAZ;AACA;AACA,QAAM,YAAY,IAAI,MAAM,iBAAV,CAA4B,EAAC,OAAO,QAAR,EAAkB,SAAS,MAAM,WAAjC,EAA5B,CAAlB;AACA,aAAS,IAAI,MAAM,IAAV,CAAe,GAAf,EAAoB,SAApB,CAAT;AACA,QAAI,kBAAJ,GAAyB,IAAzB;AACA,QAAI,QAAJ,CAAa,OAAb,CAAqB,gBAAQ;AAC3B,UAAI,kBAAkB,KAAK,KAAL,CAAW,KAAK,MAAL,KAAgB,GAA3B,IAAkC,CAAxD;AACA,UAAI,YAAY,KAAK,KAAL,CAAW,KAAK,MAAL,KAAgB,CAA3B,KAAiC,CAAjC,GAAqC,CAArC,GAAyC,CAAC,CAA1D;AACA,yBAAmB,SAAnB;AACA,WAAK,CAAL,IAAU,eAAV;AACD,KALD;AAMA,QAAI,kBAAJ,GAAyB,IAAzB;AACA,WAAO,QAAP,CAAgB,GAAhB,CAAoB,CAApB,EAAuB,CAAC,EAAxB,EAA4B,CAA5B;AACA,WAAO,KAAP,CAAa,GAAb,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;AACA,UAAM,GAAN,CAAU,MAAV;AACA;AACD,GAjBM,CAAP;AAkBD;;AAGD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS,gBAAT,GAA4B;AAC1B;AAyBD;;AAED,SAAS,MAAT,GAAkB;AAChB,SAAO,qBAAP,CAA6B,MAA7B;AACA,WAAS,MAAT,CAAgB,KAAhB,EAAuB,MAAvB;AACA;AACA,SAAO,QAAP,CAAgB,CAAhB,IAAqB,KAArB;AAED;;AAED;;AAEA,OAAO,gBAAP,CAAwB,QAAxB,EAAkC,YAAY;AAC5C,MAAI,UAAU,WAAd;AACA,MAAI,UAAU,YAAd;;AAEA,WAAS,UAAT,CAAoB,KAApB,CAA0B,CAA1B,GAA8B,CAA9B;AACA,WAAS,UAAT,CAAoB,KAApB,CAA0B,CAA1B,GAA8B,CAA9B;;AAEA,WAAS,OAAT,CAAiB,CAAjB,EAAoB,CAApB;AACA,SAAO,MAAP,GAAgB,IAAI,CAApB;AACA,SAAO,sBAAP;AACD,CAVD,EAUG,KAVH","file":"background-compiled.js","sourcesContent":["let renderer;\nlet camera;\nlet controls;\nlet scene;\nconst container = document.getElementsByClassName('background_container')[0];\nlet w = container.offsetWidth;\nlet h = container.offsetHeight;\nlet ground = {};\nlet uniforms = {\n  resolution: {\n    value: new THREE.Vector2(w, h)\n  },\n  uvScale: {\n    value: new THREE.Vector2(1.0, 1.0)\n  }\n};\nfunction init() {\n  renderer = new THREE.WebGLRenderer({antialias: true});\n  renderer.setSize(w, h);\n  renderer.setClearColor(0xEFEFEF);\n  renderer.setPixelRatio(window.devicePixelRatio)\n  container.appendChild(renderer.domElement);\n\n  scene = new THREE.Scene();\n  camera = new THREE.PerspectiveCamera(45, w / h, 1, 1000);\n  camera.position.set(100, 0, 0);\n  camera.lookAt(scene.position);\n  // controls = new THREE.OrbitControls( camera, renderer.domElement );\n  // //controls.addEventListener( 'change', render ); // add this only if there is no animation loop (requestAnimationFrame)\n  // controls.enableDamping = true;\n  // controls.dampingFactor = 0.2;\n  // controls.rotateSpeed = 0.3;\n  const hemilight = new THREE.HemisphereLight(0xFFFFFF, 0x444444, 1);\n  scene.add(hemilight);\n  scene.add(camera);\n  scene.add(background());\n  buildGround().then(render);\n  // render();\n  // console.log(ground);\n}\n\nfunction background(scene) {\n  const geo = new THREE.PlaneBufferGeometry(1000, 1000);\n  const material = new THREE.ShaderMaterial({\n    uniforms,\n    fragmentShader: backgroundShader()\n  });\n  const mesh = new THREE.Mesh(geo, material);\n  // const mesh = new THREE.Mesh(geo, new THREE.MeshNormalMaterial());\n  mesh.position.set(-100, 0, 0);\n  mesh.rotation.set(0, Math.PI / 2, 0);\n  mesh.scale.set(1, 1, -1);\n  return mesh;\n}\n\nfunction buildGround() {\n  return new Promise((resolve, reject) => {\n    const geo = new THREE.IcosahedronGeometry(40, 3);\n    //const normalMat = new THREE.MeshPhongMaterial({color: 0xFF00FF, shading: THREE.FlatShading});\n    const normalMat = new THREE.MeshPhongMaterial({color: 0xc1994a, shading: THREE.FlatShading});\n    ground = new THREE.Mesh(geo, normalMat);\n    geo.verticesNeedUpdate = true;\n    geo.vertices.forEach(vert => {\n      let randomTranslate = Math.floor(Math.random() * 7.5) + 1;\n      let plusMinus = Math.floor(Math.random() * 2) == 1 ? 1 : -1;\n      randomTranslate *= plusMinus;\n      vert.y += randomTranslate\n    });\n    geo.verticesNeedUpdate = true;\n    ground.position.set(0, -65, 0);\n    ground.scale.set(1, 1, 4);\n    scene.add(ground);\n    resolve();\n  })\n}\n\n\n// function backgroundShader() {\n// \treturn `\n// \t\tuniform vec2 resolution;\n\n// \t\tfloat plot(vec2 st, float pct) {\n// \t\t\treturn smoothstep( pct - 0.02, pct, st.y ) - smoothstep( pct, pct + 0.02, st.y );\n// \t\t}\n// \t\tvoid main() {\n// \t\t\tvec2 st = gl_FragCoord.xy/resolution;\n\n// \t\t\tfloat y = smoothstep(0.1, 0.9, st.x);\n\n// \t\t\tvec3 color = vec3(y);\n\n// \t\t\tfloat pct = plot(st, y);\n// \t\t\tcolor = (1.0 - pct) * color + pct * vec3(0.0, 1.0, 0.0);\n\n// \t\t\tgl_FragColor = vec4(color, 1.0);\n// \t\t\t// gl_FragColor = vec4(1.0, 0, 1.0, 1.0);\n// \t\t}\n// \t`\n// }\nfunction backgroundShader() {\n  return `\n\t\t// #ifdef GL_ES\n\t\t// precision mediump float;\n\t\t// #endif\n\t\tuniform vec2 resolution;\n\n\t\tfloat square(float s) { return s * s; }\n\n\t\tvec3 desertGradient(float t) {\n\t\t\tfloat s = sqrt(clamp(1.0 - (t - 0.4) / 0.6, 0.0, 1.0));\n\t\t\t// vec3 sky = sqrt(mix(vec3(1, 1, 1), vec3(0, 0.8, 1.0), smoothstep(0.4, 0.9, t)) * vec3(s, s, 1.0));\n\t\t\tvec3 sky = sqrt(mix(vec3(1, 1, 1), vec3(0, 0.8, 1.0), smoothstep(0.4, 0.9, t)) * vec3(s, s, 1.0));\n\t\t\tvec3 land = mix(vec3(0.7, 0.3, 0.0), vec3(0.85, 0.75 + max(0.8 - t * 20.0, 0.0), 0.5), square(t / 0.4));\n\t\t\treturn clamp((t > 0.4) ? sky : land, 0.0, 1.0) * clamp(1.5 * (1.0 - abs(t - 0.4)), 0.0, 1.0);\n\t\t}\n\n\t\tvoid main() {\n\t\t\tvec2 st = gl_FragCoord.xy / resolution.xy;\n\t\t\t// float t = gl_FragCoord.y / resolution.x;\n\t\t\t\n\t\t\t// gl_FragColor = vec4(st.y, st.y, st.y, 1.0);\n\t\t\tgl_FragColor = vec4(0.4, 0.4, st.y, 1.0);\n\t\t\t// gl_FragColor = vec4(desertGradient(t), 1.0);\n\t\t}\n\t`\n}\n\nfunction render() {\n  window.requestAnimationFrame(render);\n  renderer.render(scene, camera);\n  // controls.update();\n  ground.rotation.z -= 0.001;\n\n}\n\ninit();\n\nwindow.addEventListener('resize', function () {\n  w = container.offsetWidth;\n  h = container.offsetHeight;\n\n  uniforms.resolution.value.x = w;\n  uniforms.resolution.value.y = h;\n\n  renderer.setSize(w, h);\n  camera.aspect = w / h;\n  camera.updateProjectionMatrix();\n}, false);"]}