{"version":3,"sources":["panel.js"],"names":[],"mappings":"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","file":"panel-compiled.js","sourcesContent":["/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v1.1.1-master-f7ecb4f\n */\n(function( window, angular, undefined ){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.panel\n */\nMdPanelService['$inject'] = [\"$rootElement\", \"$rootScope\", \"$injector\", \"$window\"];\nangular\n  .module('material.components.panel', [\n    'material.core',\n    'material.components.backdrop'\n  ])\n  .service('$mdPanel', MdPanelService);\n\n\n/*****************************************************************************\n *                            PUBLIC DOCUMENTATION                           *\n *****************************************************************************/\n\n\n/**\n * @ngdoc service\n * @name $mdPanel\n * @module material.components.panel\n *\n * @description\n * `$mdPanel` is a robust, low-level service for creating floating panels on\n * the screen. It can be used to implement tooltips, dialogs, pop-ups, etc.\n *\n * @usage\n * <hljs lang=\"js\">\n * (function(angular, undefined) {\n *   'use strict';\n *\n *   angular\n *       .module('demoApp', ['ngMaterial'])\n *       .controller('DemoDialogController', DialogController);\n *\n *   var panelRef;\n *\n *   function showPanel($event) {\n *     var panelPosition = $mdPanel.newPanelPosition()\n *         .absolute()\n *         .top('50%')\n *         .left('50%');\n *\n *     var panelAnimation = $mdPanel.newPanelAnimation()\n *         .targetEvent($event)\n *         .defaultAnimation('md-panel-animate-fly')\n *         .closeTo('.show-button');\n *\n *     var config = {\n *       attachTo: angular.element(document.body),\n *       controller: DialogController,\n *       controllerAs: 'ctrl',\n *       position: panelPosition,\n *       animation: panelAnimation,\n *       targetEvent: $event,\n *       templateUrl: 'dialog-template.html',\n *       clickOutsideToClose: true,\n *       escapeToClose: true,\n *       focusOnOpen: true\n *     }\n *\n *     $mdPanel.open(config)\n *         .then(function(result) {\n *           panelRef = result;\n *         });\n *   }\n *\n *   function DialogController(MdPanelRef) {\n *     function closeDialog() {\n *       if (MdPanelRef) MdPanelRef.close();\n *     }\n *   }\n * })(angular);\n * </hljs>\n */\n\n/**\n * @ngdoc method\n * @name $mdPanel#create\n * @description\n * Creates a panel with the specified options.\n *\n * @param config {!Object=} Specific configuration object that may contain the\n *     following properties:\n *\n *   - `id` - `{string=}`: An ID to track the panel by. When an ID is provided,\n *     the created panel is added to a tracked panels object. Any subsequent\n *     requests made to create a panel with that ID are ignored. This is useful\n *     in having the panel service not open multiple panels from the same user\n *     interaction when there is no backdrop and events are propagated. Defaults\n *     to an arbitrary string that is not tracked.\n *   - `template` - `{string=}`: HTML template to show in the panel. This\n *     **must** be trusted HTML with respect to Angular’s\n *     [$sce service](https://docs.angularjs.org/api/ng/service/$sce).\n *   - `templateUrl` - `{string=}`: The URL that will be used as the content of\n *     the panel.\n *   - `contentElement` - `{(string|!angular.JQLite|!Element)=}`: Pre-compiled\n *     element to be used as the panel's content.\n *   - `controller` - `{(function|string)=}`: The controller to associate with\n *     the panel. The controller can inject a reference to the returned\n *     panelRef, which allows the panel to be closed, hidden, and shown. Any\n *     fields passed in through locals or resolve will be bound to the\n *     controller.\n *   - `controllerAs` - `{string=}`: An alias to assign the controller to on\n *     the scope.\n *   - `bindToController` - `{boolean=}`: Binds locals to the controller\n *     instead of passing them in. Defaults to true, as this is a best\n *     practice.\n *   - `locals` - `{Object=}`: An object containing key/value pairs. The keys\n *     will be used as names of values to inject into the controller. For\n *     example, `locals: {three: 3}` would inject `three` into the controller,\n *     with the value 3.\n *   - `resolve` - `{Object=}`: Similar to locals, except it takes promises as\n *     values. The panel will not open until all of the promises resolve.\n *   - `attachTo` - `{(string|!angular.JQLite|!Element)=}`: The element to\n *     attach the panel to. Defaults to appending to the root element of the\n *     application.\n *   - `propagateContainerEvents` - `{boolean=}`: Whether pointer or touch\n *     events should be allowed to propagate 'go through' the container, aka the\n *     wrapper, of the panel. Defaults to false.\n *   - `panelClass` - `{string=}`: A css class to apply to the panel element.\n *     This class should define any borders, box-shadow, etc. for the panel.\n *   - `zIndex` - `{number=}`: The z-index to place the panel at.\n *     Defaults to 80.\n *   - `position` - `{MdPanelPosition=}`: An MdPanelPosition object that\n *     specifies the alignment of the panel. For more information, see\n *     `MdPanelPosition`.\n *   - `clickOutsideToClose` - `{boolean=}`: Whether the user can click\n *     outside the panel to close it. Defaults to false.\n *   - `escapeToClose` - `{boolean=}`: Whether the user can press escape to\n *     close the panel. Defaults to false.\n *   - `onCloseSuccess` - `{function(!panelRef, string)=}`: Function that is\n *     called after the close successfully finishes. The first parameter passed\n *     into this function is the current panelRef and the 2nd is an optional\n *     string explaining the close reason. The currently supported closeReasons\n *     can be found in the MdPanelRef.closeReasons enum. These are by default\n *     passed along by the panel.\n *   - `trapFocus` - `{boolean=}`: Whether focus should be trapped within the\n *     panel. If `trapFocus` is true, the user will not be able to interact\n *     with the rest of the page until the panel is dismissed. Defaults to\n *     false.\n *   - `focusOnOpen` - `{boolean=}`: An option to override focus behavior on\n *     open. Only disable if focusing some other way, as focus management is\n *     required for panels to be accessible. Defaults to true.\n *   - `fullscreen` - `{boolean=}`: Whether the panel should be full screen.\n *     Applies the class `._md-panel-fullscreen` to the panel on open. Defaults\n *     to false.\n *   - `animation` - `{MdPanelAnimation=}`: An MdPanelAnimation object that\n *     specifies the animation of the panel. For more information, see\n *     `MdPanelAnimation`.\n *   - `hasBackdrop` - `{boolean=}`: Whether there should be an opaque backdrop\n *     behind the panel. Defaults to false.\n *   - `disableParentScroll` - `{boolean=}`: Whether the user can scroll the\n *     page behind the panel. Defaults to false.\n *   - `onDomAdded` - `{function=}`: Callback function used to announce when\n *     the panel is added to the DOM.\n *   - `onOpenComplete` - `{function=}`: Callback function used to announce\n *     when the open() action is finished.\n *   - `onRemoving` - `{function=}`: Callback function used to announce the\n *     close/hide() action is starting.\n *   - `onDomRemoved` - `{function=}`: Callback function used to announce when\n *     the panel is removed from the DOM.\n *   - `origin` - `{(string|!angular.JQLite|!Element)=}`: The element to focus\n *     on when the panel closes. This is commonly the element which triggered\n *     the opening of the panel. If you do not use `origin`, you need to control\n *     the focus manually.\n *   - `groupName` - `{(string|!Array<string>)=}`: A group name or an array of\n *     group names. The group name is used for creating a group of panels. The\n *     group is used for configuring the number of open panels and identifying\n *     specific behaviors for groups. For instance, all tooltips could be\n *     identified using the same groupName.\n *\n * @returns {!MdPanelRef} panelRef\n */\n\n/**\n * @ngdoc method\n * @name $mdPanel#open\n * @description\n * Calls the create method above, then opens the panel. This is a shortcut for\n * creating and then calling open manually. If custom methods need to be\n * called when the panel is added to the DOM or opened, do not use this method.\n * Instead create the panel, chain promises on the domAdded and openComplete\n * methods, and call open from the returned panelRef.\n *\n * @param {!Object=} config Specific configuration object that may contain\n *     the properties defined in `$mdPanel.create`.\n * @returns {!angular.$q.Promise<!MdPanelRef>} panelRef A promise that resolves\n *     to an instance of the panel.\n */\n\n/**\n * @ngdoc method\n * @name $mdPanel#newPanelPosition\n * @description\n * Returns a new instance of the MdPanelPosition object. Use this to create\n * the position config object.\n *\n * @returns {!MdPanelPosition} panelPosition\n */\n\n/**\n * @ngdoc method\n * @name $mdPanel#newPanelAnimation\n * @description\n * Returns a new instance of the MdPanelAnimation object. Use this to create\n * the animation config object.\n *\n * @returns {!MdPanelAnimation} panelAnimation\n */\n\n/**\n * @ngdoc method\n * @name $mdPanel#newPanelGroup\n * @description\n * Creates a panel group and adds it to a tracked list of panel groups.\n *\n * @param {string} groupName Name of the group to create.\n * @param {!Object=} config Specific configuration object that may contain the\n *     following properties:\n *\n *   - `maxOpen` - `{number=}`: The maximum number of panels that are allowed to\n *     be open within a defined panel group.\n *\n * @returns {!Object<string,\n *     {panels: !Array<!MdPanelRef>,\n *     openPanels: !Array<!MdPanelRef>,\n *     maxOpen: number}>} panelGroup\n */\n\n/**\n * @ngdoc method\n * @name $mdPanel#setGroupMaxOpen\n * @description\n * Sets the maximum number of panels in a group that can be opened at a given\n * time.\n *\n * @param {string} groupName The name of the group to configure.\n * @param {number} maxOpen The maximum number of panels that can be\n *     opened. Infinity can be passed in to remove the maxOpen limit.\n */\n\n\n/*****************************************************************************\n *                                 MdPanelRef                                *\n *****************************************************************************/\n\n\n/**\n * @ngdoc type\n * @name MdPanelRef\n * @module material.components.panel\n * @description\n * A reference to a created panel. This reference contains a unique id for the\n * panel, along with the following properties:\n *\n *   - `id` - `{string}`: The unique id for the panel. This id is used to track\n *     when a panel was interacted with.\n *   - `config` - `{!Object=}`: The entire config object that was used in\n *     create.\n *   - `isAttached` - `{boolean}`: Whether the panel is attached to the DOM.\n *     Visibility to the user does not factor into isAttached.\n *   - `panelContainer` - `{angular.JQLite}`: The wrapper element containing the\n *     panel. This property is added in order to have access to the `addClass`,\n *     `removeClass`, `toggleClass`, etc methods.\n *   - `panelEl` - `{angular.JQLite}`: The panel element. This property is added\n *     in order to have access to the `addClass`, `removeClass`, `toggleClass`,\n *     etc methods.\n */\n\n/**\n * @ngdoc method\n * @name MdPanelRef#open\n * @description\n * Attaches and shows the panel.\n *\n * @returns {!angular.$q.Promise} A promise that is resolved when the panel is\n *     opened.\n */\n\n/**\n * @ngdoc method\n * @name MdPanelRef#close\n * @description\n * Hides and detaches the panel. Note that this will **not** destroy the panel.\n * If you don't intend on using the panel again, call the {@link #destroy\n * destroy} method afterwards.\n *\n * @returns {!angular.$q.Promise} A promise that is resolved when the panel is\n *     closed.\n */\n\n/**\n * @ngdoc method\n * @name MdPanelRef#attach\n * @description\n * Create the panel elements and attach them to the DOM. The panel will be\n * hidden by default.\n *\n * @returns {!angular.$q.Promise} A promise that is resolved when the panel is\n *     attached.\n */\n\n/**\n * @ngdoc method\n * @name MdPanelRef#detach\n * @description\n * Removes the panel from the DOM. This will NOT hide the panel before removing\n * it.\n *\n * @returns {!angular.$q.Promise} A promise that is resolved when the panel is\n *     detached.\n */\n\n/**\n * @ngdoc method\n * @name MdPanelRef#show\n * @description\n * Shows the panel.\n *\n * @returns {!angular.$q.Promise} A promise that is resolved when the panel has\n *     shown and animations are completed.\n */\n\n/**\n * @ngdoc method\n * @name MdPanelRef#hide\n * @description\n * Hides the panel.\n *\n * @returns {!angular.$q.Promise} A promise that is resolved when the panel has\n *     hidden and animations are completed.\n */\n\n/**\n * @ngdoc method\n * @name MdPanelRef#destroy\n * @description\n * Destroys the panel. The panel cannot be opened again after this is called.\n */\n\n/**\n * @ngdoc method\n * @name MdPanelRef#addClass\n * @deprecated\n * This method is in the process of being deprecated in favor of using the panel\n * and container JQLite elements that are referenced in the MdPanelRef object.\n * Full deprecation is scheduled for material 1.2.\n * @description\n * Adds a class to the panel. DO NOT use this hide/show the panel.\n *\n * @param {string} newClass class to be added.\n * @param {boolean} toElement Whether or not to add the class to the panel\n *     element instead of the container.\n */\n\n/**\n * @ngdoc method\n * @name MdPanelRef#removeClass\n * @deprecated\n * This method is in the process of being deprecated in favor of using the panel\n * and container JQLite elements that are referenced in the MdPanelRef object.\n * Full deprecation is scheduled for material 1.2.\n * @description\n * Removes a class from the panel. DO NOT use this to hide/show the panel.\n *\n * @param {string} oldClass Class to be removed.\n * @param {boolean} fromElement Whether or not to remove the class from the\n *     panel element instead of the container.\n */\n\n/**\n * @ngdoc method\n * @name MdPanelRef#toggleClass\n * @deprecated\n * This method is in the process of being deprecated in favor of using the panel\n * and container JQLite elements that are referenced in the MdPanelRef object.\n * Full deprecation is scheduled for material 1.2.\n * @description\n * Toggles a class on the panel. DO NOT use this to hide/show the panel.\n *\n * @param {string} toggleClass Class to be toggled.\n * @param {boolean} onElement Whether or not to remove the class from the panel\n *     element instead of the container.\n */\n\n/**\n * @ngdoc method\n * @name MdPanelRef#updatePosition\n * @description\n * Updates the position configuration of a panel. Use this to update the\n * position of a panel that is open, without having to close and re-open the\n * panel.\n *\n * @param {!MdPanelPosition} position\n */\n\n/**\n * @ngdoc method\n * @name MdPanelRef#addToGroup\n * @description\n * Adds a panel to a group if the panel does not exist within the group already.\n * A panel can only exist within a single group.\n *\n * @param {string} groupName The name of the group to add the panel to.\n */\n\n/**\n * @ngdoc method\n * @name MdPanelRef#removeFromGroup\n * @description\n * Removes a panel from a group if the panel exists within that group. The group\n * must be created ahead of time.\n *\n * @param {string} groupName The name of the group.\n */\n\n/**\n * @ngdoc method\n * @name MdPanelRef#registerInterceptor\n * @description\n * Registers an interceptor with the panel. The callback should return a promise,\n * which will allow the action to continue when it gets resolved, or will\n * prevent an action if it is rejected. The interceptors are called sequentially\n * and it reverse order. `type` must be one of the following\n * values available on `$mdPanel.interceptorTypes`:\n * * `CLOSE` - Gets called before the panel begins closing.\n *\n * @param {string} type Type of interceptor.\n * @param {!angular.$q.Promise<any>} callback Callback to be registered.\n * @returns {!MdPanelRef}\n */\n\n/**\n * @ngdoc method\n * @name MdPanelRef#removeInterceptor\n * @description\n * Removes a registered interceptor.\n *\n * @param {string} type Type of interceptor to be removed.\n * @param {function(): !angular.$q.Promise<any>} callback Interceptor to be removed.\n * @returns {!MdPanelRef}\n */\n\n/**\n * @ngdoc method\n * @name MdPanelRef#removeAllInterceptors\n * @description\n * Removes all interceptors. If a type is supplied, only the\n * interceptors of that type will be cleared.\n *\n * @param {string=} type Type of interceptors to be removed.\n * @returns {!MdPanelRef}\n */\n\n/**\n * @ngdoc method\n * @name MdPanelRef#updateAnimation\n * @description\n * Updates the animation configuration for a panel. You can use this to change\n * the panel's animation without having to re-create it.\n *\n * @param {!MdPanelAnimation} animation\n */\n\n\n/*****************************************************************************\n *                               MdPanelPosition                            *\n *****************************************************************************/\n\n\n/**\n * @ngdoc type\n * @name MdPanelPosition\n * @module material.components.panel\n * @description\n *\n * Object for configuring the position of the panel.\n *\n * @usage\n *\n * #### Centering the panel\n *\n * <hljs lang=\"js\">\n * new MdPanelPosition().absolute().center();\n * </hljs>\n *\n * #### Overlapping the panel with an element\n *\n * <hljs lang=\"js\">\n * new MdPanelPosition()\n *     .relativeTo(someElement)\n *     .addPanelPosition(\n *       $mdPanel.xPosition.ALIGN_START,\n *       $mdPanel.yPosition.ALIGN_TOPS\n *     );\n * </hljs>\n *\n * #### Aligning the panel with the bottom of an element\n *\n * <hljs lang=\"js\">\n * new MdPanelPosition()\n *     .relativeTo(someElement)\n *     .addPanelPosition($mdPanel.xPosition.CENTER, $mdPanel.yPosition.BELOW);\n * </hljs>\n */\n\n/**\n * @ngdoc method\n * @name MdPanelPosition#absolute\n * @description\n * Positions the panel absolutely relative to the parent element. If the parent\n * is document.body, this is equivalent to positioning the panel absolutely\n * within the viewport.\n *\n * @returns {!MdPanelPosition}\n */\n\n/**\n * @ngdoc method\n * @name MdPanelPosition#relativeTo\n * @description\n * Positions the panel relative to a specific element.\n *\n * @param {string|!Element|!angular.JQLite} element Query selector, DOM element,\n *     or angular element to position the panel with respect to.\n * @returns {!MdPanelPosition}\n */\n\n/**\n * @ngdoc method\n * @name MdPanelPosition#top\n * @description\n * Sets the value of `top` for the panel. Clears any previously set vertical\n * position.\n *\n * @param {string=} top Value of `top`. Defaults to '0'.\n * @returns {!MdPanelPosition}\n */\n\n/**\n * @ngdoc method\n * @name MdPanelPosition#bottom\n * @description\n * Sets the value of `bottom` for the panel. Clears any previously set vertical\n * position.\n *\n * @param {string=} bottom Value of `bottom`. Defaults to '0'.\n * @returns {!MdPanelPosition}\n */\n\n/**\n * @ngdoc method\n * @name MdPanelPosition#start\n * @description\n * Sets the panel to the start of the page - `left` if `ltr` or `right` for\n * `rtl`. Clears any previously set horizontal position.\n *\n * @param {string=} start Value of position. Defaults to '0'.\n * @returns {!MdPanelPosition}\n */\n\n/**\n * @ngdoc method\n * @name MdPanelPosition#end\n * @description\n * Sets the panel to the end of the page - `right` if `ltr` or `left` for `rtl`.\n * Clears any previously set horizontal position.\n *\n * @param {string=} end Value of position. Defaults to '0'.\n * @returns {!MdPanelPosition}\n */\n\n/**\n * @ngdoc method\n * @name MdPanelPosition#left\n * @description\n * Sets the value of `left` for the panel. Clears any previously set\n * horizontal position.\n *\n * @param {string=} left Value of `left`. Defaults to '0'.\n * @returns {!MdPanelPosition}\n */\n\n/**\n * @ngdoc method\n * @name MdPanelPosition#right\n * @description\n * Sets the value of `right` for the panel. Clears any previously set\n * horizontal position.\n *\n * @param {string=} right Value of `right`. Defaults to '0'.\n * @returns {!MdPanelPosition}\n */\n\n/**\n * @ngdoc method\n * @name MdPanelPosition#centerHorizontally\n * @description\n * Centers the panel horizontally in the viewport. Clears any previously set\n * horizontal position.\n *\n * @returns {!MdPanelPosition}\n */\n\n/**\n * @ngdoc method\n * @name MdPanelPosition#centerVertically\n * @description\n * Centers the panel vertically in the viewport. Clears any previously set\n * vertical position.\n *\n * @returns {!MdPanelPosition}\n */\n\n/**\n * @ngdoc method\n * @name MdPanelPosition#center\n * @description\n * Centers the panel horizontally and vertically in the viewport. This is\n * equivalent to calling both `centerHorizontally` and `centerVertically`.\n * Clears any previously set horizontal and vertical positions.\n *\n * @returns {!MdPanelPosition}\n */\n\n/**\n * @ngdoc method\n * @name MdPanelPosition#addPanelPosition\n * @description\n * Sets the x and y position for the panel relative to another element. Can be\n * called multiple times to specify an ordered list of panel positions. The\n * first position which allows the panel to be completely on-screen will be\n * chosen; the last position will be chose whether it is on-screen or not.\n *\n * xPosition must be one of the following values available on\n * $mdPanel.xPosition:\n *\n *\n * CENTER | ALIGN_START | ALIGN_END | OFFSET_START | OFFSET_END\n *\n * <pre>\n *    *************\n *    *           *\n *    *   PANEL   *\n *    *           *\n *    *************\n *   A B    C    D E\n *\n * A: OFFSET_START (for LTR displays)\n * B: ALIGN_START (for LTR displays)\n * C: CENTER\n * D: ALIGN_END (for LTR displays)\n * E: OFFSET_END (for LTR displays)\n * </pre>\n *\n * yPosition must be one of the following values available on\n * $mdPanel.yPosition:\n *\n * CENTER | ALIGN_TOPS | ALIGN_BOTTOMS | ABOVE | BELOW\n *\n * <pre>\n *   F\n *   G *************\n *     *           *\n *   H *   PANEL   *\n *     *           *\n *   I *************\n *   J\n *\n * F: BELOW\n * G: ALIGN_TOPS\n * H: CENTER\n * I: ALIGN_BOTTOMS\n * J: ABOVE\n * </pre>\n *\n * @param {string} xPosition\n * @param {string} yPosition\n * @returns {!MdPanelPosition}\n */\n\n/**\n * @ngdoc method\n * @name MdPanelPosition#withOffsetX\n * @description\n * Sets the value of the offset in the x-direction.\n *\n * @param {string} offsetX\n * @returns {!MdPanelPosition}\n */\n\n/**\n * @ngdoc method\n * @name MdPanelPosition#withOffsetY\n * @description\n * Sets the value of the offset in the y-direction.\n *\n * @param {string} offsetY\n * @returns {!MdPanelPosition}\n */\n\n\n/*****************************************************************************\n *                               MdPanelAnimation                            *\n *****************************************************************************/\n\n\n/**\n * @ngdoc type\n * @name MdPanelAnimation\n * @module material.components.panel\n * @description\n * Animation configuration object. To use, create an MdPanelAnimation with the\n * desired properties, then pass the object as part of $mdPanel creation.\n *\n * @usage\n *\n * <hljs lang=\"js\">\n * var panelAnimation = new MdPanelAnimation()\n *     .openFrom(myButtonEl)\n *     .duration(1337)\n *     .closeTo('.my-button')\n *     .withAnimation($mdPanel.animation.SCALE);\n *\n * $mdPanel.create({\n *   animation: panelAnimation\n * });\n * </hljs>\n */\n\n/**\n * @ngdoc method\n * @name MdPanelAnimation#openFrom\n * @description\n * Specifies where to start the open animation. `openFrom` accepts a\n * click event object, query selector, DOM element, or a Rect object that\n * is used to determine the bounds. When passed a click event, the location\n * of the click will be used as the position to start the animation.\n *\n * @param {string|!Element|!Event|{top: number, left: number}}\n * @returns {!MdPanelAnimation}\n */\n\n/**\n * @ngdoc method\n * @name MdPanelAnimation#closeTo\n * @description\n * Specifies where to animate the panel close. `closeTo` accepts a\n * query selector, DOM element, or a Rect object that is used to determine\n * the bounds.\n *\n * @param {string|!Element|{top: number, left: number}}\n * @returns {!MdPanelAnimation}\n */\n\n/**\n * @ngdoc method\n * @name MdPanelAnimation#withAnimation\n * @description\n * Specifies the animation class.\n *\n * There are several default animations that can be used:\n * ($mdPanel.animation)\n *   SLIDE: The panel slides in and out from the specified\n *       elements. It will not fade in or out.\n *   SCALE: The panel scales in and out. Slide and fade are\n *       included in this animation.\n *   FADE: The panel fades in and out.\n *\n * Custom classes will by default fade in and out unless\n * \"transition: opacity 1ms\" is added to the to custom class.\n *\n * @param {string|{open: string, close: string}} cssClass\n * @returns {!MdPanelAnimation}\n */\n\n/**\n * @ngdoc method\n * @name MdPanelAnimation#duration\n * @description\n * Specifies the duration of the animation in milliseconds. The `duration`\n * method accepts either a number or an object with separate open and close\n * durations.\n *\n * @param {number|{open: number, close: number}} duration\n * @returns {!MdPanelAnimation}\n */\n\n\n/*****************************************************************************\n *                                IMPLEMENTATION                             *\n *****************************************************************************/\n\n\n// Default z-index for the panel.\nvar defaultZIndex = 80;\nvar MD_PANEL_HIDDEN = '_md-panel-hidden';\n\nvar FOCUS_TRAP_TEMPLATE = angular.element(\n    '<div class=\"_md-panel-focus-trap\" tabindex=\"0\"></div>');\n\n\n/**\n * A service that is used for controlling/displaying panels on the screen.\n * @param {!angular.JQLite} $rootElement\n * @param {!angular.Scope} $rootScope\n * @param {!angular.$injector} $injector\n * @param {!angular.$window} $window\n * @final @constructor ngInject\n */\nfunction MdPanelService($rootElement, $rootScope, $injector, $window) {\n  /**\n   * Default config options for the panel.\n   * Anything angular related needs to be done later. Therefore\n   *     scope: $rootScope.$new(true),\n   *     attachTo: $rootElement,\n   * are added later.\n   * @private {!Object}\n   */\n  this._defaultConfigOptions = {\n    bindToController: true,\n    clickOutsideToClose: false,\n    disableParentScroll: false,\n    escapeToClose: false,\n    focusOnOpen: true,\n    fullscreen: false,\n    hasBackdrop: false,\n    propagateContainerEvents: false,\n    transformTemplate: angular.bind(this, this._wrapTemplate),\n    trapFocus: false,\n    zIndex: defaultZIndex\n  };\n\n  /** @private {!Object} */\n  this._config = {};\n\n  /** @private @const */\n  this._$rootElement = $rootElement;\n\n  /** @private @const */\n  this._$rootScope = $rootScope;\n\n  /** @private @const */\n  this._$injector = $injector;\n\n  /** @private @const */\n  this._$window = $window;\n\n  /** @private @const */\n  this._$mdUtil = this._$injector.get('$mdUtil');\n\n  /** @private {!Object<string, !MdPanelRef>} */\n  this._trackedPanels = {};\n\n  /**\n   * @private {!Object<string,\n   *     {panels: !Array<!MdPanelRef>,\n   *     openPanels: !Array<!MdPanelRef>,\n   *     maxOpen: number}>}\n   */\n  this._groups = Object.create(null);\n\n  /**\n   * Default animations that can be used within the panel.\n   * @type {enum}\n   */\n  this.animation = MdPanelAnimation.animation;\n\n  /**\n   * Possible values of xPosition for positioning the panel relative to\n   * another element.\n   * @type {enum}\n   */\n  this.xPosition = MdPanelPosition.xPosition;\n\n  /**\n   * Possible values of yPosition for positioning the panel relative to\n   * another element.\n   * @type {enum}\n   */\n  this.yPosition = MdPanelPosition.yPosition;\n\n  /**\n   * Possible values for the interceptors that can be registered on a panel.\n   * @type {enum}\n   */\n  this.interceptorTypes = MdPanelRef.interceptorTypes;\n\n  /**\n   * Possible values for closing of a panel.\n   * @type {enum}\n   */\n  this.closeReasons = MdPanelRef.closeReasons;\n\n  /**\n   * Possible values of absolute position.\n   * @type {enum}\n   */\n  this.absPosition = MdPanelPosition.absPosition;\n}\n\n\n/**\n * Creates a panel with the specified options.\n * @param {!Object=} config Configuration object for the panel.\n * @returns {!MdPanelRef}\n */\nMdPanelService.prototype.create = function(config) {\n  config = config || {};\n\n  // If the passed-in config contains an ID and the ID is within _trackedPanels,\n  // return the tracked panel.\n  if (angular.isDefined(config.id) && this._trackedPanels[config.id]) {\n    return this._trackedPanels[config.id];\n  }\n\n  this._config = {\n    // If no ID is set within the passed-in config, then create an arbitrary ID.\n    id: config.id || 'panel_' + this._$mdUtil.nextUid(),\n    scope: this._$rootScope.$new(true),\n    attachTo: this._$rootElement\n  };\n  angular.extend(this._config, this._defaultConfigOptions, config);\n\n  var panelRef = new MdPanelRef(this._config, this._$injector);\n  this._trackedPanels[config.id] = panelRef;\n  this._config.scope.$on('$destroy', angular.bind(panelRef, panelRef.detach));\n\n  if (this._config.groupName) {\n    if (angular.isString(this._config.groupName)) {\n      this._config.groupName = [this._config.groupName];\n    }\n    angular.forEach(this._config.groupName, function(group) {\n      panelRef.addToGroup(group);\n    });\n  }\n\n  return panelRef;\n};\n\n\n/**\n * Creates and opens a panel with the specified options.\n * @param {!Object=} config Configuration object for the panel.\n * @returns {!angular.$q.Promise<!MdPanelRef>} The panel created from create.\n */\nMdPanelService.prototype.open = function(config) {\n  var panelRef = this.create(config);\n  return panelRef.open().then(function() {\n    return panelRef;\n  });\n};\n\n\n/**\n * Returns a new instance of the MdPanelPosition. Use this to create the\n * positioning object.\n * @returns {!MdPanelPosition}\n */\nMdPanelService.prototype.newPanelPosition = function() {\n  return new MdPanelPosition(this._$injector);\n};\n\n\n/**\n * Returns a new instance of the MdPanelAnimation. Use this to create the\n * animation object.\n * @returns {!MdPanelAnimation}\n */\nMdPanelService.prototype.newPanelAnimation = function() {\n  return new MdPanelAnimation(this._$injector);\n};\n\n\n/**\n * Creates a panel group and adds it to a tracked list of panel groups.\n * @param groupName {string} Name of the group to create.\n * @param config {!Object=} Specific configuration object that may contain the\n *     following properties:\n *\n *   - `maxOpen` - `{number=}`: The maximum number of panels that are allowed\n *     open within a defined panel group.\n *\n * @returns {!Object<string,\n *     {panels: !Array<!MdPanelRef>,\n *     openPanels: !Array<!MdPanelRef>,\n *     maxOpen: number}>} panelGroup\n */\nMdPanelService.prototype.newPanelGroup = function(groupName, config) {\n  if (!this._groups[groupName]) {\n    config = config || {};\n    var group = {\n      panels: [],\n      openPanels: [],\n      maxOpen: config.maxOpen > 0 ? config.maxOpen : Infinity\n    };\n    this._groups[groupName] = group;\n  }\n  return this._groups[groupName];\n};\n\n\n/**\n * Sets the maximum number of panels in a group that can be opened at a given\n * time.\n * @param {string} groupName The name of the group to configure.\n * @param {number} maxOpen The maximum number of panels that can be\n *     opened. Infinity can be passed in to remove the maxOpen limit.\n */\nMdPanelService.prototype.setGroupMaxOpen = function(groupName, maxOpen) {\n  if (this._groups[groupName]) {\n    this._groups[groupName].maxOpen = maxOpen;\n  } else {\n    throw new Error('mdPanel: Group does not exist yet. Call newPanelGroup().');\n  }\n};\n\n\n/**\n * Determines if the current number of open panels within a group exceeds the\n * limit of allowed open panels.\n * @param {string} groupName The name of the group to check.\n * @returns {boolean} true if open count does exceed maxOpen and false if not.\n * @private\n */\nMdPanelService.prototype._openCountExceedsMaxOpen = function(groupName) {\n  if (this._groups[groupName]) {\n    var group = this._groups[groupName];\n    return group.maxOpen > 0 && group.openPanels.length > group.maxOpen;\n  }\n  return false;\n};\n\n\n/**\n * Closes the first open panel within a specific group.\n * @param {string} groupName The name of the group.\n * @private\n */\nMdPanelService.prototype._closeFirstOpenedPanel = function(groupName) {\n  this._groups[groupName].openPanels[0].close();\n};\n\n\n/**\n * Wraps the users template in two elements, md-panel-outer-wrapper, which\n * covers the entire attachTo element, and md-panel, which contains only the\n * template. This allows the panel control over positioning, animations,\n * and similar properties.\n * @param {string} origTemplate The original template.\n * @returns {string} The wrapped template.\n * @private\n */\nMdPanelService.prototype._wrapTemplate = function(origTemplate) {\n  var template = origTemplate || '';\n\n  // The panel should be initially rendered offscreen so we can calculate\n  // height and width for positioning.\n  return '' +\n      '<div class=\"md-panel-outer-wrapper\">' +\n      '  <div class=\"md-panel\" style=\"left: -9999px;\">' + template + '</div>' +\n      '</div>';\n};\n\n\n/**\n * Wraps a content element in a md-panel-outer wrapper and\n * positions it off-screen. Allows for proper control over positoning\n * and animations.\n * @param {!angular.JQLite} contentElement Element to be wrapped.\n * @return {!angular.JQLite} Wrapper element.\n * @private\n */\nMdPanelService.prototype._wrapContentElement = function(contentElement) {\n  var wrapper = angular.element('<div class=\"md-panel-outer-wrapper\">');\n\n  contentElement.addClass('md-panel').css('left', '-9999px');\n  wrapper.append(contentElement);\n\n  return wrapper;\n};\n\n\n/*****************************************************************************\n *                                 MdPanelRef                                *\n *****************************************************************************/\n\n\n/**\n * A reference to a created panel. This reference contains a unique id for the\n * panel, along with properties/functions used to control the panel.\n * @param {!Object} config\n * @param {!angular.$injector} $injector\n * @final @constructor\n */\nfunction MdPanelRef(config, $injector) {\n  // Injected variables.\n  /** @private @const {!angular.$q} */\n  this._$q = $injector.get('$q');\n\n  /** @private @const {!angular.$mdCompiler} */\n  this._$mdCompiler = $injector.get('$mdCompiler');\n\n  /** @private @const {!angular.$mdConstant} */\n  this._$mdConstant = $injector.get('$mdConstant');\n\n  /** @private @const {!angular.$mdUtil} */\n  this._$mdUtil = $injector.get('$mdUtil');\n\n  /** @private @const {!angular.$mdTheming} */\n  this._$mdTheming = $injector.get('$mdTheming');\n\n  /** @private @const {!angular.Scope} */\n  this._$rootScope = $injector.get('$rootScope');\n\n  /** @private @const {!angular.$animate} */\n  this._$animate = $injector.get('$animate');\n\n  /** @private @const {!MdPanelRef} */\n  this._$mdPanel = $injector.get('$mdPanel');\n\n  /** @private @const {!angular.$log} */\n  this._$log = $injector.get('$log');\n\n  /** @private @const {!angular.$window} */\n  this._$window = $injector.get('$window');\n\n  /** @private @const {!Function} */\n  this._$$rAF = $injector.get('$$rAF');\n\n  // Public variables.\n  /**\n   * Unique id for the panelRef.\n   * @type {string}\n   */\n  this.id = config.id;\n\n  /** @type {!Object} */\n  this.config = config;\n\n  /** @type {!angular.JQLite|undefined} */\n  this.panelContainer;\n\n  /** @type {!angular.JQLite|undefined} */\n  this.panelEl;\n\n  /**\n   * Whether the panel is attached. This is synchronous. When attach is called,\n   * isAttached is set to true. When detach is called, isAttached is set to\n   * false.\n   * @type {boolean}\n   */\n  this.isAttached = false;\n\n  // Private variables.\n  /** @private {Array<function()>} */\n  this._removeListeners = [];\n\n  /** @private {!angular.JQLite|undefined} */\n  this._topFocusTrap;\n\n  /** @private {!angular.JQLite|undefined} */\n  this._bottomFocusTrap;\n\n  /** @private {!$mdPanel|undefined} */\n  this._backdropRef;\n\n  /** @private {Function?} */\n  this._restoreScroll = null;\n\n  /**\n   * Keeps track of all the panel interceptors.\n   * @private {!Object}\n   */\n  this._interceptors = Object.create(null);\n\n  /**\n   * Cleanup function, provided by `$mdCompiler` and assigned after the element\n   * has been compiled. When `contentElement` is used, the function is used to\n   * restore the element to it's proper place in the DOM.\n   * @private {!Function}\n   */\n  this._compilerCleanup = null;\n\n  /**\n   * Cache for saving and restoring element inline styles, CSS classes etc.\n   * @type {{styles: string, classes: string}}\n   */\n  this._restoreCache = {\n    styles: '',\n    classes: ''\n  };\n}\n\n\nMdPanelRef.interceptorTypes = {\n  CLOSE: 'onClose'\n};\n\n\n/**\n * Opens an already created and configured panel. If the panel is already\n * visible, does nothing.\n * @returns {!angular.$q.Promise<!MdPanelRef>} A promise that is resolved when\n *     the panel is opened and animations finish.\n */\nMdPanelRef.prototype.open = function() {\n  var self = this;\n  return this._$q(function(resolve, reject) {\n    var done = self._done(resolve, self);\n    var show = self._simpleBind(self.show, self);\n    var checkGroupMaxOpen = function() {\n      if (self.config.groupName) {\n        angular.forEach(self.config.groupName, function(group) {\n          if (self._$mdPanel._openCountExceedsMaxOpen(group)) {\n            self._$mdPanel._closeFirstOpenedPanel(group);\n          }\n        });\n      }\n    };\n\n    self.attach()\n        .then(show)\n        .then(checkGroupMaxOpen)\n        .then(done)\n        .catch(reject);\n  });\n};\n\n\n/**\n * Closes the panel.\n * @param {string} closeReason The event type that triggered the close.\n * @returns {!angular.$q.Promise<!MdPanelRef>} A promise that is resolved when\n *     the panel is closed and animations finish.\n */\nMdPanelRef.prototype.close = function(closeReason) {\n  var self = this;\n\n  return this._$q(function(resolve, reject) {\n    self._callInterceptors(MdPanelRef.interceptorTypes.CLOSE).then(function() {\n      var done = self._done(resolve, self);\n      var detach = self._simpleBind(self.detach, self);\n      var onCloseSuccess = self.config['onCloseSuccess'] || angular.noop;\n      onCloseSuccess = angular.bind(self, onCloseSuccess, self, closeReason);\n\n      self.hide()\n          .then(detach)\n          .then(done)\n          .then(onCloseSuccess)\n          .catch(reject);\n    }, reject);\n  });\n};\n\n\n/**\n * Attaches the panel. The panel will be hidden afterwards.\n * @returns {!angular.$q.Promise<!MdPanelRef>} A promise that is resolved when\n *     the panel is attached.\n */\nMdPanelRef.prototype.attach = function() {\n  if (this.isAttached && this.panelEl) {\n    return this._$q.when(this);\n  }\n\n  var self = this;\n  return this._$q(function(resolve, reject) {\n    var done = self._done(resolve, self);\n    var onDomAdded = self.config['onDomAdded'] || angular.noop;\n    var addListeners = function(response) {\n      self.isAttached = true;\n      self._addEventListeners();\n      return response;\n    };\n\n    self._$q.all([\n        self._createBackdrop(),\n        self._createPanel()\n            .then(addListeners)\n            .catch(reject)\n    ]).then(onDomAdded)\n      .then(done)\n      .catch(reject);\n  });\n};\n\n\n/**\n * Only detaches the panel. Will NOT hide the panel first.\n * @returns {!angular.$q.Promise<!MdPanelRef>} A promise that is resolved when\n *     the panel is detached.\n */\nMdPanelRef.prototype.detach = function() {\n  if (!this.isAttached) {\n    return this._$q.when(this);\n  }\n\n  var self = this;\n  var onDomRemoved = self.config['onDomRemoved'] || angular.noop;\n\n  var detachFn = function() {\n    self._removeEventListeners();\n\n    // Remove the focus traps that we added earlier for keeping focus within\n    // the panel.\n    if (self._topFocusTrap && self._topFocusTrap.parentNode) {\n      self._topFocusTrap.parentNode.removeChild(self._topFocusTrap);\n    }\n\n    if (self._bottomFocusTrap && self._bottomFocusTrap.parentNode) {\n      self._bottomFocusTrap.parentNode.removeChild(self._bottomFocusTrap);\n    }\n\n    if (self._restoreCache.classes) {\n      self.panelEl[0].className = self._restoreCache.classes;\n    }\n\n    // Either restore the saved styles or clear the ones set by mdPanel.\n    self.panelEl[0].style.cssText = self._restoreCache.styles || '';\n\n    self._compilerCleanup();\n    self.panelContainer.remove();\n    self.isAttached = false;\n    return self._$q.when(self);\n  };\n\n  if (this._restoreScroll) {\n    this._restoreScroll();\n    this._restoreScroll = null;\n  }\n\n  return this._$q(function(resolve, reject) {\n    var done = self._done(resolve, self);\n\n    self._$q.all([\n      detachFn(),\n      self._backdropRef ? self._backdropRef.detach() : true\n    ]).then(onDomRemoved)\n      .then(done)\n      .catch(reject);\n  });\n};\n\n\n/**\n * Destroys the panel. The Panel cannot be opened again after this.\n */\nMdPanelRef.prototype.destroy = function() {\n  var self = this;\n  if (this.config.groupName) {\n    angular.forEach(this.config.groupName, function(group) {\n      self.removeFromGroup(group);\n    });\n  }\n  this.config.scope.$destroy();\n  this.config.locals = null;\n  this._interceptors = null;\n};\n\n\n/**\n * Shows the panel.\n * @returns {!angular.$q.Promise<!MdPanelRef>} A promise that is resolved when\n *     the panel has shown and animations finish.\n */\nMdPanelRef.prototype.show = function() {\n  if (!this.panelContainer) {\n    return this._$q(function(resolve, reject) {\n      reject('mdPanel: Panel does not exist yet. Call open() or attach().');\n    });\n  }\n\n  if (!this.panelContainer.hasClass(MD_PANEL_HIDDEN)) {\n    return this._$q.when(this);\n  }\n\n  var self = this;\n  var animatePromise = function() {\n    self.panelContainer.removeClass(MD_PANEL_HIDDEN);\n    return self._animateOpen();\n  };\n\n  return this._$q(function(resolve, reject) {\n    var done = self._done(resolve, self);\n    var onOpenComplete = self.config['onOpenComplete'] || angular.noop;\n    var addToGroupOpen = function() {\n      if (self.config.groupName) {\n        angular.forEach(self.config.groupName, function(group) {\n          self._$mdPanel._groups[group].openPanels.push(self);\n        });\n      }\n    };\n\n    self._$q.all([\n      self._backdropRef ? self._backdropRef.show() : self,\n      animatePromise().then(function() { self._focusOnOpen(); }, reject)\n    ]).then(onOpenComplete)\n      .then(addToGroupOpen)\n      .then(done)\n      .catch(reject);\n  });\n};\n\n\n/**\n * Hides the panel.\n * @returns {!angular.$q.Promise<!MdPanelRef>} A promise that is resolved when\n *     the panel has hidden and animations finish.\n */\nMdPanelRef.prototype.hide = function() {\n  if (!this.panelContainer) {\n    return this._$q(function(resolve, reject) {\n      reject('mdPanel: Panel does not exist yet. Call open() or attach().');\n    });\n  }\n\n  if (this.panelContainer.hasClass(MD_PANEL_HIDDEN)) {\n    return this._$q.when(this);\n  }\n\n  var self = this;\n\n  return this._$q(function(resolve, reject) {\n    var done = self._done(resolve, self);\n    var onRemoving = self.config['onRemoving'] || angular.noop;\n    var hidePanel = function() {\n      self.panelContainer.addClass(MD_PANEL_HIDDEN);\n    };\n    var removeFromGroupOpen = function() {\n      if (self.config.groupName) {\n        var group, index;\n        angular.forEach(self.config.groupName, function(group) {\n          group = self._$mdPanel._groups[group];\n          index = group.openPanels.indexOf(self);\n          if (index > -1) {\n            group.openPanels.splice(index, 1);\n          }\n        });\n      }\n    };\n    var focusOnOrigin = function() {\n      var origin = self.config['origin'];\n      if (origin) {\n        getElement(origin).focus();\n      }\n    };\n\n    self._$q.all([\n      self._backdropRef ? self._backdropRef.hide() : self,\n      self._animateClose()\n          .then(onRemoving)\n          .then(hidePanel)\n          .then(removeFromGroupOpen)\n          .then(focusOnOrigin)\n          .catch(reject)\n    ]).then(done, reject);\n  });\n};\n\n\n/**\n * Add a class to the panel. DO NOT use this to hide/show the panel.\n * @deprecated\n * This method is in the process of being deprecated in favor of using the panel\n * and container JQLite elements that are referenced in the MdPanelRef object.\n * Full deprecation is scheduled for material 1.2.\n *\n * @param {string} newClass Class to be added.\n * @param {boolean} toElement Whether or not to add the class to the panel\n *     element instead of the container.\n */\nMdPanelRef.prototype.addClass = function(newClass, toElement) {\n  this._$log.warn(\n      'mdPanel: The addClass method is in the process of being deprecated. ' +\n      'Full deprecation is scheduled for the Angular Material 1.2 release. ' +\n      'To achieve the same results, use the panelContainer or panelEl ' +\n      'JQLite elements that are referenced in MdPanelRef.');\n\n  if (!this.panelContainer) {\n    throw new Error(\n        'mdPanel: Panel does not exist yet. Call open() or attach().');\n  }\n\n  if (!toElement && !this.panelContainer.hasClass(newClass)) {\n    this.panelContainer.addClass(newClass);\n  } else if (toElement && !this.panelEl.hasClass(newClass)) {\n    this.panelEl.addClass(newClass);\n  }\n};\n\n\n/**\n * Remove a class from the panel. DO NOT use this to hide/show the panel.\n * @deprecated\n * This method is in the process of being deprecated in favor of using the panel\n * and container JQLite elements that are referenced in the MdPanelRef object.\n * Full deprecation is scheduled for material 1.2.\n *\n * @param {string} oldClass Class to be removed.\n * @param {boolean} fromElement Whether or not to remove the class from the\n *     panel element instead of the container.\n */\nMdPanelRef.prototype.removeClass = function(oldClass, fromElement) {\n  this._$log.warn(\n      'mdPanel: The removeClass method is in the process of being deprecated. ' +\n      'Full deprecation is scheduled for the Angular Material 1.2 release. ' +\n      'To achieve the same results, use the panelContainer or panelEl ' +\n      'JQLite elements that are referenced in MdPanelRef.');\n\n  if (!this.panelContainer) {\n    throw new Error(\n        'mdPanel: Panel does not exist yet. Call open() or attach().');\n  }\n\n  if (!fromElement && this.panelContainer.hasClass(oldClass)) {\n    this.panelContainer.removeClass(oldClass);\n  } else if (fromElement && this.panelEl.hasClass(oldClass)) {\n    this.panelEl.removeClass(oldClass);\n  }\n};\n\n\n/**\n * Toggle a class on the panel. DO NOT use this to hide/show the panel.\n * @deprecated\n * This method is in the process of being deprecated in favor of using the panel\n * and container JQLite elements that are referenced in the MdPanelRef object.\n * Full deprecation is scheduled for material 1.2.\n *\n * @param {string} toggleClass The class to toggle.\n * @param {boolean} onElement Whether or not to toggle the class on the panel\n *     element instead of the container.\n */\nMdPanelRef.prototype.toggleClass = function(toggleClass, onElement) {\n  this._$log.warn(\n      'mdPanel: The toggleClass method is in the process of being deprecated. ' +\n      'Full deprecation is scheduled for the Angular Material 1.2 release. ' +\n      'To achieve the same results, use the panelContainer or panelEl ' +\n      'JQLite elements that are referenced in MdPanelRef.');\n\n  if (!this.panelContainer) {\n    throw new Error(\n        'mdPanel: Panel does not exist yet. Call open() or attach().');\n  }\n\n  if (!onElement) {\n    this.panelContainer.toggleClass(toggleClass);\n  } else {\n    this.panelEl.toggleClass(toggleClass);\n  }\n};\n\n\n/**\n * Compiles the panel, according to the passed in config and appends it to\n * the DOM. Helps normalize differences in the compilation process between\n * using a string template and a content element.\n * @returns {!angular.$q.Promise<!MdPanelRef>} Promise that is resolved when\n *     the element has been compiled and added to the DOM.\n * @private\n */\nMdPanelRef.prototype._compile = function() {\n  var self = this;\n\n  // Compile the element via $mdCompiler. Note that when using a\n  // contentElement, the element isn't actually being compiled, rather the\n  // compiler saves it's place in the DOM and provides a way of restoring it.\n  return self._$mdCompiler.compile(self.config).then(function(compileData) {\n    var config = self.config;\n\n    if (config.contentElement) {\n      var panelEl = compileData.element;\n\n      // Since mdPanel modifies the inline styles and CSS classes, we need\n      // to save them in order to be able to restore on close.\n      self._restoreCache.styles = panelEl[0].style.cssText;\n      self._restoreCache.classes = panelEl[0].className;\n\n      self.panelContainer = self._$mdPanel._wrapContentElement(panelEl);\n      self.panelEl = panelEl;\n    } else {\n      self.panelContainer = compileData.link(config['scope']);\n      self.panelEl = angular.element(\n        self.panelContainer[0].querySelector('.md-panel')\n      );\n    }\n\n    // Save a reference to the cleanup function from the compiler.\n    self._compilerCleanup = compileData.cleanup;\n\n    // Attach the panel to the proper place in the DOM.\n    getElement(self.config['attachTo']).append(self.panelContainer);\n\n    return self;\n  });\n};\n\n\n/**\n * Creates a panel and adds it to the dom.\n * @returns {!angular.$q.Promise} A promise that is resolved when the panel is\n *     created.\n * @private\n */\nMdPanelRef.prototype._createPanel = function() {\n  var self = this;\n\n  return this._$q(function(resolve, reject) {\n    if (!self.config.locals) {\n      self.config.locals = {};\n    }\n\n    self.config.locals.mdPanelRef = self;\n\n    self._compile().then(function() {\n      if (self.config['disableParentScroll']) {\n        self._restoreScroll = self._$mdUtil.disableScrollAround(\n          null,\n          self.panelContainer,\n          { disableScrollMask: true }\n        );\n      }\n\n      // Add a custom CSS class to the panel element.\n      if (self.config['panelClass']) {\n        self.panelEl.addClass(self.config['panelClass']);\n      }\n\n      // Handle click and touch events for the panel container.\n      if (self.config['propagateContainerEvents']) {\n        self.panelContainer.css('pointer-events', 'none');\n      }\n\n      // Panel may be outside the $rootElement, tell ngAnimate to animate\n      // regardless.\n      if (self._$animate.pin) {\n        self._$animate.pin(\n          self.panelContainer,\n          getElement(self.config['attachTo'])\n        );\n      }\n\n      self._configureTrapFocus();\n      self._addStyles().then(function() {\n        resolve(self);\n      }, reject);\n    }, reject);\n\n  });\n};\n\n\n/**\n * Adds the styles for the panel, such as positioning and z-index. Also,\n * themes the panel element and panel container using `$mdTheming`.\n * @returns {!angular.$q.Promise<!MdPanelRef>}\n * @private\n */\nMdPanelRef.prototype._addStyles = function() {\n  var self = this;\n  return this._$q(function(resolve) {\n    self.panelContainer.css('z-index', self.config['zIndex']);\n    self.panelEl.css('z-index', self.config['zIndex'] + 1);\n\n    var hideAndResolve = function() {\n      // Theme the element and container.\n      self._setTheming();\n\n      // Remove left: -9999px and add hidden class.\n      self.panelEl.css('left', '');\n      self.panelContainer.addClass(MD_PANEL_HIDDEN);\n\n      resolve(self);\n    };\n\n    if (self.config['fullscreen']) {\n      self.panelEl.addClass('_md-panel-fullscreen');\n      hideAndResolve();\n      return; // Don't setup positioning.\n    }\n\n    var positionConfig = self.config['position'];\n    if (!positionConfig) {\n      hideAndResolve();\n      return; // Don't setup positioning.\n    }\n\n    // Wait for angular to finish processing the template\n    self._$rootScope['$$postDigest'](function() {\n      // Position it correctly. This is necessary so that the panel will have a\n      // defined height and width.\n      self._updatePosition(true);\n\n      // Theme the element and container.\n      self._setTheming();\n\n      resolve(self);\n    });\n  });\n};\n\n\n/**\n * Sets the `$mdTheming` classes on the `panelContainer` and `panelEl`.\n * @private\n */\nMdPanelRef.prototype._setTheming = function() {\n  this._$mdTheming(this.panelEl);\n  this._$mdTheming(this.panelContainer);\n};\n\n\n/**\n * Updates the position configuration of a panel\n * @param {!MdPanelPosition} position\n */\nMdPanelRef.prototype.updatePosition = function(position) {\n  if (!this.panelContainer) {\n    throw new Error(\n        'mdPanel: Panel does not exist yet. Call open() or attach().');\n  }\n\n  this.config['position'] = position;\n  this._updatePosition();\n};\n\n\n/**\n * Calculates and updates the position of the panel.\n * @param {boolean=} init\n * @private\n */\nMdPanelRef.prototype._updatePosition = function(init) {\n  var positionConfig = this.config['position'];\n\n  if (positionConfig) {\n    positionConfig._setPanelPosition(this.panelEl);\n\n    // Hide the panel now that position is known.\n    if (init) {\n      this.panelContainer.addClass(MD_PANEL_HIDDEN);\n    }\n\n    this.panelEl.css(\n      MdPanelPosition.absPosition.TOP,\n      positionConfig.getTop()\n    );\n    this.panelEl.css(\n      MdPanelPosition.absPosition.BOTTOM,\n      positionConfig.getBottom()\n    );\n    this.panelEl.css(\n      MdPanelPosition.absPosition.LEFT,\n      positionConfig.getLeft()\n    );\n    this.panelEl.css(\n      MdPanelPosition.absPosition.RIGHT,\n      positionConfig.getRight()\n    );\n  }\n};\n\n\n/**\n * Focuses on the panel or the first focus target.\n * @private\n */\nMdPanelRef.prototype._focusOnOpen = function() {\n  if (this.config['focusOnOpen']) {\n    // Wait for the template to finish rendering to guarantee md-autofocus has\n    // finished adding the class md-autofocus, otherwise the focusable element\n    // isn't available to focus.\n    var self = this;\n    this._$rootScope['$$postDigest'](function() {\n      var target = self._$mdUtil.findFocusTarget(self.panelEl) ||\n          self.panelEl;\n      target.focus();\n    });\n  }\n};\n\n\n/**\n * Shows the backdrop.\n * @returns {!angular.$q.Promise} A promise that is resolved when the backdrop\n *     is created and attached.\n * @private\n */\nMdPanelRef.prototype._createBackdrop = function() {\n  if (this.config.hasBackdrop) {\n    if (!this._backdropRef) {\n      var backdropAnimation = this._$mdPanel.newPanelAnimation()\n          .openFrom(this.config.attachTo)\n          .withAnimation({\n            open: '_md-opaque-enter',\n            close: '_md-opaque-leave'\n          });\n\n      if (this.config.animation) {\n        backdropAnimation.duration(this.config.animation._rawDuration);\n      }\n\n      var backdropConfig = {\n        animation: backdropAnimation,\n        attachTo: this.config.attachTo,\n        focusOnOpen: false,\n        panelClass: '_md-panel-backdrop',\n        zIndex: this.config.zIndex - 1\n      };\n\n      this._backdropRef = this._$mdPanel.create(backdropConfig);\n    }\n    if (!this._backdropRef.isAttached) {\n      return this._backdropRef.attach();\n    }\n  }\n};\n\n\n/**\n * Listen for escape keys and outside clicks to auto close.\n * @private\n */\nMdPanelRef.prototype._addEventListeners = function() {\n  this._configureEscapeToClose();\n  this._configureClickOutsideToClose();\n  this._configureScrollListener();\n};\n\n\n/**\n * Remove event listeners added in _addEventListeners.\n * @private\n */\nMdPanelRef.prototype._removeEventListeners = function() {\n  this._removeListeners && this._removeListeners.forEach(function(removeFn) {\n    removeFn();\n  });\n  this._removeListeners = [];\n};\n\n\n/**\n * Setup the escapeToClose event listeners.\n * @private\n */\nMdPanelRef.prototype._configureEscapeToClose = function() {\n  if (this.config['escapeToClose']) {\n    var parentTarget = getElement(this.config['attachTo']);\n    var self = this;\n\n    var keyHandlerFn = function(ev) {\n      if (ev.keyCode === self._$mdConstant.KEY_CODE.ESCAPE) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        self.close(MdPanelRef.closeReasons.ESCAPE);\n      }\n    };\n\n    // Add keydown listeners\n    this.panelContainer.on('keydown', keyHandlerFn);\n    parentTarget.on('keydown', keyHandlerFn);\n\n    // Queue remove listeners function\n    this._removeListeners.push(function() {\n      self.panelContainer.off('keydown', keyHandlerFn);\n      parentTarget.off('keydown', keyHandlerFn);\n    });\n  }\n};\n\n\n/**\n * Setup the clickOutsideToClose event listeners.\n * @private\n */\nMdPanelRef.prototype._configureClickOutsideToClose = function() {\n  if (this.config['clickOutsideToClose']) {\n    var target = this.config['propagateContainerEvents'] ?\n        angular.element(document.body) :\n        this.panelContainer;\n    var sourceEl;\n\n    // Keep track of the element on which the mouse originally went down\n    // so that we can only close the backdrop when the 'click' started on it.\n    // A simple 'click' handler does not work, it sets the target object as the\n    // element the mouse went down on.\n    var mousedownHandler = function(ev) {\n      sourceEl = ev.target;\n    };\n\n    // We check if our original element and the target is the backdrop\n    // because if the original was the backdrop and the target was inside the\n    // panel we don't want to panel to close.\n    var self = this;\n    var mouseupHandler = function(ev) {\n      if (self.config['propagateContainerEvents']) {\n\n        // We check if the sourceEl of the event is the panel element or one\n        // of it's children. If it is not, then close the panel.\n        if (sourceEl !== self.panelEl[0] && !self.panelEl[0].contains(sourceEl)) {\n          self.close();\n        }\n\n      } else if (sourceEl === target[0] && ev.target === target[0]) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        self.close(MdPanelRef.closeReasons.CLICK_OUTSIDE);\n      }\n    };\n\n    // Add listeners\n    target.on('mousedown', mousedownHandler);\n    target.on('mouseup', mouseupHandler);\n\n    // Queue remove listeners function\n    this._removeListeners.push(function() {\n      target.off('mousedown', mousedownHandler);\n      target.off('mouseup', mouseupHandler);\n    });\n  }\n};\n\n\n/**\n * Configures the listeners for updating the panel position on scroll.\n * @private\n*/\nMdPanelRef.prototype._configureScrollListener = function() {\n  // No need to bind the event if scrolling is disabled.\n  if (!this.config['disableParentScroll']) {\n    var updatePosition = angular.bind(this, this._updatePosition);\n    var debouncedUpdatePosition = this._$$rAF.throttle(updatePosition);\n    var self = this;\n\n    var onScroll = function() {\n      debouncedUpdatePosition();\n    };\n\n    // Add listeners.\n    this._$window.addEventListener('scroll', onScroll, true);\n\n    // Queue remove listeners function.\n    this._removeListeners.push(function() {\n      self._$window.removeEventListener('scroll', onScroll, true);\n    });\n  }\n};\n\n\n/**\n * Setup the focus traps. These traps will wrap focus when tabbing past the\n * panel. When shift-tabbing, the focus will stick in place.\n * @private\n */\nMdPanelRef.prototype._configureTrapFocus = function() {\n  // Focus doesn't remain inside of the panel without this.\n  this.panelEl.attr('tabIndex', '-1');\n  if (this.config['trapFocus']) {\n    var element = this.panelEl;\n    // Set up elements before and after the panel to capture focus and\n    // redirect back into the panel.\n    this._topFocusTrap = FOCUS_TRAP_TEMPLATE.clone()[0];\n    this._bottomFocusTrap = FOCUS_TRAP_TEMPLATE.clone()[0];\n\n    // When focus is about to move out of the panel, we want to intercept it\n    // and redirect it back to the panel element.\n    var focusHandler = function() {\n      element.focus();\n    };\n    this._topFocusTrap.addEventListener('focus', focusHandler);\n    this._bottomFocusTrap.addEventListener('focus', focusHandler);\n\n    // Queue remove listeners function\n    this._removeListeners.push(this._simpleBind(function() {\n      this._topFocusTrap.removeEventListener('focus', focusHandler);\n      this._bottomFocusTrap.removeEventListener('focus', focusHandler);\n    }, this));\n\n    // The top focus trap inserted immediately before the md-panel element (as\n    // a sibling). The bottom focus trap inserted immediately after the\n    // md-panel element (as a sibling).\n    element[0].parentNode.insertBefore(this._topFocusTrap, element[0]);\n    element.after(this._bottomFocusTrap);\n  }\n};\n\n\n/**\n * Updates the animation of a panel.\n * @param {!MdPanelAnimation} animation\n */\nMdPanelRef.prototype.updateAnimation = function(animation) {\n  this.config['animation'] = animation;\n\n  if (this._backdropRef) {\n    this._backdropRef.config.animation.duration(animation._rawDuration);\n  }\n};\n\n\n/**\n * Animate the panel opening.\n * @returns {!angular.$q.Promise} A promise that is resolved when the panel has\n *     animated open.\n * @private\n */\nMdPanelRef.prototype._animateOpen = function() {\n  this.panelContainer.addClass('md-panel-is-showing');\n  var animationConfig = this.config['animation'];\n  if (!animationConfig) {\n    // Promise is in progress, return it.\n    this.panelContainer.addClass('_md-panel-shown');\n    return this._$q.when(this);\n  }\n\n  var self = this;\n  return this._$q(function(resolve) {\n    var done = self._done(resolve, self);\n    var warnAndOpen = function() {\n      self._$log.warn(\n          'mdPanel: MdPanel Animations failed. ' +\n          'Showing panel without animating.');\n      done();\n    };\n\n    animationConfig.animateOpen(self.panelEl)\n        .then(done, warnAndOpen);\n  });\n};\n\n\n/**\n * Animate the panel closing.\n * @returns {!angular.$q.Promise} A promise that is resolved when the panel has\n *     animated closed.\n * @private\n */\nMdPanelRef.prototype._animateClose = function() {\n  var animationConfig = this.config['animation'];\n  if (!animationConfig) {\n    this.panelContainer.removeClass('md-panel-is-showing');\n    this.panelContainer.removeClass('_md-panel-shown');\n    return this._$q.when(this);\n  }\n\n  var self = this;\n  return this._$q(function(resolve) {\n    var done = function() {\n      self.panelContainer.removeClass('md-panel-is-showing');\n      resolve(self);\n    };\n    var warnAndClose = function() {\n      self._$log.warn(\n          'mdPanel: MdPanel Animations failed. ' +\n          'Hiding panel without animating.');\n      done();\n    };\n\n    animationConfig.animateClose(self.panelEl)\n        .then(done, warnAndClose);\n  });\n};\n\n\n/**\n * Registers a interceptor with the panel. The callback should return a promise,\n * which will allow the action to continue when it gets resolved, or will\n * prevent an action if it is rejected.\n * @param {string} type Type of interceptor.\n * @param {!angular.$q.Promise<!any>} callback Callback to be registered.\n * @returns {!MdPanelRef}\n */\nMdPanelRef.prototype.registerInterceptor = function(type, callback) {\n  var error = null;\n\n  if (!angular.isString(type)) {\n    error = 'Interceptor type must be a string, instead got ' + typeof type;\n  } else if (!angular.isFunction(callback)) {\n    error = 'Interceptor callback must be a function, instead got ' + typeof callback;\n  }\n\n  if (error) {\n    throw new Error('MdPanel: ' + error);\n  }\n\n  var interceptors = this._interceptors[type] = this._interceptors[type] || [];\n\n  if (interceptors.indexOf(callback) === -1) {\n    interceptors.push(callback);\n  }\n\n  return this;\n};\n\n\n/**\n * Removes a registered interceptor.\n * @param {string} type Type of interceptor to be removed.\n * @param {Function} callback Interceptor to be removed.\n * @returns {!MdPanelRef}\n */\nMdPanelRef.prototype.removeInterceptor = function(type, callback) {\n  var index = this._interceptors[type] ?\n    this._interceptors[type].indexOf(callback) : -1;\n\n  if (index > -1) {\n    this._interceptors[type].splice(index, 1);\n  }\n\n  return this;\n};\n\n\n/**\n * Removes all interceptors.\n * @param {string=} type Type of interceptors to be removed.\n *     If ommited, all interceptors types will be removed.\n * @returns {!MdPanelRef}\n */\nMdPanelRef.prototype.removeAllInterceptors = function(type) {\n  if (type) {\n    this._interceptors[type] = [];\n  } else {\n    this._interceptors = Object.create(null);\n  }\n\n  return this;\n};\n\n\n/**\n * Invokes all the interceptors of a certain type sequantially in\n *     reverse order. Works in a similar way to `$q.all`, except it\n *     respects the order of the functions.\n * @param {string} type Type of interceptors to be invoked.\n * @returns {!angular.$q.Promise<!MdPanelRef>}\n * @private\n */\nMdPanelRef.prototype._callInterceptors = function(type) {\n  var self = this;\n  var $q = self._$q;\n  var interceptors = self._interceptors && self._interceptors[type] || [];\n\n  return interceptors.reduceRight(function(promise, interceptor) {\n    var isPromiseLike = interceptor && angular.isFunction(interceptor.then);\n    var response = isPromiseLike ? interceptor : null;\n\n    /**\n    * For interceptors to reject/cancel subsequent portions of the chain, simply\n    * return a `$q.reject(<value>)`\n    */\n    return promise.then(function() {\n      if (!response) {\n        try {\n          response = interceptor(self);\n        } catch(e) {\n          response = $q.reject(e);\n        }\n      }\n\n     return response;\n    });\n  }, $q.resolve(self));\n};\n\n\n/**\n * Faster, more basic than angular.bind\n * http://jsperf.com/angular-bind-vs-custom-vs-native\n * @param {function} callback\n * @param {!Object} self\n * @return {function} Callback function with a bound self.\n */\nMdPanelRef.prototype._simpleBind = function(callback, self) {\n  return function(value) {\n    return callback.apply(self, value);\n  };\n};\n\n\n/**\n * @param {function} callback\n * @param {!Object} self\n * @return {function} Callback function with a self param.\n */\nMdPanelRef.prototype._done = function(callback, self) {\n  return function() {\n    callback(self);\n  };\n};\n\n\n/**\n * Adds a panel to a group if the panel does not exist within the group already.\n * A panel can only exist within a single group.\n * @param {string} groupName The name of the group.\n */\nMdPanelRef.prototype.addToGroup = function(groupName) {\n  if (!this._$mdPanel._groups[groupName]) {\n    this._$mdPanel.newPanelGroup(groupName);\n  }\n\n  var group = this._$mdPanel._groups[groupName];\n  var index = group.panels.indexOf(this);\n\n  if (index < 0) {\n    group.panels.push(this);\n  }\n};\n\n\n/**\n * Removes a panel from a group if the panel exists within that group. The group\n * must be created ahead of time.\n * @param {string} groupName The name of the group.\n */\nMdPanelRef.prototype.removeFromGroup = function(groupName) {\n  if (!this._$mdPanel._groups[groupName]) {\n    throw new Error('mdPanel: The group ' + groupName + ' does not exist.');\n  }\n\n  var group = this._$mdPanel._groups[groupName];\n  var index = group.panels.indexOf(this);\n\n  if (index > -1) {\n    group.panels.splice(index, 1);\n  }\n};\n\n\n/**\n * Possible default closeReasons for the close function.\n * @enum {string}\n */\nMdPanelRef.closeReasons = {\n  CLICK_OUTSIDE: 'clickOutsideToClose',\n  ESCAPE: 'escapeToClose',\n};\n\n\n/*****************************************************************************\n *                               MdPanelPosition                             *\n *****************************************************************************/\n\n\n/**\n * Position configuration object. To use, create an MdPanelPosition with the\n * desired properties, then pass the object as part of $mdPanel creation.\n *\n * Example:\n *\n * var panelPosition = new MdPanelPosition()\n *     .relativeTo(myButtonEl)\n *     .addPanelPosition(\n *       $mdPanel.xPosition.CENTER,\n *       $mdPanel.yPosition.ALIGN_TOPS\n *     );\n *\n * $mdPanel.create({\n *   position: panelPosition\n * });\n *\n * @param {!angular.$injector} $injector\n * @final @constructor\n */\nfunction MdPanelPosition($injector) {\n  /** @private @const {!angular.$window} */\n  this._$window = $injector.get('$window');\n\n  /** @private {boolean} */\n  this._isRTL = $injector.get('$mdUtil').bidi() === 'rtl';\n\n  /** @private @const {!angular.$mdConstant} */\n  this._$mdConstant = $injector.get('$mdConstant');\n\n  /** @private {boolean} */\n  this._absolute = false;\n\n  /** @private {!angular.JQLite} */\n  this._relativeToEl;\n\n  /** @private {string} */\n  this._top = '';\n\n  /** @private {string} */\n  this._bottom = '';\n\n  /** @private {string} */\n  this._left = '';\n\n  /** @private {string} */\n  this._right = '';\n\n  /** @private {!Array<string>} */\n  this._translateX = [];\n\n  /** @private {!Array<string>} */\n  this._translateY = [];\n\n  /** @private {!Array<{x:string, y:string}>} */\n  this._positions = [];\n\n  /** @private {?{x:string, y:string}} */\n  this._actualPosition;\n}\n\n\n/**\n * Possible values of xPosition.\n * @enum {string}\n */\nMdPanelPosition.xPosition = {\n  CENTER: 'center',\n  ALIGN_START: 'align-start',\n  ALIGN_END: 'align-end',\n  OFFSET_START: 'offset-start',\n  OFFSET_END: 'offset-end'\n};\n\n\n/**\n * Possible values of yPosition.\n * @enum {string}\n */\nMdPanelPosition.yPosition = {\n  CENTER: 'center',\n  ALIGN_TOPS: 'align-tops',\n  ALIGN_BOTTOMS: 'align-bottoms',\n  ABOVE: 'above',\n  BELOW: 'below'\n};\n\n\n/**\n * Possible values of absolute position.\n * @enum {string}\n */\nMdPanelPosition.absPosition = {\n  TOP: 'top',\n  RIGHT: 'right',\n  BOTTOM: 'bottom',\n  LEFT: 'left'\n};\n\n/**\n * Margin between the edges of a panel and the viewport.\n * @const {number}\n */\nMdPanelPosition.viewportMargin = 8;\n\n\n/**\n * Sets absolute positioning for the panel.\n * @return {!MdPanelPosition}\n */\nMdPanelPosition.prototype.absolute = function() {\n  this._absolute = true;\n  return this;\n};\n\n\n/**\n * Sets the value of a position for the panel. Clears any previously set\n * position.\n * @param {string} position Position to set\n * @param {string=} value Value of the position. Defaults to '0'.\n * @returns {!MdPanelPosition}\n * @private\n */\nMdPanelPosition.prototype._setPosition = function(position, value) {\n  if (position === MdPanelPosition.absPosition.RIGHT ||\n      position === MdPanelPosition.absPosition.LEFT) {\n    this._left = this._right = '';\n  } else if (\n      position === MdPanelPosition.absPosition.BOTTOM ||\n      position === MdPanelPosition.absPosition.TOP) {\n    this._top = this._bottom = '';\n  } else {\n    var positions = Object.keys(MdPanelPosition.absPosition).join()\n        .toLowerCase();\n\n    throw new Error('mdPanel: Position must be one of ' + positions + '.');\n  }\n\n  this['_' +  position] = angular.isString(value) ? value : '0';\n\n  return this;\n};\n\n\n/**\n * Sets the value of `top` for the panel. Clears any previously set vertical\n * position.\n * @param {string=} top Value of `top`. Defaults to '0'.\n * @returns {!MdPanelPosition}\n */\nMdPanelPosition.prototype.top = function(top) {\n  return this._setPosition(MdPanelPosition.absPosition.TOP, top);\n};\n\n\n/**\n * Sets the value of `bottom` for the panel. Clears any previously set vertical\n * position.\n * @param {string=} bottom Value of `bottom`. Defaults to '0'.\n * @returns {!MdPanelPosition}\n */\nMdPanelPosition.prototype.bottom = function(bottom) {\n  return this._setPosition(MdPanelPosition.absPosition.BOTTOM, bottom);\n};\n\n\n/**\n * Sets the panel to the start of the page - `left` if `ltr` or `right` for\n * `rtl`. Clears any previously set horizontal position.\n * @param {string=} start Value of position. Defaults to '0'.\n * @returns {!MdPanelPosition}\n */\nMdPanelPosition.prototype.start = function(start) {\n  var position = this._isRTL ? MdPanelPosition.absPosition.RIGHT : MdPanelPosition.absPosition.LEFT;\n  return this._setPosition(position, start);\n};\n\n\n/**\n * Sets the panel to the end of the page - `right` if `ltr` or `left` for `rtl`.\n * Clears any previously set horizontal position.\n * @param {string=} end Value of position. Defaults to '0'.\n * @returns {!MdPanelPosition}\n */\nMdPanelPosition.prototype.end = function(end) {\n  var position = this._isRTL ? MdPanelPosition.absPosition.LEFT : MdPanelPosition.absPosition.RIGHT;\n  return this._setPosition(position, end);\n};\n\n\n/**\n * Sets the value of `left` for the panel. Clears any previously set\n * horizontal position.\n * @param {string=} left Value of `left`. Defaults to '0'.\n * @returns {!MdPanelPosition}\n */\nMdPanelPosition.prototype.left = function(left) {\n  return this._setPosition(MdPanelPosition.absPosition.LEFT, left);\n};\n\n\n/**\n * Sets the value of `right` for the panel. Clears any previously set\n * horizontal position.\n * @param {string=} right Value of `right`. Defaults to '0'.\n * @returns {!MdPanelPosition}\n*/\nMdPanelPosition.prototype.right = function(right) {\n  return this._setPosition(MdPanelPosition.absPosition.RIGHT, right);\n};\n\n\n/**\n * Centers the panel horizontally in the viewport. Clears any previously set\n * horizontal position.\n * @returns {!MdPanelPosition}\n */\nMdPanelPosition.prototype.centerHorizontally = function() {\n  this._left = '50%';\n  this._right = '';\n  this._translateX = ['-50%'];\n  return this;\n};\n\n\n/**\n * Centers the panel vertically in the viewport. Clears any previously set\n * vertical position.\n * @returns {!MdPanelPosition}\n */\nMdPanelPosition.prototype.centerVertically = function() {\n  this._top = '50%';\n  this._bottom = '';\n  this._translateY = ['-50%'];\n  return this;\n};\n\n\n/**\n * Centers the panel horizontally and vertically in the viewport. This is\n * equivalent to calling both `centerHorizontally` and `centerVertically`.\n * Clears any previously set horizontal and vertical positions.\n * @returns {!MdPanelPosition}\n */\nMdPanelPosition.prototype.center = function() {\n  return this.centerHorizontally().centerVertically();\n};\n\n\n/**\n * Sets element for relative positioning.\n * @param {string|!Element|!angular.JQLite} element Query selector, DOM element,\n *     or angular element to set the panel relative to.\n * @returns {!MdPanelPosition}\n */\nMdPanelPosition.prototype.relativeTo = function(element) {\n  this._absolute = false;\n  this._relativeToEl = getElement(element);\n  return this;\n};\n\n\n/**\n * Sets the x and y positions for the panel relative to another element.\n * @param {string} xPosition must be one of the MdPanelPosition.xPosition\n *     values.\n * @param {string} yPosition must be one of the MdPanelPosition.yPosition\n *     values.\n * @returns {!MdPanelPosition}\n */\nMdPanelPosition.prototype.addPanelPosition = function(xPosition, yPosition) {\n  if (!this._relativeToEl) {\n    throw new Error('mdPanel: addPanelPosition can only be used with ' +\n        'relative positioning. Set relativeTo first.');\n  }\n\n  this._validateXPosition(xPosition);\n  this._validateYPosition(yPosition);\n\n  this._positions.push({\n      x: xPosition,\n      y: yPosition,\n  });\n  return this;\n};\n\n\n/**\n * Ensures that yPosition is a valid position name. Throw an exception if not.\n * @param {string} yPosition\n */\nMdPanelPosition.prototype._validateYPosition = function(yPosition) {\n  // empty is ok\n  if (yPosition == null) {\n      return;\n  }\n\n  var positionKeys = Object.keys(MdPanelPosition.yPosition);\n  var positionValues = [];\n  for (var key, i = 0; key = positionKeys[i]; i++) {\n    var position = MdPanelPosition.yPosition[key];\n    positionValues.push(position);\n\n    if (position === yPosition) {\n      return;\n    }\n  }\n\n  throw new Error('mdPanel: Panel y position only accepts the following ' +\n      'values:\\n' + positionValues.join(' | '));\n};\n\n\n/**\n * Ensures that xPosition is a valid position name. Throw an exception if not.\n * @param {string} xPosition\n */\nMdPanelPosition.prototype._validateXPosition = function(xPosition) {\n  // empty is ok\n  if (xPosition == null) {\n      return;\n  }\n\n  var positionKeys = Object.keys(MdPanelPosition.xPosition);\n  var positionValues = [];\n  for (var key, i = 0; key = positionKeys[i]; i++) {\n    var position = MdPanelPosition.xPosition[key];\n    positionValues.push(position);\n    if (position === xPosition) {\n      return;\n    }\n  }\n\n  throw new Error('mdPanel: Panel x Position only accepts the following ' +\n      'values:\\n' + positionValues.join(' | '));\n};\n\n\n/**\n * Sets the value of the offset in the x-direction. This will add to any\n * previously set offsets.\n * @param {string|function(MdPanelPosition): string} offsetX\n * @returns {!MdPanelPosition}\n */\nMdPanelPosition.prototype.withOffsetX = function(offsetX) {\n  this._translateX.push(offsetX);\n  return this;\n};\n\n\n/**\n * Sets the value of the offset in the y-direction. This will add to any\n * previously set offsets.\n * @param {string|function(MdPanelPosition): string} offsetY\n * @returns {!MdPanelPosition}\n */\nMdPanelPosition.prototype.withOffsetY = function(offsetY) {\n  this._translateY.push(offsetY);\n  return this;\n};\n\n\n/**\n * Gets the value of `top` for the panel.\n * @returns {string}\n */\nMdPanelPosition.prototype.getTop = function() {\n  return this._top;\n};\n\n\n/**\n * Gets the value of `bottom` for the panel.\n * @returns {string}\n */\nMdPanelPosition.prototype.getBottom = function() {\n  return this._bottom;\n};\n\n\n/**\n * Gets the value of `left` for the panel.\n * @returns {string}\n */\nMdPanelPosition.prototype.getLeft = function() {\n  return this._left;\n};\n\n\n/**\n * Gets the value of `right` for the panel.\n * @returns {string}\n */\nMdPanelPosition.prototype.getRight = function() {\n  return this._right;\n};\n\n\n/**\n * Gets the value of `transform` for the panel.\n * @returns {string}\n */\nMdPanelPosition.prototype.getTransform = function() {\n  var translateX = this._reduceTranslateValues('translateX', this._translateX);\n  var translateY = this._reduceTranslateValues('translateY', this._translateY);\n\n  // It's important to trim the result, because the browser will ignore the set\n  // operation if the string contains only whitespace.\n  return (translateX + ' ' + translateY).trim();\n};\n\n\n/**\n * Sets the `transform` value for a panel element.\n * @param {!angular.JQLite} panelEl\n * @returns {!angular.JQLite}\n * @private\n */\nMdPanelPosition.prototype._setTransform = function(panelEl) {\n  return panelEl.css(this._$mdConstant.CSS.TRANSFORM, this.getTransform());\n};\n\n\n/**\n * True if the panel is completely on-screen with this positioning; false\n * otherwise.\n * @param {!angular.JQLite} panelEl\n * @return {boolean}\n * @private\n */\nMdPanelPosition.prototype._isOnscreen = function(panelEl) {\n  // this works because we always use fixed positioning for the panel,\n  // which is relative to the viewport.\n  var left = parseInt(this.getLeft());\n  var top = parseInt(this.getTop());\n\n  if (this._translateX.length || this._translateY.length) {\n    var prefixedTransform = this._$mdConstant.CSS.TRANSFORM;\n    var offsets = getComputedTranslations(panelEl, prefixedTransform);\n    left += offsets.x;\n    top += offsets.y;\n  }\n\n  var right = left + panelEl[0].offsetWidth;\n  var bottom = top + panelEl[0].offsetHeight;\n\n  return (left >= 0) &&\n    (top >= 0) &&\n    (bottom <= this._$window.innerHeight) &&\n    (right <= this._$window.innerWidth);\n};\n\n\n/**\n * Gets the first x/y position that can fit on-screen.\n * @returns {{x: string, y: string}}\n */\nMdPanelPosition.prototype.getActualPosition = function() {\n  return this._actualPosition;\n};\n\n\n/**\n * Reduces a list of translate values to a string that can be used within\n * transform.\n * @param {string} translateFn\n * @param {!Array<string>} values\n * @returns {string}\n * @private\n */\nMdPanelPosition.prototype._reduceTranslateValues =\n    function(translateFn, values) {\n      return values.map(function(translation) {\n        // TODO(crisbeto): this should add the units after #9609 is merged.\n        var translationValue = angular.isFunction(translation) ?\n            translation(this) : translation;\n        return translateFn + '(' + translationValue + ')';\n      }, this).join(' ');\n    };\n\n\n/**\n * Sets the panel position based on the created panel element and best x/y\n * positioning.\n * @param {!angular.JQLite} panelEl\n * @private\n */\nMdPanelPosition.prototype._setPanelPosition = function(panelEl) {\n  // Remove the \"position adjusted\" class in case it has been added before.\n  panelEl.removeClass('_md-panel-position-adjusted');\n\n  // Only calculate the position if necessary.\n  if (this._absolute) {\n    this._setTransform(panelEl);\n    return;\n  }\n\n  if (this._actualPosition) {\n    this._calculatePanelPosition(panelEl, this._actualPosition);\n    this._setTransform(panelEl);\n    this._constrainToViewport(panelEl);\n    return;\n  }\n\n  for (var i = 0; i < this._positions.length; i++) {\n    this._actualPosition = this._positions[i];\n    this._calculatePanelPosition(panelEl, this._actualPosition);\n    this._setTransform(panelEl);\n\n    if (this._isOnscreen(panelEl)) {\n      return;\n    }\n  }\n\n  this._constrainToViewport(panelEl);\n};\n\n\n/**\n * Constrains a panel's position to the viewport.\n * @param {!angular.JQLite} panelEl\n * @private\n */\nMdPanelPosition.prototype._constrainToViewport = function(panelEl) {\n  var margin = MdPanelPosition.viewportMargin;\n  var initialTop = this._top;\n  var initialLeft = this._left;\n\n  if (this.getTop()) {\n    var top = parseInt(this.getTop());\n    var bottom = panelEl[0].offsetHeight + top;\n    var viewportHeight = this._$window.innerHeight;\n\n    if (top < margin) {\n      this._top = margin + 'px';\n    } else if (bottom > viewportHeight) {\n      this._top = top - (bottom - viewportHeight + margin) + 'px';\n    }\n  }\n\n  if (this.getLeft()) {\n    var left = parseInt(this.getLeft());\n    var right = panelEl[0].offsetWidth + left;\n    var viewportWidth = this._$window.innerWidth;\n\n    if (left < margin) {\n      this._left = margin + 'px';\n    } else if (right > viewportWidth) {\n      this._left = left - (right - viewportWidth + margin) + 'px';\n    }\n  }\n\n  // Class that can be used to re-style the panel if it was repositioned.\n  panelEl.toggleClass(\n    '_md-panel-position-adjusted',\n    this._top !== initialTop || this._left !== initialLeft\n  );\n};\n\n\n/**\n * Switches between 'start' and 'end'.\n * @param {string} position Horizontal position of the panel\n * @returns {string} Reversed position\n * @private\n */\nMdPanelPosition.prototype._reverseXPosition = function(position) {\n  if (position === MdPanelPosition.xPosition.CENTER) {\n    return;\n  }\n\n  var start = 'start';\n  var end = 'end';\n\n  return position.indexOf(start) > -1 ? position.replace(start, end) : position.replace(end, start);\n};\n\n\n/**\n * Handles horizontal positioning in rtl or ltr environments.\n * @param {string} position Horizontal position of the panel\n * @returns {string} The correct position according the page direction\n * @private\n */\nMdPanelPosition.prototype._bidi = function(position) {\n  return this._isRTL ? this._reverseXPosition(position) : position;\n};\n\n\n/**\n * Calculates the panel position based on the created panel element and the\n * provided positioning.\n * @param {!angular.JQLite} panelEl\n * @param {!{x:string, y:string}} position\n * @private\n */\nMdPanelPosition.prototype._calculatePanelPosition = function(panelEl, position) {\n\n  var panelBounds = panelEl[0].getBoundingClientRect();\n  var panelWidth = panelBounds.width;\n  var panelHeight = panelBounds.height;\n\n  var targetBounds = this._relativeToEl[0].getBoundingClientRect();\n\n  var targetLeft = targetBounds.left;\n  var targetRight = targetBounds.right;\n  var targetWidth = targetBounds.width;\n\n  switch (this._bidi(position.x)) {\n    case MdPanelPosition.xPosition.OFFSET_START:\n      this._left = targetLeft - panelWidth + 'px';\n      break;\n    case MdPanelPosition.xPosition.ALIGN_END:\n      this._left = targetRight - panelWidth + 'px';\n      break;\n    case MdPanelPosition.xPosition.CENTER:\n      var left = targetLeft + (0.5 * targetWidth) - (0.5 * panelWidth);\n      this._left = left + 'px';\n      break;\n    case MdPanelPosition.xPosition.ALIGN_START:\n      this._left = targetLeft + 'px';\n      break;\n    case MdPanelPosition.xPosition.OFFSET_END:\n      this._left = targetRight + 'px';\n      break;\n  }\n\n  var targetTop = targetBounds.top;\n  var targetBottom = targetBounds.bottom;\n  var targetHeight = targetBounds.height;\n\n  switch (position.y) {\n    case MdPanelPosition.yPosition.ABOVE:\n      this._top = targetTop - panelHeight + 'px';\n      break;\n    case MdPanelPosition.yPosition.ALIGN_BOTTOMS:\n      this._top = targetBottom - panelHeight + 'px';\n      break;\n    case MdPanelPosition.yPosition.CENTER:\n      var top = targetTop + (0.5 * targetHeight) - (0.5 * panelHeight);\n      this._top = top + 'px';\n      break;\n    case MdPanelPosition.yPosition.ALIGN_TOPS:\n      this._top = targetTop + 'px';\n      break;\n    case MdPanelPosition.yPosition.BELOW:\n      this._top = targetBottom + 'px';\n      break;\n  }\n};\n\n\n/*****************************************************************************\n *                               MdPanelAnimation                            *\n *****************************************************************************/\n\n\n/**\n * Animation configuration object. To use, create an MdPanelAnimation with the\n * desired properties, then pass the object as part of $mdPanel creation.\n *\n * Example:\n *\n * var panelAnimation = new MdPanelAnimation()\n *     .openFrom(myButtonEl)\n *     .closeTo('.my-button')\n *     .withAnimation($mdPanel.animation.SCALE);\n *\n * $mdPanel.create({\n *   animation: panelAnimation\n * });\n *\n * @param {!angular.$injector} $injector\n * @final @constructor\n */\nfunction MdPanelAnimation($injector) {\n  /** @private @const {!angular.$mdUtil} */\n  this._$mdUtil = $injector.get('$mdUtil');\n\n  /**\n   * @private {{element: !angular.JQLite|undefined, bounds: !DOMRect}|\n   *     undefined}\n   */\n  this._openFrom;\n\n  /**\n   * @private {{element: !angular.JQLite|undefined, bounds: !DOMRect}|\n   *     undefined}\n   */\n  this._closeTo;\n\n  /** @private {string|{open: string, close: string}} */\n  this._animationClass = '';\n\n  /** @private {number} */\n  this._openDuration;\n\n  /** @private {number} */\n  this._closeDuration;\n\n  /** @private {number|{open: number, close: number}} */\n  this._rawDuration;\n}\n\n\n/**\n * Possible default animations.\n * @enum {string}\n */\nMdPanelAnimation.animation = {\n  SLIDE: 'md-panel-animate-slide',\n  SCALE: 'md-panel-animate-scale',\n  FADE: 'md-panel-animate-fade'\n};\n\n\n/**\n * Specifies where to start the open animation. `openFrom` accepts a\n * click event object, query selector, DOM element, or a Rect object that\n * is used to determine the bounds. When passed a click event, the location\n * of the click will be used as the position to start the animation.\n * @param {string|!Element|!Event|{top: number, left: number}} openFrom\n * @returns {!MdPanelAnimation}\n */\nMdPanelAnimation.prototype.openFrom = function(openFrom) {\n  // Check if 'openFrom' is an Event.\n  openFrom = openFrom.target ? openFrom.target : openFrom;\n\n  this._openFrom = this._getPanelAnimationTarget(openFrom);\n\n  if (!this._closeTo) {\n    this._closeTo = this._openFrom;\n  }\n  return this;\n};\n\n\n/**\n * Specifies where to animate the panel close. `closeTo` accepts a\n * query selector, DOM element, or a Rect object that is used to determine\n * the bounds.\n * @param {string|!Element|{top: number, left: number}} closeTo\n * @returns {!MdPanelAnimation}\n */\nMdPanelAnimation.prototype.closeTo = function(closeTo) {\n  this._closeTo = this._getPanelAnimationTarget(closeTo);\n  return this;\n};\n\n\n/**\n * Specifies the duration of the animation in milliseconds.\n * @param {number|{open: number, close: number}} duration\n * @returns {!MdPanelAnimation}\n */\nMdPanelAnimation.prototype.duration = function(duration) {\n  if (duration) {\n    if (angular.isNumber(duration)) {\n      this._openDuration = this._closeDuration = toSeconds(duration);\n    } else if (angular.isObject(duration)) {\n      this._openDuration = toSeconds(duration.open);\n      this._closeDuration = toSeconds(duration.close);\n    }\n  }\n\n  // Save the original value so it can be passed to the backdrop.\n  this._rawDuration = duration;\n\n  return this;\n\n  function toSeconds(value) {\n    if (angular.isNumber(value)) return value / 1000;\n  }\n};\n\n\n/**\n * Returns the element and bounds for the animation target.\n * @param {string|!Element|{top: number, left: number}} location\n * @returns {{element: !angular.JQLite|undefined, bounds: !DOMRect}}\n * @private\n */\nMdPanelAnimation.prototype._getPanelAnimationTarget = function(location) {\n  if (angular.isDefined(location.top) || angular.isDefined(location.left)) {\n    return {\n      element: undefined,\n      bounds: {\n        top: location.top || 0,\n        left: location.left || 0\n      }\n    };\n  } else {\n    return this._getBoundingClientRect(getElement(location));\n  }\n};\n\n\n/**\n * Specifies the animation class.\n *\n * There are several default animations that can be used:\n * (MdPanelAnimation.animation)\n *   SLIDE: The panel slides in and out from the specified\n *        elements.\n *   SCALE: The panel scales in and out.\n *   FADE: The panel fades in and out.\n *\n * @param {string|{open: string, close: string}} cssClass\n * @returns {!MdPanelAnimation}\n */\nMdPanelAnimation.prototype.withAnimation = function(cssClass) {\n  this._animationClass = cssClass;\n  return this;\n};\n\n\n/**\n * Animate the panel open.\n * @param {!angular.JQLite} panelEl\n * @returns {!angular.$q.Promise} A promise that is resolved when the open\n *     animation is complete.\n */\nMdPanelAnimation.prototype.animateOpen = function(panelEl) {\n  var animator = this._$mdUtil.dom.animator;\n\n  this._fixBounds(panelEl);\n  var animationOptions = {};\n\n  // Include the panel transformations when calculating the animations.\n  var panelTransform = panelEl[0].style.transform || '';\n\n  var openFrom = animator.toTransformCss(panelTransform);\n  var openTo = animator.toTransformCss(panelTransform);\n\n  switch (this._animationClass) {\n    case MdPanelAnimation.animation.SLIDE:\n      // Slide should start with opacity: 1.\n      panelEl.css('opacity', '1');\n\n      animationOptions = {\n        transitionInClass: '_md-panel-animate-enter'\n      };\n\n      var openSlide = animator.calculateSlideToOrigin(\n              panelEl, this._openFrom) || '';\n      openFrom = animator.toTransformCss(openSlide + ' ' + panelTransform);\n      break;\n\n    case MdPanelAnimation.animation.SCALE:\n      animationOptions = {\n        transitionInClass: '_md-panel-animate-enter'\n      };\n\n      var openScale = animator.calculateZoomToOrigin(\n              panelEl, this._openFrom) || '';\n      openFrom = animator.toTransformCss(openScale + ' ' + panelTransform);\n      break;\n\n    case MdPanelAnimation.animation.FADE:\n      animationOptions = {\n        transitionInClass: '_md-panel-animate-enter'\n      };\n      break;\n\n    default:\n      if (angular.isString(this._animationClass)) {\n        animationOptions = {\n          transitionInClass: this._animationClass\n        };\n      } else {\n        animationOptions = {\n          transitionInClass: this._animationClass['open'],\n          transitionOutClass: this._animationClass['close'],\n        };\n      }\n  }\n\n  animationOptions.duration = this._openDuration;\n\n  return animator\n      .translate3d(panelEl, openFrom, openTo, animationOptions);\n};\n\n\n/**\n * Animate the panel close.\n * @param {!angular.JQLite} panelEl\n * @returns {!angular.$q.Promise} A promise that resolves when the close\n *     animation is complete.\n */\nMdPanelAnimation.prototype.animateClose = function(panelEl) {\n  var animator = this._$mdUtil.dom.animator;\n  var reverseAnimationOptions = {};\n\n  // Include the panel transformations when calculating the animations.\n  var panelTransform = panelEl[0].style.transform || '';\n\n  var closeFrom = animator.toTransformCss(panelTransform);\n  var closeTo = animator.toTransformCss(panelTransform);\n\n  switch (this._animationClass) {\n    case MdPanelAnimation.animation.SLIDE:\n      // Slide should start with opacity: 1.\n      panelEl.css('opacity', '1');\n      reverseAnimationOptions = {\n        transitionInClass: '_md-panel-animate-leave'\n      };\n\n      var closeSlide = animator.calculateSlideToOrigin(\n              panelEl, this._closeTo) || '';\n      closeTo = animator.toTransformCss(closeSlide + ' ' + panelTransform);\n      break;\n\n    case MdPanelAnimation.animation.SCALE:\n      reverseAnimationOptions = {\n        transitionInClass: '_md-panel-animate-scale-out _md-panel-animate-leave'\n      };\n\n      var closeScale = animator.calculateZoomToOrigin(\n              panelEl, this._closeTo) || '';\n      closeTo = animator.toTransformCss(closeScale + ' ' + panelTransform);\n      break;\n\n    case MdPanelAnimation.animation.FADE:\n      reverseAnimationOptions = {\n        transitionInClass: '_md-panel-animate-fade-out _md-panel-animate-leave'\n      };\n      break;\n\n    default:\n      if (angular.isString(this._animationClass)) {\n        reverseAnimationOptions = {\n          transitionOutClass: this._animationClass\n        };\n      } else {\n        reverseAnimationOptions = {\n          transitionInClass: this._animationClass['close'],\n          transitionOutClass: this._animationClass['open']\n        };\n      }\n  }\n\n  reverseAnimationOptions.duration = this._closeDuration;\n\n  return animator\n      .translate3d(panelEl, closeFrom, closeTo, reverseAnimationOptions);\n};\n\n\n/**\n * Set the height and width to match the panel if not provided.\n * @param {!angular.JQLite} panelEl\n * @private\n */\nMdPanelAnimation.prototype._fixBounds = function(panelEl) {\n  var panelWidth = panelEl[0].offsetWidth;\n  var panelHeight = panelEl[0].offsetHeight;\n\n  if (this._openFrom && this._openFrom.bounds.height == null) {\n    this._openFrom.bounds.height = panelHeight;\n  }\n  if (this._openFrom && this._openFrom.bounds.width == null) {\n    this._openFrom.bounds.width = panelWidth;\n  }\n  if (this._closeTo && this._closeTo.bounds.height == null) {\n    this._closeTo.bounds.height = panelHeight;\n  }\n  if (this._closeTo && this._closeTo.bounds.width == null) {\n    this._closeTo.bounds.width = panelWidth;\n  }\n};\n\n\n/**\n * Identify the bounding RECT for the target element.\n * @param {!angular.JQLite} element\n * @returns {{element: !angular.JQLite|undefined, bounds: !DOMRect}}\n * @private\n */\nMdPanelAnimation.prototype._getBoundingClientRect = function(element) {\n  if (element instanceof angular.element) {\n    return {\n      element: element,\n      bounds: element[0].getBoundingClientRect()\n    };\n  }\n};\n\n\n/*****************************************************************************\n *                                Util Methods                               *\n *****************************************************************************/\n\n\n/**\n * Returns the angular element associated with a css selector or element.\n * @param el {string|!angular.JQLite|!Element}\n * @returns {!angular.JQLite}\n */\nfunction getElement(el) {\n  var queryResult = angular.isString(el) ?\n      document.querySelector(el) : el;\n  return angular.element(queryResult);\n}\n\n\n/**\n * Gets the computed values for an element's translateX and translateY in px.\n * @param {!angular.JQLite|!Element} el\n * @param {string} property\n * @return {{x: number, y: number}}\n */\nfunction getComputedTranslations(el, property) {\n  // The transform being returned by `getComputedStyle` is in the format:\n  // `matrix(a, b, c, d, translateX, translateY)` if defined and `none`\n  // if the element doesn't have a transform.\n  var transform = getComputedStyle(el[0] || el)[property];\n  var openIndex = transform.indexOf('(');\n  var closeIndex = transform.lastIndexOf(')');\n  var output = { x: 0, y: 0 };\n\n  if (openIndex > -1 && closeIndex > -1) {\n    var parsedValues = transform\n      .substring(openIndex + 1, closeIndex)\n      .split(', ')\n      .slice(-2);\n\n    output.x = parseInt(parsedValues[0]);\n    output.y = parseInt(parsedValues[1]);\n  }\n\n  return output;\n}\n\n})(window, window.angular);"]}