{"version":3,"sources":["content.js"],"names":[],"mappings":";;AAAA;;;;;;AAMA,CAAC,UAAU,MAAV,EAAkB,OAAlB,EAA2B,SAA3B,EAAsC;AACvC;;AAEA;;;;;;;;AAOA,qBAAmB,SAAnB,IAAgC,CAAC,YAAD,CAAhC;AACA,UAAQ,MAAR,CAAe,6BAAf,EAA8C,CAC5C,eAD4C,CAA9C,EAGG,SAHH,CAGa,WAHb,EAG0B,kBAH1B;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,WAAS,kBAAT,CAA4B,UAA5B,EAAwC;AACtC,WAAO;AACL,gBAAU,GADL;AAEL,kBAAY,CAAC,QAAD,EAAW,UAAX,EAAuB,iBAAvB,CAFP;AAGL,YAAM,cAAS,KAAT,EAAgB,OAAhB,EAAyB;AAC7B,gBAAQ,QAAR,CAAiB,KAAjB,EAD6B,CACA;;AAE7B,mBAAW,OAAX;AACA,cAAM,UAAN,CAAiB,kBAAjB,EAAqC,OAArC;;AAEA,qBAAa,QAAQ,CAAR,CAAb;AACD;AAVI,KAAP;;AAaA,aAAS,iBAAT,CAA2B,MAA3B,EAAmC,QAAnC,EAA6C;AAC3C,WAAK,MAAL,GAAc,MAAd;AACA,WAAK,QAAL,GAAgB,QAAhB;AACD;AACF;;AAED,WAAS,YAAT,CAAsB,IAAtB,EAA4B;AAC1B;AACA;AACA;AACA;AACA,YAAQ,OAAR,CAAgB,IAAhB,EAAsB,EAAtB,CAAyB,eAAzB,EAA0C,UAAS,EAAT,EAAa;AACrD;AACA,UAAI,GAAG,OAAH,CAAW,IAAX,KAAoB,GAAxB,EAA6B;AAC7B;AACA,UAAI,GAAG,oBAAP,EAA6B;AAC7B,SAAG,oBAAH,GAA0B,IAA1B;;AAEA,UAAI,KAAK,SAAL,KAAmB,CAAvB,EAA0B;AACxB,aAAK,SAAL,GAAiB,CAAjB;AACD,OAFD,MAEO,IAAI,KAAK,YAAL,KAAsB,KAAK,SAAL,GAAiB,KAAK,YAAhD,EAA8D;AACnE,aAAK,SAAL,IAAkB,CAAlB;AACD;AACF,KAZD;AAaD;AAEA,CAhGD,EAgGG,MAhGH,EAgGW,OAAO,OAhGlB","file":"content-compiled.js","sourcesContent":["/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v1.1.1-master-f7ecb4f\n */\n(function( window, angular, undefined ){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.content\n *\n * @description\n * Scrollable content\n */\nmdContentDirective['$inject'] = [\"$mdTheming\"];\nangular.module('material.components.content', [\n  'material.core'\n])\n  .directive('mdContent', mdContentDirective);\n\n/**\n * @ngdoc directive\n * @name mdContent\n * @module material.components.content\n *\n * @restrict E\n *\n * @description\n *\n * The `<md-content>` directive is a container element useful for scrollable content. It achieves\n * this by setting the CSS `overflow` property to `auto` so that content can properly scroll.\n *\n * In general, `<md-content>` components are not designed to be nested inside one another. If\n * possible, it is better to make them siblings. This often results in a better user experience as\n * having nested scrollbars may confuse the user.\n *\n * ## Troubleshooting\n *\n * In some cases, you may wish to apply the `md-no-momentum` class to ensure that Safari's\n * momentum scrolling is disabled. Momentum scrolling can cause flickering issues while scrolling\n * SVG icons and some other components.\n *\n * Additionally, we now also offer the `md-no-flicker` class which can be applied to any element\n * and uses a Webkit-specific filter of `blur(0px)` that forces GPU rendering of all elements\n * inside (which eliminates the flicker on iOS devices).\n *\n * _<b>Note:</b> Forcing an element to render on the GPU can have unintended side-effects, especially\n * related to the z-index of elements. Please use with caution and only on the elements needed._\n *\n * @usage\n *\n * Add the `[layout-padding]` attribute to make the content padded.\n *\n * <hljs lang=\"html\">\n *  <md-content layout-padding>\n *      Lorem ipsum dolor sit amet, ne quod novum mei.\n *  </md-content>\n * </hljs>\n */\n\nfunction mdContentDirective($mdTheming) {\n  return {\n    restrict: 'E',\n    controller: ['$scope', '$element', ContentController],\n    link: function(scope, element) {\n      element.addClass('_md');     // private md component indicator for styling\n\n      $mdTheming(element);\n      scope.$broadcast('$mdContentLoaded', element);\n\n      iosScrollFix(element[0]);\n    }\n  };\n\n  function ContentController($scope, $element) {\n    this.$scope = $scope;\n    this.$element = $element;\n  }\n}\n\nfunction iosScrollFix(node) {\n  // IOS FIX:\n  // If we scroll where there is no more room for the webview to scroll,\n  // by default the webview itself will scroll up and down, this looks really\n  // bad.  So if we are scrolling to the very top or bottom, add/subtract one\n  angular.element(node).on('$md.pressdown', function(ev) {\n    // Only touch events\n    if (ev.pointer.type !== 't') return;\n    // Don't let a child content's touchstart ruin it for us.\n    if (ev.$materialScrollFixed) return;\n    ev.$materialScrollFixed = true;\n\n    if (node.scrollTop === 0) {\n      node.scrollTop = 1;\n    } else if (node.scrollHeight === node.scrollTop + node.offsetHeight) {\n      node.scrollTop -= 1;\n    }\n  });\n}\n\n})(window, window.angular);"]}