{"version":3,"sources":["autocomplete.js"],"names":[],"mappings":"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","file":"autocomplete-compiled.js","sourcesContent":["/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v1.1.1-master-f7ecb4f\n */\n(function( window, angular, undefined ){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.autocomplete\n */\n/*\n * @see js folder for autocomplete implementation\n */\nangular.module('material.components.autocomplete', [\n  'material.core',\n  'material.components.icon',\n  'material.components.virtualRepeat'\n]);\n\n\nMdAutocompleteCtrl['$inject'] = [\"$scope\", \"$element\", \"$mdUtil\", \"$mdConstant\", \"$mdTheming\", \"$window\", \"$animate\", \"$rootElement\", \"$attrs\", \"$q\", \"$log\", \"$mdLiveAnnouncer\"];angular\n    .module('material.components.autocomplete')\n    .controller('MdAutocompleteCtrl', MdAutocompleteCtrl);\n\nvar ITEM_HEIGHT   = 48,\n    MAX_ITEMS     = 5,\n    MENU_PADDING  = 8,\n    INPUT_PADDING = 2; // Padding provided by `md-input-container`\n\nfunction MdAutocompleteCtrl ($scope, $element, $mdUtil, $mdConstant, $mdTheming, $window,\n                             $animate, $rootElement, $attrs, $q, $log, $mdLiveAnnouncer) {\n\n  // Internal Variables.\n  var ctrl                 = this,\n      itemParts            = $scope.itemsExpr.split(/ in /i),\n      itemExpr             = itemParts[ 1 ],\n      elements             = null,\n      cache                = {},\n      noBlur               = false,\n      selectedItemWatchers = [],\n      hasFocus             = false,\n      fetchesInProgress    = 0,\n      enableWrapScroll     = null,\n      inputModelCtrl       = null,\n      debouncedOnResize    = $mdUtil.debounce(onWindowResize);\n\n  // Public Exported Variables with handlers\n  defineProperty('hidden', handleHiddenChange, true);\n\n  // Public Exported Variables\n  ctrl.scope      = $scope;\n  ctrl.parent     = $scope.$parent;\n  ctrl.itemName   = itemParts[ 0 ];\n  ctrl.matches    = [];\n  ctrl.loading    = false;\n  ctrl.hidden     = true;\n  ctrl.index      = null;\n  ctrl.id         = $mdUtil.nextUid();\n  ctrl.isDisabled = null;\n  ctrl.isRequired = null;\n  ctrl.isReadonly = null;\n  ctrl.hasNotFound = false;\n\n  // Public Exported Methods\n  ctrl.keydown                       = keydown;\n  ctrl.blur                          = blur;\n  ctrl.focus                         = focus;\n  ctrl.clear                         = clearValue;\n  ctrl.select                        = select;\n  ctrl.listEnter                     = onListEnter;\n  ctrl.listLeave                     = onListLeave;\n  ctrl.mouseUp                       = onMouseup;\n  ctrl.getCurrentDisplayValue        = getCurrentDisplayValue;\n  ctrl.registerSelectedItemWatcher   = registerSelectedItemWatcher;\n  ctrl.unregisterSelectedItemWatcher = unregisterSelectedItemWatcher;\n  ctrl.notFoundVisible               = notFoundVisible;\n  ctrl.loadingIsVisible              = loadingIsVisible;\n  ctrl.positionDropdown              = positionDropdown;\n\n  /**\n   * Report types to be used for the $mdLiveAnnouncer\n   * @enum {number} Unique flag id.\n   */\n  var ReportType = {\n    Count: 1,\n    Selected: 2\n  };\n\n  return init();\n\n  //-- initialization methods\n\n  /**\n   * Initialize the controller, setup watchers, gather elements\n   */\n  function init () {\n\n    $mdUtil.initOptionalProperties($scope, $attrs, {\n      searchText: '',\n      selectedItem: null,\n      clearButton: false\n    });\n\n    $mdTheming($element);\n    configureWatchers();\n    $mdUtil.nextTick(function () {\n\n      gatherElements();\n      moveDropdown();\n\n      // Forward all focus events to the input element when autofocus is enabled\n      if ($scope.autofocus) {\n        $element.on('focus', focusInputElement);\n      }\n    });\n  }\n\n  function updateModelValidators() {\n    if (!$scope.requireMatch || !inputModelCtrl) return;\n\n    inputModelCtrl.$setValidity('md-require-match', !!$scope.selectedItem || !$scope.searchText);\n  }\n\n  /**\n   * Calculates the dropdown's position and applies the new styles to the menu element\n   * @returns {*}\n   */\n  function positionDropdown () {\n    if (!elements) {\n      return $mdUtil.nextTick(positionDropdown, false, $scope);\n    }\n\n    var dropdownHeight = ($scope.dropdownItems || MAX_ITEMS) * ITEM_HEIGHT;\n\n    var hrect  = elements.wrap.getBoundingClientRect(),\n        vrect  = elements.snap.getBoundingClientRect(),\n        root   = elements.root.getBoundingClientRect(),\n        top    = vrect.bottom - root.top,\n        bot    = root.bottom - vrect.top,\n        left   = hrect.left - root.left,\n        width  = hrect.width,\n        offset = getVerticalOffset(),\n        position = $scope.dropdownPosition,\n        styles;\n\n    // Automatically determine dropdown placement based on available space in viewport.\n    if (!position) {\n      position = (top > bot && root.height - hrect.bottom - MENU_PADDING < dropdownHeight) ? 'top' : 'bottom';\n    }\n    // Adjust the width to account for the padding provided by `md-input-container`\n    if ($attrs.mdFloatingLabel) {\n      left += INPUT_PADDING;\n      width -= INPUT_PADDING * 2;\n    }\n    styles = {\n      left:     left + 'px',\n      minWidth: width + 'px',\n      maxWidth: Math.max(hrect.right - root.left, root.right - hrect.left) - MENU_PADDING + 'px'\n    };\n\n    if (position === 'top') {\n      styles.top       = 'auto';\n      styles.bottom    = bot + 'px';\n      styles.maxHeight = Math.min(dropdownHeight, hrect.top - root.top - MENU_PADDING) + 'px';\n    } else {\n      var bottomSpace = root.bottom - hrect.bottom - MENU_PADDING + $mdUtil.getViewportTop();\n\n      styles.top       = (top - offset) + 'px';\n      styles.bottom    = 'auto';\n      styles.maxHeight = Math.min(dropdownHeight, bottomSpace) + 'px';\n    }\n\n    elements.$.scrollContainer.css(styles);\n    $mdUtil.nextTick(correctHorizontalAlignment, false);\n\n    /**\n     * Calculates the vertical offset for floating label examples to account for ngMessages\n     * @returns {number}\n     */\n    function getVerticalOffset () {\n      var offset = 0;\n      var inputContainer = $element.find('md-input-container');\n      if (inputContainer.length) {\n        var input = inputContainer.find('input');\n        offset = inputContainer.prop('offsetHeight');\n        offset -= input.prop('offsetTop');\n        offset -= input.prop('offsetHeight');\n        // add in the height left up top for the floating label text\n        offset += inputContainer.prop('offsetTop');\n      }\n      return offset;\n    }\n\n    /**\n     * Makes sure that the menu doesn't go off of the screen on either side.\n     */\n    function correctHorizontalAlignment () {\n      var dropdown = elements.scrollContainer.getBoundingClientRect(),\n          styles   = {};\n      if (dropdown.right > root.right - MENU_PADDING) {\n        styles.left = (hrect.right - dropdown.width) + 'px';\n      }\n      elements.$.scrollContainer.css(styles);\n    }\n  }\n\n  /**\n   * Moves the dropdown menu to the body tag in order to avoid z-index and overflow issues.\n   */\n  function moveDropdown () {\n    if (!elements.$.root.length) return;\n    $mdTheming(elements.$.scrollContainer);\n    elements.$.scrollContainer.detach();\n    elements.$.root.append(elements.$.scrollContainer);\n    if ($animate.pin) $animate.pin(elements.$.scrollContainer, $rootElement);\n  }\n\n  /**\n   * Sends focus to the input element.\n   */\n  function focusInputElement () {\n    elements.input.focus();\n  }\n\n  /**\n   * Sets up any watchers used by autocomplete\n   */\n  function configureWatchers () {\n    var wait = parseInt($scope.delay, 10) || 0;\n\n    $attrs.$observe('disabled', function (value) { ctrl.isDisabled = $mdUtil.parseAttributeBoolean(value, false); });\n    $attrs.$observe('required', function (value) { ctrl.isRequired = $mdUtil.parseAttributeBoolean(value, false); });\n    $attrs.$observe('readonly', function (value) { ctrl.isReadonly = $mdUtil.parseAttributeBoolean(value, false); });\n\n    $scope.$watch('searchText', wait ? $mdUtil.debounce(handleSearchText, wait) : handleSearchText);\n    $scope.$watch('selectedItem', selectedItemChange);\n\n    angular.element($window).on('resize', debouncedOnResize);\n\n    $scope.$on('$destroy', cleanup);\n  }\n\n  /**\n   * Removes any events or leftover elements created by this controller\n   */\n  function cleanup () {\n    if (!ctrl.hidden) {\n      $mdUtil.enableScrolling();\n    }\n\n    angular.element($window).off('resize', debouncedOnResize);\n\n    if ( elements ){\n      var items = ['ul', 'scroller', 'scrollContainer', 'input'];\n      angular.forEach(items, function(key){\n        elements.$[key].remove();\n      });\n    }\n  }\n\n  /**\n   * Event handler to be called whenever the window resizes.\n   */\n  function onWindowResize() {\n    if (!ctrl.hidden) {\n      positionDropdown();\n    }\n  }\n\n  /**\n   * Gathers all of the elements needed for this controller\n   */\n  function gatherElements () {\n    elements = {\n      main:  $element[0],\n      scrollContainer: $element[0].querySelector('.md-virtual-repeat-container'),\n      scroller: $element[0].querySelector('.md-virtual-repeat-scroller'),\n      ul:    $element.find('ul')[0],\n      input: $element.find('input')[0],\n      wrap:  $element.find('md-autocomplete-wrap')[0],\n      root:  document.body\n    };\n\n    elements.li   = elements.ul.getElementsByTagName('li');\n    elements.snap = getSnapTarget();\n    elements.$    = getAngularElements(elements);\n\n    inputModelCtrl = elements.$.input.controller('ngModel');\n  }\n\n  /**\n   * Finds the element that the menu will base its position on\n   * @returns {*}\n   */\n  function getSnapTarget () {\n    for (var element = $element; element.length; element = element.parent()) {\n      if (angular.isDefined(element.attr('md-autocomplete-snap'))) return element[ 0 ];\n    }\n    return elements.wrap;\n  }\n\n  /**\n   * Gathers angular-wrapped versions of each element\n   * @param elements\n   * @returns {{}}\n   */\n  function getAngularElements (elements) {\n    var obj = {};\n    for (var key in elements) {\n      if (elements.hasOwnProperty(key)) obj[ key ] = angular.element(elements[ key ]);\n    }\n    return obj;\n  }\n\n  //-- event/change handlers\n\n  /**\n   * Handles changes to the `hidden` property.\n   * @param hidden\n   * @param oldHidden\n   */\n  function handleHiddenChange (hidden, oldHidden) {\n    if (!hidden && oldHidden) {\n      positionDropdown();\n\n      // Report in polite mode, because the screenreader should finish the default description of\n      // the input. element.\n      reportMessages(true, ReportType.Count | ReportType.Selected);\n\n      if (elements) {\n        $mdUtil.disableScrollAround(elements.ul);\n        enableWrapScroll = disableElementScrollEvents(angular.element(elements.wrap));\n      }\n    } else if (hidden && !oldHidden) {\n      $mdUtil.enableScrolling();\n\n      if (enableWrapScroll) {\n        enableWrapScroll();\n        enableWrapScroll = null;\n      }\n    }\n  }\n\n  /**\n   * Disables scrolling for a specific element\n   */\n  function disableElementScrollEvents(element) {\n\n    function preventDefault(e) {\n      e.preventDefault();\n    }\n\n    element.on('wheel', preventDefault);\n    element.on('touchmove', preventDefault);\n\n    return function() {\n      element.off('wheel', preventDefault);\n      element.off('touchmove', preventDefault);\n    };\n  }\n\n  /**\n   * When the user mouses over the dropdown menu, ignore blur events.\n   */\n  function onListEnter () {\n    noBlur = true;\n  }\n\n  /**\n   * When the user's mouse leaves the menu, blur events may hide the menu again.\n   */\n  function onListLeave () {\n    if (!hasFocus && !ctrl.hidden) elements.input.focus();\n    noBlur = false;\n    ctrl.hidden = shouldHide();\n  }\n\n  /**\n   * When the mouse button is released, send focus back to the input field.\n   */\n  function onMouseup () {\n    elements.input.focus();\n  }\n\n  /**\n   * Handles changes to the selected item.\n   * @param selectedItem\n   * @param previousSelectedItem\n   */\n  function selectedItemChange (selectedItem, previousSelectedItem) {\n\n    updateModelValidators();\n\n    if (selectedItem) {\n      getDisplayValue(selectedItem).then(function (val) {\n        $scope.searchText = val;\n        handleSelectedItemChange(selectedItem, previousSelectedItem);\n      });\n    } else if (previousSelectedItem && $scope.searchText) {\n      getDisplayValue(previousSelectedItem).then(function(displayValue) {\n        // Clear the searchText, when the selectedItem is set to null.\n        // Do not clear the searchText, when the searchText isn't matching with the previous\n        // selected item.\n        if (displayValue.toString().toLowerCase() === $scope.searchText.toLowerCase()) {\n          $scope.searchText = '';\n        }\n      });\n    }\n\n    if (selectedItem !== previousSelectedItem) announceItemChange();\n  }\n\n  /**\n   * Use the user-defined expression to announce changes each time a new item is selected\n   */\n  function announceItemChange () {\n    angular.isFunction($scope.itemChange) && $scope.itemChange(getItemAsNameVal($scope.selectedItem));\n  }\n\n  /**\n   * Use the user-defined expression to announce changes each time the search text is changed\n   */\n  function announceTextChange () {\n    angular.isFunction($scope.textChange) && $scope.textChange();\n  }\n\n  /**\n   * Calls any external watchers listening for the selected item.  Used in conjunction with\n   * `registerSelectedItemWatcher`.\n   * @param selectedItem\n   * @param previousSelectedItem\n   */\n  function handleSelectedItemChange (selectedItem, previousSelectedItem) {\n    selectedItemWatchers.forEach(function (watcher) { watcher(selectedItem, previousSelectedItem); });\n  }\n\n  /**\n   * Register a function to be called when the selected item changes.\n   * @param cb\n   */\n  function registerSelectedItemWatcher (cb) {\n    if (selectedItemWatchers.indexOf(cb) == -1) {\n      selectedItemWatchers.push(cb);\n    }\n  }\n\n  /**\n   * Unregister a function previously registered for selected item changes.\n   * @param cb\n   */\n  function unregisterSelectedItemWatcher (cb) {\n    var i = selectedItemWatchers.indexOf(cb);\n    if (i != -1) {\n      selectedItemWatchers.splice(i, 1);\n    }\n  }\n\n  /**\n   * Handles changes to the searchText property.\n   * @param searchText\n   * @param previousSearchText\n   */\n  function handleSearchText (searchText, previousSearchText) {\n    ctrl.index = getDefaultIndex();\n\n    // do nothing on init\n    if (searchText === previousSearchText) return;\n\n    updateModelValidators();\n\n    getDisplayValue($scope.selectedItem).then(function (val) {\n      // clear selected item if search text no longer matches it\n      if (searchText !== val) {\n        $scope.selectedItem = null;\n\n\n        // trigger change event if available\n        if (searchText !== previousSearchText) announceTextChange();\n\n        // cancel results if search text is not long enough\n        if (!isMinLengthMet()) {\n          ctrl.matches = [];\n\n          setLoading(false);\n          reportMessages(false, ReportType.Count);\n\n        } else {\n          handleQuery();\n        }\n      }\n    });\n\n  }\n\n  /**\n   * Handles input blur event, determines if the dropdown should hide.\n   */\n  function blur($event) {\n    hasFocus = false;\n\n    if (!noBlur) {\n      ctrl.hidden = shouldHide();\n      evalAttr('ngBlur', { $event: $event });\n    }\n  }\n\n  /**\n   * Force blur on input element\n   * @param forceBlur\n   */\n  function doBlur(forceBlur) {\n    if (forceBlur) {\n      noBlur = false;\n      hasFocus = false;\n    }\n    elements.input.blur();\n  }\n\n  /**\n   * Handles input focus event, determines if the dropdown should show.\n   */\n  function focus($event) {\n    hasFocus = true;\n\n    if (isSearchable() && isMinLengthMet()) {\n      handleQuery();\n    }\n\n    ctrl.hidden = shouldHide();\n\n    evalAttr('ngFocus', { $event: $event });\n  }\n\n  /**\n   * Handles keyboard input.\n   * @param event\n   */\n  function keydown (event) {\n    switch (event.keyCode) {\n      case $mdConstant.KEY_CODE.DOWN_ARROW:\n        if (ctrl.loading) return;\n        event.stopPropagation();\n        event.preventDefault();\n        ctrl.index   = Math.min(ctrl.index + 1, ctrl.matches.length - 1);\n        updateScroll();\n        reportMessages(false, ReportType.Selected);\n        break;\n      case $mdConstant.KEY_CODE.UP_ARROW:\n        if (ctrl.loading) return;\n        event.stopPropagation();\n        event.preventDefault();\n        ctrl.index   = ctrl.index < 0 ? ctrl.matches.length - 1 : Math.max(0, ctrl.index - 1);\n        updateScroll();\n        reportMessages(false, ReportType.Selected);\n        break;\n      case $mdConstant.KEY_CODE.TAB:\n        // If we hit tab, assume that we've left the list so it will close\n        onListLeave();\n\n        if (ctrl.hidden || ctrl.loading || ctrl.index < 0 || ctrl.matches.length < 1) return;\n        select(ctrl.index);\n        break;\n      case $mdConstant.KEY_CODE.ENTER:\n        if (ctrl.hidden || ctrl.loading || ctrl.index < 0 || ctrl.matches.length < 1) return;\n        if (hasSelection()) return;\n        event.stopPropagation();\n        event.preventDefault();\n        select(ctrl.index);\n        break;\n      case $mdConstant.KEY_CODE.ESCAPE:\n        event.preventDefault(); // Prevent browser from always clearing input\n        if (!shouldProcessEscape()) return;\n        event.stopPropagation();\n\n        clearSelectedItem();\n        if ($scope.searchText && hasEscapeOption('clear')) {\n          clearSearchText();\n        }\n\n        // Manually hide (needed for mdNotFound support)\n        ctrl.hidden = true;\n\n        if (hasEscapeOption('blur')) {\n          // Force the component to blur if they hit escape\n          doBlur(true);\n        }\n\n        break;\n      default:\n    }\n  }\n\n  //-- getters\n\n  /**\n   * Returns the minimum length needed to display the dropdown.\n   * @returns {*}\n   */\n  function getMinLength () {\n    return angular.isNumber($scope.minLength) ? $scope.minLength : 1;\n  }\n\n  /**\n   * Returns the display value for an item.\n   * @param item\n   * @returns {*}\n   */\n  function getDisplayValue (item) {\n    return $q.when(getItemText(item) || item).then(function(itemText) {\n      if (itemText && !angular.isString(itemText)) {\n        $log.warn('md-autocomplete: Could not resolve display value to a string. ' +\n          'Please check the `md-item-text` attribute.');\n      }\n\n      return itemText;\n    });\n\n    /**\n     * Getter function to invoke user-defined expression (in the directive)\n     * to convert your object to a single string.\n     */\n    function getItemText (item) {\n      return (item && $scope.itemText) ? $scope.itemText(getItemAsNameVal(item)) : null;\n    }\n  }\n\n  /**\n   * Returns the locals object for compiling item templates.\n   * @param item\n   * @returns {{}}\n   */\n  function getItemAsNameVal (item) {\n    if (!item) return undefined;\n\n    var locals = {};\n    if (ctrl.itemName) locals[ ctrl.itemName ] = item;\n\n    return locals;\n  }\n\n  /**\n   * Returns the default index based on whether or not autoselect is enabled.\n   * @returns {number}\n   */\n  function getDefaultIndex () {\n    return $scope.autoselect ? 0 : -1;\n  }\n\n  /**\n   * Sets the loading parameter and updates the hidden state.\n   * @param value {boolean} Whether or not the component is currently loading.\n   */\n  function setLoading(value) {\n    if (ctrl.loading != value) {\n      ctrl.loading = value;\n    }\n\n    // Always refresh the hidden variable as something else might have changed\n    ctrl.hidden = shouldHide();\n  }\n\n  /**\n   * Determines if the menu should be hidden.\n   * @returns {boolean}\n   */\n  function shouldHide () {\n    if (!isSearchable()) return true;    // Hide when not able to query\n    else return !shouldShow();            // Hide when the dropdown is not able to show.\n  }\n\n  /**\n   * Determines whether the autocomplete is able to query within the current state.\n   * @returns {boolean}\n   */\n  function isSearchable() {\n    if (ctrl.loading && !hasMatches()) return false; // No query when query is in progress.\n    else if (hasSelection()) return false;           // No query if there is already a selection\n    else if (!hasFocus) return false;                // No query if the input does not have focus\n    return true;\n  }\n\n  /**\n   * Determines if the escape keydown should be processed\n   * @returns {boolean}\n   */\n  function shouldProcessEscape() {\n    return hasEscapeOption('blur') || !ctrl.hidden || ctrl.loading || hasEscapeOption('clear') && $scope.searchText;\n  }\n\n  /**\n   * Determines if an escape option is set\n   * @returns {boolean}\n   */\n  function hasEscapeOption(option) {\n    return !$scope.escapeOptions || $scope.escapeOptions.toLowerCase().indexOf(option) !== -1;\n  }\n\n  /**\n   * Determines if the menu should be shown.\n   * @returns {boolean}\n   */\n  function shouldShow() {\n    return (isMinLengthMet() && hasMatches()) || notFoundVisible();\n  }\n\n  /**\n   * Returns true if the search text has matches.\n   * @returns {boolean}\n   */\n  function hasMatches() {\n    return ctrl.matches.length ? true : false;\n  }\n\n  /**\n   * Returns true if the autocomplete has a valid selection.\n   * @returns {boolean}\n   */\n  function hasSelection() {\n    return ctrl.scope.selectedItem ? true : false;\n  }\n\n  /**\n   * Returns true if the loading indicator is, or should be, visible.\n   * @returns {boolean}\n   */\n  function loadingIsVisible() {\n    return ctrl.loading && !hasSelection();\n  }\n\n  /**\n   * Returns the display value of the current item.\n   * @returns {*}\n   */\n  function getCurrentDisplayValue () {\n    return getDisplayValue(ctrl.matches[ ctrl.index ]);\n  }\n\n  /**\n   * Determines if the minimum length is met by the search text.\n   * @returns {*}\n   */\n  function isMinLengthMet () {\n    return ($scope.searchText || '').length >= getMinLength();\n  }\n\n  //-- actions\n\n  /**\n   * Defines a public property with a handler and a default value.\n   * @param key\n   * @param handler\n   * @param value\n   */\n  function defineProperty (key, handler, value) {\n    Object.defineProperty(ctrl, key, {\n      get: function () { return value; },\n      set: function (newValue) {\n        var oldValue = value;\n        value        = newValue;\n        handler(newValue, oldValue);\n      }\n    });\n  }\n\n  /**\n   * Selects the item at the given index.\n   * @param index\n   */\n  function select (index) {\n    //-- force form to update state for validation\n    $mdUtil.nextTick(function () {\n      getDisplayValue(ctrl.matches[ index ]).then(function (val) {\n        var ngModel = elements.$.input.controller('ngModel');\n        ngModel.$setViewValue(val);\n        ngModel.$render();\n      }).finally(function () {\n        $scope.selectedItem = ctrl.matches[ index ];\n        setLoading(false);\n      });\n    }, false);\n  }\n\n  /**\n   * Clears the searchText value and selected item.\n   */\n  function clearValue () {\n    clearSelectedItem();\n    clearSearchText();\n  }\n\n  /**\n   * Clears the selected item\n   */\n  function clearSelectedItem () {\n    // Reset our variables\n    ctrl.index = 0;\n    ctrl.matches = [];\n  }\n\n  /**\n   * Clears the searchText value\n   */\n  function clearSearchText () {\n    // Set the loading to true so we don't see flashes of content.\n    // The flashing will only occur when an async request is running.\n    // So the loading process will stop when the results had been retrieved.\n    setLoading(true);\n\n    $scope.searchText = '';\n\n    // Normally, triggering the change / input event is unnecessary, because the browser detects it properly.\n    // But some browsers are not detecting it properly, which means that we have to trigger the event.\n    // Using the `input` is not working properly, because for example IE11 is not supporting the `input` event.\n    // The `change` event is a good alternative and is supported by all supported browsers.\n    var eventObj = document.createEvent('CustomEvent');\n    eventObj.initCustomEvent('change', true, true, { value: '' });\n    elements.input.dispatchEvent(eventObj);\n\n    // For some reason, firing the above event resets the value of $scope.searchText if\n    // $scope.searchText has a space character at the end, so we blank it one more time and then\n    // focus.\n    elements.input.blur();\n    $scope.searchText = '';\n    elements.input.focus();\n  }\n\n  /**\n   * Fetches the results for the provided search text.\n   * @param searchText\n   */\n  function fetchResults (searchText) {\n    var items = $scope.$parent.$eval(itemExpr),\n        term  = searchText.toLowerCase(),\n        isList = angular.isArray(items),\n        isPromise = !!items.then; // Every promise should contain a `then` property\n\n    if (isList) onResultsRetrieved(items);\n    else if (isPromise) handleAsyncResults(items);\n\n    function handleAsyncResults(items) {\n      if ( !items ) return;\n\n      items = $q.when(items);\n      fetchesInProgress++;\n      setLoading(true);\n\n      $mdUtil.nextTick(function () {\n          items\n            .then(onResultsRetrieved)\n            .finally(function(){\n              if (--fetchesInProgress === 0) {\n                setLoading(false);\n              }\n            });\n      },true, $scope);\n    }\n\n    function onResultsRetrieved(matches) {\n      cache[term] = matches;\n\n      // Just cache the results if the request is now outdated.\n      // The request becomes outdated, when the new searchText has changed during the result fetching.\n      if ((searchText || '') !== ($scope.searchText || '')) {\n        return;\n      }\n\n      handleResults(matches);\n    }\n  }\n\n\n  /**\n   * Reports given message types to supported screenreaders.\n   * @param {boolean} isPolite Whether the announcement should be polite.\n   * @param {!number} types Message flags to be reported to the screenreader.\n   */\n  function reportMessages(isPolite, types) {\n\n    var politeness = isPolite ? 'polite' : 'assertive';\n    var messages = [];\n\n    if (types & ReportType.Selected && ctrl.index !== -1) {\n      messages.push(getCurrentDisplayValue());\n    }\n\n    if (types & ReportType.Count) {\n      messages.push($q.resolve(getCountMessage()));\n    }\n\n    $q.all(messages).then(function(data) {\n      $mdLiveAnnouncer.announce(data.join(' '), politeness);\n    });\n\n  }\n\n  /**\n   * Returns the ARIA message for how many results match the current query.\n   * @returns {*}\n   */\n  function getCountMessage () {\n    switch (ctrl.matches.length) {\n      case 0:\n        return 'There are no matches available.';\n      case 1:\n        return 'There is 1 match available.';\n      default:\n        return 'There are ' + ctrl.matches.length + ' matches available.';\n    }\n  }\n\n  /**\n   * Makes sure that the focused element is within view.\n   */\n  function updateScroll () {\n    if (!elements.li[0]) return;\n    var height = elements.li[0].offsetHeight,\n        top = height * ctrl.index,\n        bot = top + height,\n        hgt = elements.scroller.clientHeight,\n        scrollTop = elements.scroller.scrollTop;\n    if (top < scrollTop) {\n      scrollTo(top);\n    } else if (bot > scrollTop + hgt) {\n      scrollTo(bot - hgt);\n    }\n  }\n\n  function isPromiseFetching() {\n    return fetchesInProgress !== 0;\n  }\n\n  function scrollTo (offset) {\n    elements.$.scrollContainer.controller('mdVirtualRepeatContainer').scrollTo(offset);\n  }\n\n  function notFoundVisible () {\n    var textLength = (ctrl.scope.searchText || '').length;\n\n    return ctrl.hasNotFound && !hasMatches() && (!ctrl.loading || isPromiseFetching()) && textLength >= getMinLength() && (hasFocus || noBlur) && !hasSelection();\n  }\n\n  /**\n   * Starts the query to gather the results for the current searchText.  Attempts to return cached\n   * results first, then forwards the process to `fetchResults` if necessary.\n   */\n  function handleQuery () {\n    var searchText = $scope.searchText || '';\n    var term = searchText.toLowerCase();\n\n    // If caching is enabled and the current searchText is stored in the cache\n    if (!$scope.noCache && cache[term]) {\n      // The results should be handled as same as a normal un-cached request does.\n      handleResults(cache[term]);\n    } else {\n      fetchResults(searchText);\n    }\n\n    ctrl.hidden = shouldHide();\n  }\n\n  /**\n   * Handles the retrieved results by showing them in the autocompletes dropdown.\n   * @param results Retrieved results\n   */\n  function handleResults(results) {\n    ctrl.matches = results;\n    ctrl.hidden  = shouldHide();\n\n    // If loading is in progress, then we'll end the progress. This is needed for example,\n    // when the `clear` button was clicked, because there we always show the loading process, to prevent flashing.\n    if (ctrl.loading) setLoading(false);\n\n    if ($scope.selectOnMatch) selectItemOnMatch();\n\n    positionDropdown();\n    reportMessages(true, ReportType.Count);\n  }\n\n  /**\n   * If there is only one matching item and the search text matches its display value exactly,\n   * automatically select that item.  Note: This function is only called if the user uses the\n   * `md-select-on-match` flag.\n   */\n  function selectItemOnMatch () {\n    var searchText = $scope.searchText,\n        matches    = ctrl.matches,\n        item       = matches[ 0 ];\n    if (matches.length === 1) getDisplayValue(item).then(function (displayValue) {\n      var isMatching = searchText == displayValue;\n      if ($scope.matchInsensitive && !isMatching) {\n        isMatching = searchText.toLowerCase() == displayValue.toLowerCase();\n      }\n\n      if (isMatching) select(0);\n    });\n  }\n\n  /**\n   * Evaluates an attribute expression against the parent scope.\n   * @param {String} attr Name of the attribute to be evaluated.\n   * @param {Object?} locals Properties to be injected into the evaluation context.\n   */\n function evalAttr(attr, locals) {\n    if ($attrs[attr]) {\n      $scope.$parent.$eval($attrs[attr], locals || {});\n    }\n  }\n\n}\n\n\nMdAutocomplete['$inject'] = [\"$$mdSvgRegistry\"];angular\n    .module('material.components.autocomplete')\n    .directive('mdAutocomplete', MdAutocomplete);\n\n/**\n * @ngdoc directive\n * @name mdAutocomplete\n * @module material.components.autocomplete\n *\n * @description\n * `<md-autocomplete>` is a special input component with a drop-down of all possible matches to a\n *     custom query. This component allows you to provide real-time suggestions as the user types\n *     in the input area.\n *\n * To start, you will need to specify the required parameters and provide a template for your\n *     results. The content inside `md-autocomplete` will be treated as a template.\n *\n * In more complex cases, you may want to include other content such as a message to display when\n *     no matches were found.  You can do this by wrapping your template in `md-item-template` and\n *     adding a tag for `md-not-found`.  An example of this is shown below.\n *\n * To reset the displayed value you must clear both values for `md-search-text` and `md-selected-item`.\n *\n * ### Validation\n *\n * You can use `ng-messages` to include validation the same way that you would normally validate;\n *     however, if you want to replicate a standard input with a floating label, you will have to\n *     do the following:\n *\n * - Make sure that your template is wrapped in `md-item-template`\n * - Add your `ng-messages` code inside of `md-autocomplete`\n * - Add your validation properties to `md-autocomplete` (ie. `required`)\n * - Add a `name` to `md-autocomplete` (to be used on the generated `input`)\n *\n * There is an example below of how this should look.\n *\n * ### Notes\n * **Autocomplete Dropdown Items Rendering**\n *\n * The `md-autocomplete` uses the the <a ng-href=\"api/directive/mdVirtualRepeatContainer\">VirtualRepeat</a>\n * directive for displaying the results inside of the dropdown.<br/>\n *\n * > When encountering issues regarding the item template please take a look at the\n *   <a ng-href=\"api/directive/mdVirtualRepeatContainer\">VirtualRepeatContainer</a> documentation.\n *\n * **Autocomplete inside of a Virtual Repeat**\n *\n * When using the `md-autocomplete` directive inside of a\n * <a ng-href=\"api/directive/mdVirtualRepeatContainer\">VirtualRepeatContainer</a> the dropdown items might\n * not update properly, because caching of the results is enabled by default.\n *\n * The autocomplete will then show invalid dropdown items, because the VirtualRepeat only updates the\n * scope bindings, rather than re-creating the `md-autocomplete` and the previous cached results will be used.\n *\n * > To avoid such problems ensure that the autocomplete does not cache any results.\n *\n * <hljs lang=\"html\">\n *   <md-autocomplete\n *       md-no-cache=\"true\"\n *       md-selected-item=\"selectedItem\"\n *       md-items=\"item in items\"\n *       md-search-text=\"searchText\"\n *       md-item-text=\"item.display\">\n *     <span>{{ item.display }}</span>\n *   </md-autocomplete>\n * </hljs>\n *\n *\n *\n * @param {expression} md-items An expression in the format of `item in results` to iterate over\n *     matches for your search.<br/><br/>\n *     The `results` expression can be also a function, which returns the results synchronously\n *     or asynchronously (per Promise)\n * @param {expression=} md-selected-item-change An expression to be run each time a new item is\n *     selected\n * @param {expression=} md-search-text-change An expression to be run each time the search text\n *     updates\n * @param {expression=} md-search-text A model to bind the search query text to\n * @param {object=} md-selected-item A model to bind the selected item to\n * @param {expression=} md-item-text An expression that will convert your object to a single string.\n * @param {string=} placeholder Placeholder text that will be forwarded to the input.\n * @param {boolean=} md-no-cache Disables the internal caching that happens in autocomplete\n * @param {boolean=} ng-disabled Determines whether or not to disable the input field\n * @param {boolean=} md-require-match When set to true, the autocomplete will add a validator,\n *     which will evaluate to false, when no item is currently selected.\n * @param {number=} md-min-length Specifies the minimum length of text before autocomplete will\n *     make suggestions\n * @param {number=} md-delay Specifies the amount of time (in milliseconds) to wait before looking\n *     for results\n * @param {boolean=} md-clear-button Whether the clear button for the autocomplete input should show up or not.\n * @param {boolean=} md-autofocus If true, the autocomplete will be automatically focused when a `$mdDialog`,\n *     `$mdBottomsheet` or `$mdSidenav`, which contains the autocomplete, is opening. <br/><br/>\n *     Also the autocomplete will immediately focus the input element.\n * @param {boolean=} md-no-asterisk When present, asterisk will not be appended to the floating label\n * @param {boolean=} md-autoselect If set to true, the first item will be automatically selected\n *     in the dropdown upon open.\n * @param {string=} md-menu-class This will be applied to the dropdown menu for styling\n * @param {string=} md-floating-label This will add a floating label to autocomplete and wrap it in\n *     `md-input-container`\n * @param {string=} md-input-name The name attribute given to the input element to be used with\n *     FormController\n * @param {string=} md-select-on-focus When present the inputs text will be automatically selected\n *     on focus.\n * @param {string=} md-input-id An ID to be added to the input element\n * @param {number=} md-input-minlength The minimum length for the input's value for validation\n * @param {number=} md-input-maxlength The maximum length for the input's value for validation\n * @param {boolean=} md-select-on-match When set, autocomplete will automatically select exact\n *     the item if the search text is an exact match. <br/><br/>\n *     Exact match means that there is only one match showing up.\n * @param {boolean=} md-match-case-insensitive When set and using `md-select-on-match`, autocomplete\n *     will select on case-insensitive match\n * @param {string=} md-escape-options Override escape key logic. Default is `blur clear`.<br/>\n *     Options: `blur | clear`, `none`\n * @param {string=} md-dropdown-items Specifies the maximum amount of items to be shown in\n *     the dropdown.<br/><br/>\n *     When the dropdown doesn't fit into the viewport, the dropdown will shrink\n *     as less as possible.\n * @param {string=} md-dropdown-position Overrides the default dropdown position. Options: `top`, `bottom`.\n * @param {string=} ng-trim If set to false, the search text will be not trimmed automatically.\n *     Defaults to true.\n * @param {string=} ng-pattern Adds the pattern validator to the ngModel of the search text.\n *     [ngPattern Directive](https://docs.angularjs.org/api/ng/directive/ngPattern)\n *\n * @usage\n * ### Basic Example\n * <hljs lang=\"html\">\n *   <md-autocomplete\n *       md-selected-item=\"selectedItem\"\n *       md-search-text=\"searchText\"\n *       md-items=\"item in getMatches(searchText)\"\n *       md-item-text=\"item.display\">\n *     <span md-highlight-text=\"searchText\">{{item.display}}</span>\n *   </md-autocomplete>\n * </hljs>\n *\n * ### Example with \"not found\" message\n * <hljs lang=\"html\">\n * <md-autocomplete\n *     md-selected-item=\"selectedItem\"\n *     md-search-text=\"searchText\"\n *     md-items=\"item in getMatches(searchText)\"\n *     md-item-text=\"item.display\">\n *   <md-item-template>\n *     <span md-highlight-text=\"searchText\">{{item.display}}</span>\n *   </md-item-template>\n *   <md-not-found>\n *     No matches found.\n *   </md-not-found>\n * </md-autocomplete>\n * </hljs>\n *\n * In this example, our code utilizes `md-item-template` and `md-not-found` to specify the\n *     different parts that make up our component.\n *\n * ### Clear button for the input\n * By default, for floating label autocomplete's the clear button is not showing up\n * ([See specs](https://material.google.com/components/text-fields.html#text-fields-auto-complete-text-field))\n *\n * Nevertheless, developers are able to explicitly toggle the clear button for all types of autocomplete's.\n *\n * <hljs lang=\"html\">\n *   <md-autocomplete ... md-clear-button=\"true\"></md-autocomplete>\n *   <md-autocomplete ... md-clear-button=\"false\"></md-autocomplete>\n * </hljs>\n *\n * ### Example with validation\n * <hljs lang=\"html\">\n * <form name=\"autocompleteForm\">\n *   <md-autocomplete\n *       required\n *       md-input-name=\"autocomplete\"\n *       md-selected-item=\"selectedItem\"\n *       md-search-text=\"searchText\"\n *       md-items=\"item in getMatches(searchText)\"\n *       md-item-text=\"item.display\">\n *     <md-item-template>\n *       <span md-highlight-text=\"searchText\">{{item.display}}</span>\n *     </md-item-template>\n *     <div ng-messages=\"autocompleteForm.autocomplete.$error\">\n *       <div ng-message=\"required\">This field is required</div>\n *     </div>\n *   </md-autocomplete>\n * </form>\n * </hljs>\n *\n * In this example, our code utilizes `md-item-template` and `ng-messages` to specify\n *     input validation for the field.\n *\n * ### Asynchronous Results\n * The autocomplete items expression also supports promises, which will resolve with the query results.\n *\n * <hljs lang=\"js\">\n *   function AppController($scope, $http) {\n *     $scope.query = function(searchText) {\n *       return $http\n *         .get(BACKEND_URL + '/items/' + searchText)\n *         .then(function(data) {\n *           // Map the response object to the data object.\n *           return data;\n *         });\n *     };\n *   }\n * </hljs>\n *\n * <hljs lang=\"html\">\n *   <md-autocomplete\n *       md-selected-item=\"selectedItem\"\n *       md-search-text=\"searchText\"\n *       md-items=\"item in query(searchText)\">\n *     <md-item-template>\n *       <span md-highlight-text=\"searchText\">{{item}}</span>\n *     </md-item-template>\n * </md-autocomplete>\n * </hljs>\n *\n */\n\nfunction MdAutocomplete ($$mdSvgRegistry) {\n\n  return {\n    controller:   'MdAutocompleteCtrl',\n    controllerAs: '$mdAutocompleteCtrl',\n    scope:        {\n      inputName:        '@mdInputName',\n      inputMinlength:   '@mdInputMinlength',\n      inputMaxlength:   '@mdInputMaxlength',\n      searchText:       '=?mdSearchText',\n      selectedItem:     '=?mdSelectedItem',\n      itemsExpr:        '@mdItems',\n      itemText:         '&mdItemText',\n      placeholder:      '@placeholder',\n      noCache:          '=?mdNoCache',\n      requireMatch:     '=?mdRequireMatch',\n      selectOnMatch:    '=?mdSelectOnMatch',\n      matchInsensitive: '=?mdMatchCaseInsensitive',\n      itemChange:       '&?mdSelectedItemChange',\n      textChange:       '&?mdSearchTextChange',\n      minLength:        '=?mdMinLength',\n      delay:            '=?mdDelay',\n      autofocus:        '=?mdAutofocus',\n      floatingLabel:    '@?mdFloatingLabel',\n      autoselect:       '=?mdAutoselect',\n      menuClass:        '@?mdMenuClass',\n      inputId:          '@?mdInputId',\n      escapeOptions:    '@?mdEscapeOptions',\n      dropdownItems:    '=?mdDropdownItems',\n      dropdownPosition: '@?mdDropdownPosition',\n      clearButton:      '=?mdClearButton'\n    },\n    compile: function(tElement, tAttrs) {\n      var attributes = ['md-select-on-focus', 'md-no-asterisk', 'ng-trim', 'ng-pattern'];\n      var input = tElement.find('input');\n\n      attributes.forEach(function(attribute) {\n        var attrValue = tAttrs[tAttrs.$normalize(attribute)];\n\n        if (attrValue !== null) {\n          input.attr(attribute, attrValue);\n        }\n      });\n\n      return function(scope, element, attrs, ctrl) {\n        // Retrieve the state of using a md-not-found template by using our attribute, which will\n        // be added to the element in the template function.\n        ctrl.hasNotFound = !!element.attr('md-has-not-found');\n\n        // By default the inset autocomplete should show the clear button when not explicitly overwritten.\n        if (!angular.isDefined(attrs.mdClearButton) && !scope.floatingLabel) {\n          scope.clearButton = true;\n        }\n      }\n    },\n    template:     function (element, attr) {\n      var noItemsTemplate = getNoItemsTemplate(),\n          itemTemplate    = getItemTemplate(),\n          leftover        = element.html(),\n          tabindex        = attr.tabindex;\n\n      // Set our attribute for the link function above which runs later.\n      // We will set an attribute, because otherwise the stored variables will be trashed when\n      // removing the element is hidden while retrieving the template. For example when using ngIf.\n      if (noItemsTemplate) element.attr('md-has-not-found', true);\n\n      // Always set our tabindex of the autocomplete directive to -1, because our input\n      // will hold the actual tabindex.\n      element.attr('tabindex', '-1');\n\n      return '\\\n        <md-autocomplete-wrap\\\n            ng-class=\"{ \\'md-whiteframe-z1\\': !floatingLabel, \\\n                        \\'md-menu-showing\\': !$mdAutocompleteCtrl.hidden, \\\n                        \\'md-show-clear-button\\': !!clearButton }\">\\\n          ' + getInputElement() + '\\\n          ' + getClearButton() + '\\\n          <md-progress-linear\\\n              class=\"' + (attr.mdFloatingLabel ? 'md-inline' : '') + '\"\\\n              ng-if=\"$mdAutocompleteCtrl.loadingIsVisible()\"\\\n              md-mode=\"indeterminate\"></md-progress-linear>\\\n          <md-virtual-repeat-container\\\n              md-auto-shrink\\\n              md-auto-shrink-min=\"1\"\\\n              ng-mouseenter=\"$mdAutocompleteCtrl.listEnter()\"\\\n              ng-mouseleave=\"$mdAutocompleteCtrl.listLeave()\"\\\n              ng-mouseup=\"$mdAutocompleteCtrl.mouseUp()\"\\\n              ng-hide=\"$mdAutocompleteCtrl.hidden\"\\\n              class=\"md-autocomplete-suggestions-container md-whiteframe-z1\"\\\n              ng-class=\"{ \\'md-not-found\\': $mdAutocompleteCtrl.notFoundVisible() }\"\\\n              role=\"presentation\">\\\n            <ul class=\"md-autocomplete-suggestions\"\\\n                ng-class=\"::menuClass\"\\\n                id=\"ul-{{$mdAutocompleteCtrl.id}}\">\\\n              <li md-virtual-repeat=\"item in $mdAutocompleteCtrl.matches\"\\\n                  ng-class=\"{ selected: $index === $mdAutocompleteCtrl.index }\"\\\n                  ng-click=\"$mdAutocompleteCtrl.select($index)\"\\\n                  md-extra-name=\"$mdAutocompleteCtrl.itemName\">\\\n                  ' + itemTemplate + '\\\n                  </li>' + noItemsTemplate + '\\\n            </ul>\\\n          </md-virtual-repeat-container>\\\n        </md-autocomplete-wrap>';\n\n      function getItemTemplate() {\n        var templateTag = element.find('md-item-template').detach(),\n            html = templateTag.length ? templateTag.html() : element.html();\n        if (!templateTag.length) element.empty();\n        return '<md-autocomplete-parent-scope md-autocomplete-replace>' + html + '</md-autocomplete-parent-scope>';\n      }\n\n      function getNoItemsTemplate() {\n        var templateTag = element.find('md-not-found').detach(),\n            template = templateTag.length ? templateTag.html() : '';\n        return template\n            ? '<li ng-if=\"$mdAutocompleteCtrl.notFoundVisible()\"\\\n                         md-autocomplete-parent-scope>' + template + '</li>'\n            : '';\n\n      }\n\n      function getInputElement () {\n        if (attr.mdFloatingLabel) {\n          return '\\\n            <md-input-container ng-if=\"floatingLabel\">\\\n              <label>{{floatingLabel}}</label>\\\n              <input type=\"search\"\\\n                  ' + (tabindex != null ? 'tabindex=\"' + tabindex + '\"' : '') + '\\\n                  id=\"{{ inputId || \\'fl-input-\\' + $mdAutocompleteCtrl.id }}\"\\\n                  name=\"{{inputName}}\"\\\n                  autocomplete=\"off\"\\\n                  ng-required=\"$mdAutocompleteCtrl.isRequired\"\\\n                  ng-readonly=\"$mdAutocompleteCtrl.isReadonly\"\\\n                  ng-minlength=\"inputMinlength\"\\\n                  ng-maxlength=\"inputMaxlength\"\\\n                  ng-disabled=\"$mdAutocompleteCtrl.isDisabled\"\\\n                  ng-model=\"$mdAutocompleteCtrl.scope.searchText\"\\\n                  ng-model-options=\"{ allowInvalid: true }\"\\\n                  ng-keydown=\"$mdAutocompleteCtrl.keydown($event)\"\\\n                  ng-blur=\"$mdAutocompleteCtrl.blur($event)\"\\\n                  ng-focus=\"$mdAutocompleteCtrl.focus($event)\"\\\n                  aria-owns=\"ul-{{$mdAutocompleteCtrl.id}}\"\\\n                  aria-label=\"{{floatingLabel}}\"\\\n                  aria-autocomplete=\"list\"\\\n                  role=\"combobox\"\\\n                  aria-haspopup=\"true\"\\\n                  aria-activedescendant=\"\"\\\n                  aria-expanded=\"{{!$mdAutocompleteCtrl.hidden}}\"/>\\\n              <div md-autocomplete-parent-scope md-autocomplete-replace>' + leftover + '</div>\\\n            </md-input-container>';\n        } else {\n          return '\\\n            <input type=\"search\"\\\n                ' + (tabindex != null ? 'tabindex=\"' + tabindex + '\"' : '') + '\\\n                id=\"{{ inputId || \\'input-\\' + $mdAutocompleteCtrl.id }}\"\\\n                name=\"{{inputName}}\"\\\n                ng-if=\"!floatingLabel\"\\\n                autocomplete=\"off\"\\\n                ng-required=\"$mdAutocompleteCtrl.isRequired\"\\\n                ng-disabled=\"$mdAutocompleteCtrl.isDisabled\"\\\n                ng-readonly=\"$mdAutocompleteCtrl.isReadonly\"\\\n                ng-model=\"$mdAutocompleteCtrl.scope.searchText\"\\\n                ng-keydown=\"$mdAutocompleteCtrl.keydown($event)\"\\\n                ng-blur=\"$mdAutocompleteCtrl.blur($event)\"\\\n                ng-focus=\"$mdAutocompleteCtrl.focus($event)\"\\\n                placeholder=\"{{placeholder}}\"\\\n                aria-owns=\"ul-{{$mdAutocompleteCtrl.id}}\"\\\n                aria-label=\"{{placeholder}}\"\\\n                aria-autocomplete=\"list\"\\\n                role=\"combobox\"\\\n                aria-haspopup=\"true\"\\\n                aria-activedescendant=\"\"\\\n                aria-expanded=\"{{!$mdAutocompleteCtrl.hidden}}\"/>';\n        }\n      }\n\n      function getClearButton() {\n        return '' +\n          '<button ' +\n              'type=\"button\" ' +\n              'aria-label=\"Clear Input\" ' +\n              'tabindex=\"-1\" ' +\n              'ng-if=\"clearButton && $mdAutocompleteCtrl.scope.searchText && !$mdAutocompleteCtrl.isDisabled\" ' +\n              'ng-click=\"$mdAutocompleteCtrl.clear($event)\">' +\n            '<md-icon md-svg-src=\"' + $$mdSvgRegistry.mdClose + '\"></md-icon>' +\n          '</button>';\n        }\n    }\n  };\n}\n\n\nMdAutocompleteItemScopeDirective['$inject'] = [\"$compile\", \"$mdUtil\"];angular\n  .module('material.components.autocomplete')\n  .directive('mdAutocompleteParentScope', MdAutocompleteItemScopeDirective);\n\nfunction MdAutocompleteItemScopeDirective($compile, $mdUtil) {\n  return {\n    restrict: 'AE',\n    compile: compile,\n    terminal: true,\n    transclude: 'element'\n  };\n\n  function compile(tElement, tAttr, transclude) {\n    return function postLink(scope, element, attr) {\n      var ctrl = scope.$mdAutocompleteCtrl;\n      var newScope = ctrl.parent.$new();\n      var itemName = ctrl.itemName;\n\n      // Watch for changes to our scope's variables and copy them to the new scope\n      watchVariable('$index', '$index');\n      watchVariable('item', itemName);\n\n      // Ensure that $digest calls on our scope trigger $digest on newScope.\n      connectScopes();\n\n      // Link the element against newScope.\n      transclude(newScope, function(clone) {\n        element.after(clone);\n      });\n\n      /**\n       * Creates a watcher for variables that are copied from the parent scope\n       * @param variable\n       * @param alias\n       */\n      function watchVariable(variable, alias) {\n        newScope[alias] = scope[variable];\n\n        scope.$watch(variable, function(value) {\n          $mdUtil.nextTick(function() {\n            newScope[alias] = value;\n          });\n        });\n      }\n\n      /**\n       * Creates watchers on scope and newScope that ensure that for any\n       * $digest of scope, newScope is also $digested.\n       */\n      function connectScopes() {\n        var scopeDigesting = false;\n        var newScopeDigesting = false;\n\n        scope.$watch(function() {\n          if (newScopeDigesting || scopeDigesting) {\n            return;\n          }\n\n          scopeDigesting = true;\n          scope.$$postDigest(function() {\n            if (!newScopeDigesting) {\n              newScope.$digest();\n            }\n\n            scopeDigesting = newScopeDigesting = false;\n          });\n        });\n\n        newScope.$watch(function() {\n          newScopeDigesting = true;\n        });\n      }\n    };\n  }\n}\n\nMdHighlightCtrl['$inject'] = [\"$scope\", \"$element\", \"$attrs\"];angular\n    .module('material.components.autocomplete')\n    .controller('MdHighlightCtrl', MdHighlightCtrl);\n\nfunction MdHighlightCtrl ($scope, $element, $attrs) {\n  this.$scope = $scope;\n  this.$element = $element;\n  this.$attrs = $attrs;\n\n  // Cache the Regex to avoid rebuilding each time.\n  this.regex = null;\n}\n\nMdHighlightCtrl.prototype.init = function(unsafeTermFn, unsafeContentFn) {\n\n  this.flags = this.$attrs.mdHighlightFlags || '';\n\n  this.unregisterFn = this.$scope.$watch(function($scope) {\n    return {\n      term: unsafeTermFn($scope),\n      contentText: unsafeContentFn($scope)\n    };\n  }.bind(this), this.onRender.bind(this), true);\n\n  this.$element.on('$destroy', this.unregisterFn);\n};\n\n/**\n * Triggered once a new change has been recognized and the highlighted\n * text needs to be updated.\n */\nMdHighlightCtrl.prototype.onRender = function(state, prevState) {\n\n  var contentText = state.contentText;\n\n  /* Update the regex if it's outdated, because we don't want to rebuilt it constantly. */\n  if (this.regex === null || state.term !== prevState.term) {\n    this.regex = this.createRegex(state.term, this.flags);\n  }\n\n  /* If a term is available apply the regex to the content */\n  if (state.term) {\n    this.applyRegex(contentText);\n  } else {\n    this.$element.text(contentText);\n  }\n\n};\n\n/**\n * Decomposes the specified text into different tokens (whether match or not).\n * Breaking down the string guarantees proper XSS protection due to the native browser\n * escaping of unsafe text.\n */\nMdHighlightCtrl.prototype.applyRegex = function(text) {\n  var tokens = this.resolveTokens(text);\n\n  this.$element.empty();\n\n  tokens.forEach(function (token) {\n\n    if (token.isMatch) {\n      var tokenEl = angular.element('<span class=\"highlight\">').text(token.text);\n\n      this.$element.append(tokenEl);\n    } else {\n      this.$element.append(document.createTextNode(token));\n    }\n\n  }.bind(this));\n\n};\n\n  /**\n * Decomposes the specified text into different tokens by running the regex against the text.\n */\nMdHighlightCtrl.prototype.resolveTokens = function(string) {\n  var tokens = [];\n  var lastIndex = 0;\n\n  // Use replace here, because it supports global and single regular expressions at same time.\n  string.replace(this.regex, function(match, index) {\n    appendToken(lastIndex, index);\n\n    tokens.push({\n      text: match,\n      isMatch: true\n    });\n\n    lastIndex = index + match.length;\n  });\n\n  // Append the missing text as a token.\n  appendToken(lastIndex);\n\n  return tokens;\n\n  function appendToken(from, to) {\n    var targetText = string.slice(from, to);\n    targetText && tokens.push(targetText);\n  }\n};\n\n/** Creates a regex for the specified text with the given flags. */\nMdHighlightCtrl.prototype.createRegex = function(term, flags) {\n  var startFlag = '', endFlag = '';\n  var regexTerm = this.sanitizeRegex(term);\n\n  if (flags.indexOf('^') >= 0) startFlag = '^';\n  if (flags.indexOf('$') >= 0) endFlag = '$';\n\n  return new RegExp(startFlag + regexTerm + endFlag, flags.replace(/[$\\^]/g, ''));\n};\n\n/** Sanitizes a regex by removing all common RegExp identifiers */\nMdHighlightCtrl.prototype.sanitizeRegex = function(term) {\n  return term && term.toString().replace(/[\\\\\\^\\$\\*\\+\\?\\.\\(\\)\\|\\{}\\[\\]]/g, '\\\\$&');\n};\n\n\nMdHighlight['$inject'] = [\"$interpolate\", \"$parse\"];angular\n    .module('material.components.autocomplete')\n    .directive('mdHighlightText', MdHighlight);\n\n/**\n * @ngdoc directive\n * @name mdHighlightText\n * @module material.components.autocomplete\n *\n * @description\n * The `md-highlight-text` directive allows you to specify text that should be highlighted within\n *     an element.  Highlighted text will be wrapped in `<span class=\"highlight\"></span>` which can\n *     be styled through CSS.  Please note that child elements may not be used with this directive.\n *\n * @param {string} md-highlight-text A model to be searched for\n * @param {string=} md-highlight-flags A list of flags (loosely based on JavaScript RexExp flags).\n * #### **Supported flags**:\n * - `g`: Find all matches within the provided text\n * - `i`: Ignore case when searching for matches\n * - `$`: Only match if the text ends with the search term\n * - `^`: Only match if the text begins with the search term\n *\n * @usage\n * <hljs lang=\"html\">\n * <input placeholder=\"Enter a search term...\" ng-model=\"searchTerm\" type=\"text\" />\n * <ul>\n *   <li ng-repeat=\"result in results\" md-highlight-text=\"searchTerm\">\n *     {{result.text}}\n *   </li>\n * </ul>\n * </hljs>\n */\n\nfunction MdHighlight ($interpolate, $parse) {\n  return {\n    terminal: true,\n    controller: 'MdHighlightCtrl',\n    compile: function mdHighlightCompile(tElement, tAttr) {\n      var termExpr = $parse(tAttr.mdHighlightText);\n      var unsafeContentExpr = $interpolate(tElement.html());\n\n      return function mdHighlightLink(scope, element, attr, ctrl) {\n        ctrl.init(termExpr, unsafeContentExpr);\n      };\n    }\n  };\n}\n\n})(window, window.angular);"]}