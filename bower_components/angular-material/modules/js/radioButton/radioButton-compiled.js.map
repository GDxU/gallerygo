{"version":3,"sources":["radioButton.js"],"names":[],"mappings":"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","file":"radioButton-compiled.js","sourcesContent":["/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v1.1.1-master-f7ecb4f\n */\n(function( window, angular, undefined ){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.radioButton\n * @description radioButton module!\n */\nmdRadioGroupDirective['$inject'] = [\"$mdUtil\", \"$mdConstant\", \"$mdTheming\", \"$timeout\"];\nmdRadioButtonDirective['$inject'] = [\"$mdAria\", \"$mdUtil\", \"$mdTheming\"];\nangular.module('material.components.radioButton', [\n  'material.core'\n])\n  .directive('mdRadioGroup', mdRadioGroupDirective)\n  .directive('mdRadioButton', mdRadioButtonDirective);\n\n/**\n * @ngdoc directive\n * @module material.components.radioButton\n * @name mdRadioGroup\n *\n * @restrict E\n *\n * @description\n * The `<md-radio-group>` directive identifies a grouping\n * container for the 1..n grouped radio buttons; specified using nested\n * `<md-radio-button>` tags.\n *\n * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)\n * the radio button is in the accent color by default. The primary color palette may be used with\n * the `md-primary` class.\n *\n * Note: `<md-radio-group>` and `<md-radio-button>` handle tabindex differently\n * than the native `<input type='radio'>` controls. Whereas the native controls\n * force the user to tab through all the radio buttons, `<md-radio-group>`\n * is focusable, and by default the `<md-radio-button>`s are not.\n *\n * @param {string} ng-model Assignable angular expression to data-bind to.\n * @param {boolean=} md-no-ink Use of attribute indicates flag to disable ink ripple effects.\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-radio-group ng-model=\"selected\">\n *\n *   <md-radio-button\n *        ng-repeat=\"d in colorOptions\"\n *        ng-value=\"d.value\" aria-label=\"{{ d.label }}\">\n *\n *          {{ d.label }}\n *\n *   </md-radio-button>\n *\n * </md-radio-group>\n * </hljs>\n *\n */\nfunction mdRadioGroupDirective($mdUtil, $mdConstant, $mdTheming, $timeout) {\n  RadioGroupController.prototype = createRadioGroupControllerProto();\n\n  return {\n    restrict: 'E',\n    controller: ['$element', RadioGroupController],\n    require: ['mdRadioGroup', '?ngModel'],\n    link: { pre: linkRadioGroup }\n  };\n\n  function linkRadioGroup(scope, element, attr, ctrls) {\n    element.addClass('_md');     // private md component indicator for styling\n    $mdTheming(element);\n\n    var rgCtrl = ctrls[0];\n    var ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel();\n\n    rgCtrl.init(ngModelCtrl);\n\n    scope.mouseActive = false;\n\n    element\n      .attr({\n        'role': 'radiogroup',\n        'tabIndex': element.attr('tabindex') || '0'\n      })\n      .on('keydown', keydownListener)\n      .on('mousedown', function(event) {\n        scope.mouseActive = true;\n        $timeout(function() {\n          scope.mouseActive = false;\n        }, 100);\n      })\n      .on('focus', function() {\n        if(scope.mouseActive === false) {\n          rgCtrl.$element.addClass('md-focused');\n        }\n      })\n      .on('blur', function() {\n        rgCtrl.$element.removeClass('md-focused');\n      });\n\n    /**\n     *\n     */\n    function setFocus() {\n      if (!element.hasClass('md-focused')) { element.addClass('md-focused'); }\n    }\n\n    /**\n     *\n     */\n    function keydownListener(ev) {\n      var keyCode = ev.which || ev.keyCode;\n\n      // Only listen to events that we originated ourselves\n      // so that we don't trigger on things like arrow keys in\n      // inputs.\n\n      if (keyCode != $mdConstant.KEY_CODE.ENTER &&\n          ev.currentTarget != ev.target) {\n        return;\n      }\n\n      switch (keyCode) {\n        case $mdConstant.KEY_CODE.LEFT_ARROW:\n        case $mdConstant.KEY_CODE.UP_ARROW:\n          ev.preventDefault();\n          rgCtrl.selectPrevious();\n          setFocus();\n          break;\n\n        case $mdConstant.KEY_CODE.RIGHT_ARROW:\n        case $mdConstant.KEY_CODE.DOWN_ARROW:\n          ev.preventDefault();\n          rgCtrl.selectNext();\n          setFocus();\n          break;\n\n        case $mdConstant.KEY_CODE.ENTER:\n          var form = angular.element($mdUtil.getClosest(element[0], 'form'));\n          if (form.length > 0) {\n            form.triggerHandler('submit');\n          }\n          break;\n      }\n\n    }\n  }\n\n  function RadioGroupController($element) {\n    this._radioButtonRenderFns = [];\n    this.$element = $element;\n  }\n\n  function createRadioGroupControllerProto() {\n    return {\n      init: function(ngModelCtrl) {\n        this._ngModelCtrl = ngModelCtrl;\n        this._ngModelCtrl.$render = angular.bind(this, this.render);\n      },\n      add: function(rbRender) {\n        this._radioButtonRenderFns.push(rbRender);\n      },\n      remove: function(rbRender) {\n        var index = this._radioButtonRenderFns.indexOf(rbRender);\n        if (index !== -1) {\n          this._radioButtonRenderFns.splice(index, 1);\n        }\n      },\n      render: function() {\n        this._radioButtonRenderFns.forEach(function(rbRender) {\n          rbRender();\n        });\n      },\n      setViewValue: function(value, eventType) {\n        this._ngModelCtrl.$setViewValue(value, eventType);\n        // update the other radio buttons as well\n        this.render();\n      },\n      getViewValue: function() {\n        return this._ngModelCtrl.$viewValue;\n      },\n      selectNext: function() {\n        return changeSelectedButton(this.$element, 1);\n      },\n      selectPrevious: function() {\n        return changeSelectedButton(this.$element, -1);\n      },\n      setActiveDescendant: function (radioId) {\n        this.$element.attr('aria-activedescendant', radioId);\n      },\n      isDisabled: function() {\n        return this.$element[0].hasAttribute('disabled');\n      }\n    };\n  }\n  /**\n   * Change the radio group's selected button by a given increment.\n   * If no button is selected, select the first button.\n   */\n  function changeSelectedButton(parent, increment) {\n    // Coerce all child radio buttons into an array, then wrap then in an iterator\n    var buttons = $mdUtil.iterator(parent[0].querySelectorAll('md-radio-button'), true);\n\n    if (buttons.count()) {\n      var validate = function (button) {\n        // If disabled, then NOT valid\n        return !angular.element(button).attr(\"disabled\");\n      };\n\n      var selected = parent[0].querySelector('md-radio-button.md-checked');\n      var target = buttons[increment < 0 ? 'previous' : 'next'](selected, validate) || buttons.first();\n\n      // Activate radioButton's click listener (triggerHandler won't create a real click event)\n      angular.element(target).triggerHandler('click');\n    }\n  }\n\n}\n\n/**\n * @ngdoc directive\n * @module material.components.radioButton\n * @name mdRadioButton\n *\n * @restrict E\n *\n * @description\n * The `<md-radio-button>`directive is the child directive required to be used within `<md-radio-group>` elements.\n *\n * While similar to the `<input type=\"radio\" ng-model=\"\" value=\"\">` directive,\n * the `<md-radio-button>` directive provides ink effects, ARIA support, and\n * supports use within named radio groups.\n *\n * @param {string} ngModel Assignable angular expression to data-bind to.\n * @param {string=} ngChange Angular expression to be executed when input changes due to user\n *    interaction with the input element.\n * @param {string} ngValue Angular expression which sets the value to which the expression should\n *    be set when selected.\n * @param {string} value The value to which the expression should be set when selected.\n * @param {string=} name Property name of the form under which the control is published.\n * @param {string=} aria-label Adds label to radio button for accessibility.\n * Defaults to radio button's text. If no text content is available, a warning will be logged.\n *\n * @usage\n * <hljs lang=\"html\">\n *\n * <md-radio-button value=\"1\" aria-label=\"Label 1\">\n *   Label 1\n * </md-radio-button>\n *\n * <md-radio-button ng-model=\"color\" ng-value=\"specialValue\" aria-label=\"Green\">\n *   Green\n * </md-radio-button>\n *\n * </hljs>\n *\n */\nfunction mdRadioButtonDirective($mdAria, $mdUtil, $mdTheming) {\n\n  var CHECKED_CSS = 'md-checked';\n\n  return {\n    restrict: 'E',\n    require: '^mdRadioGroup',\n    transclude: true,\n    template: '<div class=\"md-container\" md-ink-ripple md-ink-ripple-checkbox>' +\n                '<div class=\"md-off\"></div>' +\n                '<div class=\"md-on\"></div>' +\n              '</div>' +\n              '<div ng-transclude class=\"md-label\"></div>',\n    link: link\n  };\n\n  function link(scope, element, attr, rgCtrl) {\n    var lastChecked;\n\n    $mdTheming(element);\n    configureAria(element, scope);\n\n    // ngAria overwrites the aria-checked inside a $watch for ngValue.\n    // We should defer the initialization until all the watches have fired.\n    // This can also be fixed by removing the `lastChecked` check, but that'll\n    // cause more DOM manipulation on each digest.\n    if (attr.ngValue) {\n      $mdUtil.nextTick(initialize, false);\n    } else {\n      initialize();\n    }\n\n    /**\n     * Initializes the component.\n     */\n    function initialize() {\n      if (!rgCtrl) {\n        throw 'RadioButton: No RadioGroupController could be found.';\n      }\n\n      rgCtrl.add(render);\n      attr.$observe('value', render);\n\n      element\n        .on('click', listener)\n        .on('$destroy', function() {\n          rgCtrl.remove(render);\n        });\n    }\n\n    /**\n     * On click functionality.\n     */\n    function listener(ev) {\n      if (element[0].hasAttribute('disabled') || rgCtrl.isDisabled()) return;\n\n      scope.$apply(function() {\n        rgCtrl.setViewValue(attr.value, ev && ev.type);\n      });\n    }\n\n    /**\n     *  Add or remove the `.md-checked` class from the RadioButton (and conditionally its parent).\n     *  Update the `aria-activedescendant` attribute.\n     */\n    function render() {\n      var checked = rgCtrl.getViewValue() == attr.value;\n\n      if (checked === lastChecked) return;\n\n      if (element[0].parentNode.nodeName.toLowerCase() !== 'md-radio-group') {\n        // If the radioButton is inside a div, then add class so highlighting will work\n        element.parent().toggleClass(CHECKED_CSS, checked);\n      }\n\n      if (checked) {\n        rgCtrl.setActiveDescendant(element.attr('id'));\n      }\n\n      lastChecked = checked;\n\n      element\n        .attr('aria-checked', checked)\n        .toggleClass(CHECKED_CSS, checked);\n    }\n\n    /**\n     * Inject ARIA-specific attributes appropriate for each radio button\n     */\n    function configureAria(element, scope){\n      element.attr({\n        id: attr.id || 'radio_' + $mdUtil.nextUid(),\n        role: 'radio',\n        'aria-checked': 'false'\n      });\n\n      $mdAria.expectWithText(element, 'aria-label');\n    }\n  }\n}\n\n})(window, window.angular);"]}