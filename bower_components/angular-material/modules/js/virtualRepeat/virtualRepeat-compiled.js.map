{"version":3,"sources":["virtualRepeat.js"],"names":[],"mappings":"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","file":"virtualRepeat-compiled.js","sourcesContent":["/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v1.1.1-master-f7ecb4f\n */\n(function( window, angular, undefined ){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.virtualRepeat\n */\nVirtualRepeatContainerController['$inject'] = [\"$$rAF\", \"$mdUtil\", \"$mdConstant\", \"$parse\", \"$rootScope\", \"$window\", \"$scope\", \"$element\", \"$attrs\"];\nVirtualRepeatController['$inject'] = [\"$scope\", \"$element\", \"$attrs\", \"$browser\", \"$document\", \"$rootScope\", \"$$rAF\", \"$mdUtil\"];\nVirtualRepeatDirective['$inject'] = [\"$parse\"];\nangular.module('material.components.virtualRepeat', [\n  'material.core',\n  'material.components.showHide'\n])\n.directive('mdVirtualRepeatContainer', VirtualRepeatContainerDirective)\n.directive('mdVirtualRepeat', VirtualRepeatDirective);\n\n\n/**\n * @ngdoc directive\n * @name mdVirtualRepeatContainer\n * @module material.components.virtualRepeat\n * @restrict E\n * @description\n * `md-virtual-repeat-container` provides the scroll container for md-virtual-repeat.\n *\n * VirtualRepeat is a limited substitute for ng-repeat that renders only\n * enough DOM nodes to fill the container and recycling them as the user scrolls.\n *\n * Once an element is not visible anymore, the VirtualRepeat recycles it and will reuse it for\n * another visible item by replacing the previous dataset with the new one.\n *\n * ### Common Issues\n *\n * - When having one-time bindings inside of the view template, the VirtualRepeat will not properly\n *   update the bindings for new items, since the view will be recycled.\n *\n * - Directives inside of a VirtualRepeat will be only compiled (linked) once, because those\n *   are will be recycled items and used for other items.\n *   The VirtualRepeat just updates the scope bindings.\n *\n *\n * ### Notes\n *\n * > The VirtualRepeat is a similar implementation to the Android\n * [RecyclerView](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html)\n *\n * <!-- This comment forces a break between blockquotes //-->\n *\n * > Please also review the <a ng-href=\"api/directive/mdVirtualRepeat\">VirtualRepeat</a>\n * documentation for more information.\n *\n *\n * @usage\n * <hljs lang=\"html\">\n *\n * <md-virtual-repeat-container md-top-index=\"topIndex\">\n *   <div md-virtual-repeat=\"i in items\" md-item-size=\"20\">Hello {{i}}!</div>\n * </md-virtual-repeat-container>\n * </hljs>\n *\n * @param {number=} md-top-index Binds the index of the item that is at the top of the scroll\n *     container to $scope. It can both read and set the scroll position.\n * @param {boolean=} md-orient-horizontal Whether the container should scroll horizontally\n *     (defaults to orientation and scrolling vertically).\n * @param {boolean=} md-auto-shrink When present, the container will shrink to fit\n *     the number of items when that number is less than its original size.\n * @param {number=} md-auto-shrink-min Minimum number of items that md-auto-shrink\n *     will shrink to (default: 0).\n */\nfunction VirtualRepeatContainerDirective() {\n  return {\n    controller: VirtualRepeatContainerController,\n    template: virtualRepeatContainerTemplate,\n    compile: function virtualRepeatContainerCompile($element, $attrs) {\n      $element\n          .addClass('md-virtual-repeat-container')\n          .addClass($attrs.hasOwnProperty('mdOrientHorizontal')\n              ? 'md-orient-horizontal'\n              : 'md-orient-vertical');\n    }\n  };\n}\n\n\nfunction virtualRepeatContainerTemplate($element) {\n  return '<div class=\"md-virtual-repeat-scroller\">' +\n    '<div class=\"md-virtual-repeat-sizer\"></div>' +\n    '<div class=\"md-virtual-repeat-offsetter\">' +\n      $element[0].innerHTML +\n    '</div></div>';\n}\n\n/**\n * Number of additional elements to render above and below the visible area inside\n * of the virtual repeat container. A higher number results in less flicker when scrolling\n * very quickly in Safari, but comes with a higher rendering and dirty-checking cost.\n * @const {number}\n */\nvar NUM_EXTRA = 3;\n\n/** ngInject */\nfunction VirtualRepeatContainerController($$rAF, $mdUtil, $mdConstant, $parse, $rootScope, $window, $scope,\n                                          $element, $attrs) {\n  this.$rootScope = $rootScope;\n  this.$scope = $scope;\n  this.$element = $element;\n  this.$attrs = $attrs;\n\n  /** @type {number} The width or height of the container */\n  this.size = 0;\n  /** @type {number} The scroll width or height of the scroller */\n  this.scrollSize = 0;\n  /** @type {number} The scrollLeft or scrollTop of the scroller */\n  this.scrollOffset = 0;\n  /** @type {boolean} Whether the scroller is oriented horizontally */\n  this.horizontal = this.$attrs.hasOwnProperty('mdOrientHorizontal');\n  /** @type {!VirtualRepeatController} The repeater inside of this container */\n  this.repeater = null;\n  /** @type {boolean} Whether auto-shrink is enabled */\n  this.autoShrink = this.$attrs.hasOwnProperty('mdAutoShrink');\n  /** @type {number} Minimum number of items to auto-shrink to */\n  this.autoShrinkMin = parseInt(this.$attrs.mdAutoShrinkMin, 10) || 0;\n  /** @type {?number} Original container size when shrank */\n  this.originalSize = null;\n  /** @type {number} Amount to offset the total scroll size by. */\n  this.offsetSize = parseInt(this.$attrs.mdOffsetSize, 10) || 0;\n  /** @type {?string} height or width element style on the container prior to auto-shrinking. */\n  this.oldElementSize = null;\n  /** @type {!number} Maximum amount of pixels allowed for a single DOM element */\n  this.maxElementPixels = $mdConstant.ELEMENT_MAX_PIXELS;\n\n  if (this.$attrs.mdTopIndex) {\n    /** @type {function(angular.Scope): number} Binds to topIndex on Angular scope */\n    this.bindTopIndex = $parse(this.$attrs.mdTopIndex);\n    /** @type {number} The index of the item that is at the top of the scroll container */\n    this.topIndex = this.bindTopIndex(this.$scope);\n\n    if (!angular.isDefined(this.topIndex)) {\n      this.topIndex = 0;\n      this.bindTopIndex.assign(this.$scope, 0);\n    }\n\n    this.$scope.$watch(this.bindTopIndex, angular.bind(this, function(newIndex) {\n      if (newIndex !== this.topIndex) {\n        this.scrollToIndex(newIndex);\n      }\n    }));\n  } else {\n    this.topIndex = 0;\n  }\n\n  this.scroller = $element[0].querySelector('.md-virtual-repeat-scroller');\n  this.sizer = this.scroller.querySelector('.md-virtual-repeat-sizer');\n  this.offsetter = this.scroller.querySelector('.md-virtual-repeat-offsetter');\n\n  // After the dom stablizes, measure the initial size of the container and\n  // make a best effort at re-measuring as it changes.\n  var boundUpdateSize = angular.bind(this, this.updateSize);\n\n  $$rAF(angular.bind(this, function() {\n    boundUpdateSize();\n\n    var debouncedUpdateSize = $mdUtil.debounce(boundUpdateSize, 10, null, false);\n    var jWindow = angular.element($window);\n\n    // Make one more attempt to get the size if it is 0.\n    // This is not by any means a perfect approach, but there's really no\n    // silver bullet here.\n    if (!this.size) {\n      debouncedUpdateSize();\n    }\n\n    jWindow.on('resize', debouncedUpdateSize);\n    $scope.$on('$destroy', function() {\n      jWindow.off('resize', debouncedUpdateSize);\n    });\n\n    $scope.$emit('$md-resize-enable');\n    $scope.$on('$md-resize', boundUpdateSize);\n  }));\n}\n\n\n/** Called by the md-virtual-repeat inside of the container at startup. */\nVirtualRepeatContainerController.prototype.register = function(repeaterCtrl) {\n  this.repeater = repeaterCtrl;\n\n  angular.element(this.scroller)\n      .on('scroll wheel touchmove touchend', angular.bind(this, this.handleScroll_));\n};\n\n\n/** @return {boolean} Whether the container is configured for horizontal scrolling. */\nVirtualRepeatContainerController.prototype.isHorizontal = function() {\n  return this.horizontal;\n};\n\n\n/** @return {number} The size (width or height) of the container. */\nVirtualRepeatContainerController.prototype.getSize = function() {\n  return this.size;\n};\n\n\n/**\n * Resizes the container.\n * @private\n * @param {number} size The new size to set.\n */\nVirtualRepeatContainerController.prototype.setSize_ = function(size) {\n  var dimension = this.getDimensionName_();\n\n  this.size = size;\n  this.$element[0].style[dimension] = size + 'px';\n};\n\n\nVirtualRepeatContainerController.prototype.unsetSize_ = function() {\n  this.$element[0].style[this.getDimensionName_()] = this.oldElementSize;\n  this.oldElementSize = null;\n};\n\n\n/** Instructs the container to re-measure its size. */\nVirtualRepeatContainerController.prototype.updateSize = function() {\n  // If the original size is already determined, we can skip the update.\n  if (this.originalSize) return;\n\n  this.size = this.isHorizontal()\n      ? this.$element[0].clientWidth\n      : this.$element[0].clientHeight;\n\n  // Recheck the scroll position after updating the size. This resolves\n  // problems that can result if the scroll position was measured while the\n  // element was display: none or detached from the document.\n  this.handleScroll_();\n\n  this.repeater && this.repeater.containerUpdated();\n};\n\n\n/** @return {number} The container's scrollHeight or scrollWidth. */\nVirtualRepeatContainerController.prototype.getScrollSize = function() {\n  return this.scrollSize;\n};\n\n\nVirtualRepeatContainerController.prototype.getDimensionName_ = function() {\n  return this.isHorizontal() ? 'width' : 'height';\n};\n\n\n/**\n * Sets the scroller element to the specified size.\n * @private\n * @param {number} size The new size.\n */\nVirtualRepeatContainerController.prototype.sizeScroller_ = function(size) {\n  var dimension =  this.getDimensionName_();\n  var crossDimension = this.isHorizontal() ? 'height' : 'width';\n\n  // Clear any existing dimensions.\n  this.sizer.innerHTML = '';\n\n  // If the size falls within the browser's maximum explicit size for a single element, we can\n  // set the size and be done. Otherwise, we have to create children that add up the the desired\n  // size.\n  if (size < this.maxElementPixels) {\n    this.sizer.style[dimension] = size + 'px';\n  } else {\n    this.sizer.style[dimension] = 'auto';\n    this.sizer.style[crossDimension] = 'auto';\n\n    // Divide the total size we have to render into N max-size pieces.\n    var numChildren = Math.floor(size / this.maxElementPixels);\n\n    // Element template to clone for each max-size piece.\n    var sizerChild = document.createElement('div');\n    sizerChild.style[dimension] = this.maxElementPixels + 'px';\n    sizerChild.style[crossDimension] = '1px';\n\n    for (var i = 0; i < numChildren; i++) {\n      this.sizer.appendChild(sizerChild.cloneNode(false));\n    }\n\n    // Re-use the element template for the remainder.\n    sizerChild.style[dimension] = (size - (numChildren * this.maxElementPixels)) + 'px';\n    this.sizer.appendChild(sizerChild);\n  }\n};\n\n\n/**\n * If auto-shrinking is enabled, shrinks or unshrinks as appropriate.\n * @private\n * @param {number} size The new size.\n */\nVirtualRepeatContainerController.prototype.autoShrink_ = function(size) {\n  var shrinkSize = Math.max(size, this.autoShrinkMin * this.repeater.getItemSize());\n\n  if (this.autoShrink && shrinkSize !== this.size) {\n    if (this.oldElementSize === null) {\n      this.oldElementSize = this.$element[0].style[this.getDimensionName_()];\n    }\n\n    var currentSize = this.originalSize || this.size;\n\n    if (!currentSize || shrinkSize < currentSize) {\n      if (!this.originalSize) {\n        this.originalSize = this.size;\n      }\n\n      // Now we update the containers size, because shrinking is enabled.\n      this.setSize_(shrinkSize);\n    } else if (this.originalSize !== null) {\n      // Set the size back to our initial size.\n      this.unsetSize_();\n\n      var _originalSize = this.originalSize;\n      this.originalSize = null;\n\n      // We determine the repeaters size again, if the original size was zero.\n      // The originalSize needs to be null, to be able to determine the size.\n      if (!_originalSize) this.updateSize();\n\n      // Apply the original size or the determined size back to the container, because\n      // it has been overwritten before, in the shrink block.\n      this.setSize_(_originalSize || this.size);\n    }\n\n    this.repeater.containerUpdated();\n  }\n};\n\n\n/**\n * Sets the scrollHeight or scrollWidth. Called by the repeater based on\n * its item count and item size.\n * @param {number} itemsSize The total size of the items.\n */\nVirtualRepeatContainerController.prototype.setScrollSize = function(itemsSize) {\n  var size = itemsSize + this.offsetSize;\n  if (this.scrollSize === size) return;\n\n  this.sizeScroller_(size);\n  this.autoShrink_(size);\n  this.scrollSize = size;\n};\n\n\n/** @return {number} The container's current scroll offset. */\nVirtualRepeatContainerController.prototype.getScrollOffset = function() {\n  return this.scrollOffset;\n};\n\n/**\n * Scrolls to a given scrollTop position.\n * @param {number} position\n */\nVirtualRepeatContainerController.prototype.scrollTo = function(position) {\n  this.scroller[this.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = position;\n  this.handleScroll_();\n};\n\n/**\n * Scrolls the item with the given index to the top of the scroll container.\n * @param {number} index\n */\nVirtualRepeatContainerController.prototype.scrollToIndex = function(index) {\n  var itemSize = this.repeater.getItemSize();\n  var itemsLength = this.repeater.itemsLength;\n  if(index > itemsLength) {\n    index = itemsLength - 1;\n  }\n  this.scrollTo(itemSize * index);\n};\n\nVirtualRepeatContainerController.prototype.resetScroll = function() {\n  this.scrollTo(0);\n};\n\n\nVirtualRepeatContainerController.prototype.handleScroll_ = function() {\n  var ltr = document.dir != 'rtl' && document.body.dir != 'rtl';\n  if(!ltr && !this.maxSize) {\n    this.scroller.scrollLeft = this.scrollSize;\n    this.maxSize = this.scroller.scrollLeft;\n  }\n  var offset = this.isHorizontal() ?\n      (ltr?this.scroller.scrollLeft : this.maxSize - this.scroller.scrollLeft)\n      : this.scroller.scrollTop;\n  if (offset === this.scrollOffset || offset > this.scrollSize - this.size) return;\n\n  var itemSize = this.repeater.getItemSize();\n  if (!itemSize) return;\n\n  var numItems = Math.max(0, Math.floor(offset / itemSize) - NUM_EXTRA);\n\n  var transform = (this.isHorizontal() ? 'translateX(' : 'translateY(') +\n      (!this.isHorizontal() || ltr ? (numItems * itemSize) : - (numItems * itemSize))  + 'px)';\n\n  this.scrollOffset = offset;\n  this.offsetter.style.webkitTransform = transform;\n  this.offsetter.style.transform = transform;\n\n  if (this.bindTopIndex) {\n    var topIndex = Math.floor(offset / itemSize);\n    if (topIndex !== this.topIndex && topIndex < this.repeater.getItemCount()) {\n      this.topIndex = topIndex;\n      this.bindTopIndex.assign(this.$scope, topIndex);\n      if (!this.$rootScope.$$phase) this.$scope.$digest();\n    }\n  }\n\n  this.repeater.containerUpdated();\n};\n\n\n/**\n * @ngdoc directive\n * @name mdVirtualRepeat\n * @module material.components.virtualRepeat\n * @restrict A\n * @priority 1000\n * @description\n * `md-virtual-repeat` specifies an element to repeat using virtual scrolling.\n *\n * Virtual repeat is a limited substitute for ng-repeat that renders only\n * enough DOM nodes to fill the container and recycling them as the user scrolls.\n *\n * Arrays, but not objects are supported for iteration.\n * Track by, as alias, and (key, value) syntax are not supported.\n *\n * ### On-Demand Async Item Loading\n *\n * When using the `md-on-demand` attribute and loading some asynchronous data, the `getItemAtIndex` function will\n * mostly return nothing.\n *\n * <hljs lang=\"js\">\n *   DynamicItems.prototype.getItemAtIndex = function(index) {\n *     if (this.pages[index]) {\n *       return this.pages[index];\n *     } else {\n *       // This is an asynchronous action and does not return any value.\n *       this.loadPage(index);\n *     }\n *   };\n * </hljs>\n *\n * This means that the VirtualRepeat will not have any value for the given index.<br/>\n * After the data loading completed, the user expects the VirtualRepeat to recognize the change.\n *\n * To make sure that the VirtualRepeat properly detects any change, you need to run the operation\n * in another digest.\n *\n * <hljs lang=\"js\">\n *   DynamicItems.prototype.loadPage = function(index) {\n *     var self = this;\n *\n *     // Trigger a new digest by using $timeout\n *     $timeout(function() {\n *       self.pages[index] = Data;\n *     });\n *   };\n * </hljs>\n *\n * > <b>Note:</b> Please also review the\n *   <a ng-href=\"api/directive/mdVirtualRepeatContainer\">VirtualRepeatContainer</a> documentation\n *   for more information.\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-virtual-repeat-container>\n *   <div md-virtual-repeat=\"i in items\">Hello {{i}}!</div>\n * </md-virtual-repeat-container>\n *\n * <md-virtual-repeat-container md-orient-horizontal>\n *   <div md-virtual-repeat=\"i in items\" md-item-size=\"20\">Hello {{i}}!</div>\n * </md-virtual-repeat-container>\n * </hljs>\n *\n * @param {number=} md-item-size The height or width of the repeated elements (which must be\n *   identical for each element). Optional. Will attempt to read the size from the dom if missing,\n *   but still assumes that all repeated nodes have same height or width.\n * @param {string=} md-extra-name Evaluates to an additional name to which the current iterated item\n *   can be assigned on the repeated scope (needed for use in `md-autocomplete`).\n * @param {boolean=} md-on-demand When present, treats the md-virtual-repeat argument as an object\n *   that can fetch rows rather than an array.\n *\n *   **NOTE:** This object must implement the following interface with two (2) methods:\n *\n *   - `getItemAtIndex: function(index) [object]` The item at that index or null if it is not yet\n *     loaded (it should start downloading the item in that case).\n *   - `getLength: function() [number]` The data length to which the repeater container\n *     should be sized. Ideally, when the count is known, this method should return it.\n *     Otherwise, return a higher number than the currently loaded items to produce an\n *     infinite-scroll behavior.\n */\nfunction VirtualRepeatDirective($parse) {\n  return {\n    controller: VirtualRepeatController,\n    priority: 1000,\n    require: ['mdVirtualRepeat', '^^mdVirtualRepeatContainer'],\n    restrict: 'A',\n    terminal: true,\n    transclude: 'element',\n    compile: function VirtualRepeatCompile($element, $attrs) {\n      var expression = $attrs.mdVirtualRepeat;\n      var match = expression.match(/^\\s*([\\s\\S]+?)\\s+in\\s+([\\s\\S]+?)\\s*$/);\n      var repeatName = match[1];\n      var repeatListExpression = $parse(match[2]);\n      var extraName = $attrs.mdExtraName && $parse($attrs.mdExtraName);\n\n      return function VirtualRepeatLink($scope, $element, $attrs, ctrl, $transclude) {\n        ctrl[0].link_(ctrl[1], $transclude, repeatName, repeatListExpression, extraName);\n      };\n    }\n  };\n}\n\n\n/** ngInject */\nfunction VirtualRepeatController($scope, $element, $attrs, $browser, $document, $rootScope,\n    $$rAF, $mdUtil) {\n  this.$scope = $scope;\n  this.$element = $element;\n  this.$attrs = $attrs;\n  this.$browser = $browser;\n  this.$document = $document;\n  this.$rootScope = $rootScope;\n  this.$$rAF = $$rAF;\n\n  /** @type {boolean} Whether we are in on-demand mode. */\n  this.onDemand = $mdUtil.parseAttributeBoolean($attrs.mdOnDemand);\n  /** @type {!Function} Backup reference to $browser.$$checkUrlChange */\n  this.browserCheckUrlChange = $browser.$$checkUrlChange;\n  /** @type {number} Most recent starting repeat index (based on scroll offset) */\n  this.newStartIndex = 0;\n  /** @type {number} Most recent ending repeat index (based on scroll offset) */\n  this.newEndIndex = 0;\n  /** @type {number} Most recent end visible index (based on scroll offset) */\n  this.newVisibleEnd = 0;\n  /** @type {number} Previous starting repeat index (based on scroll offset) */\n  this.startIndex = 0;\n  /** @type {number} Previous ending repeat index (based on scroll offset) */\n  this.endIndex = 0;\n  // TODO: measure width/height of first element from dom if not provided.\n  // getComputedStyle?\n  /** @type {?number} Height/width of repeated elements. */\n  this.itemSize = $scope.$eval($attrs.mdItemSize) || null;\n\n  /** @type {boolean} Whether this is the first time that items are rendered. */\n  this.isFirstRender = true;\n\n  /**\n   * @private {boolean} Whether the items in the list are already being updated. Used to prevent\n   *     nested calls to virtualRepeatUpdate_.\n   */\n  this.isVirtualRepeatUpdating_ = false;\n\n  /** @type {number} Most recently seen length of items. */\n  this.itemsLength = 0;\n\n  /**\n   * @type {!Function} Unwatch callback for item size (when md-items-size is\n   *     not specified), or angular.noop otherwise.\n   */\n  this.unwatchItemSize_ = angular.noop;\n\n  /**\n   * Presently rendered blocks by repeat index.\n   * @type {Object<number, !VirtualRepeatController.Block}\n   */\n  this.blocks = {};\n  /** @type {Array<!VirtualRepeatController.Block>} A pool of presently unused blocks. */\n  this.pooledBlocks = [];\n\n  $scope.$on('$destroy', angular.bind(this, this.cleanupBlocks_));\n}\n\n\n/**\n * An object representing a repeated item.\n * @typedef {{element: !jqLite, new: boolean, scope: !angular.Scope}}\n */\nVirtualRepeatController.Block;\n\n\n/**\n * Called at startup by the md-virtual-repeat postLink function.\n * @param {!VirtualRepeatContainerController} container The container's controller.\n * @param {!Function} transclude The repeated element's bound transclude function.\n * @param {string} repeatName The left hand side of the repeat expression, indicating\n *     the name for each item in the array.\n * @param {!Function} repeatListExpression A compiled expression based on the right hand side\n *     of the repeat expression. Points to the array to repeat over.\n * @param {string|undefined} extraName The optional extra repeatName.\n */\nVirtualRepeatController.prototype.link_ =\n    function(container, transclude, repeatName, repeatListExpression, extraName) {\n  this.container = container;\n  this.transclude = transclude;\n  this.repeatName = repeatName;\n  this.rawRepeatListExpression = repeatListExpression;\n  this.extraName = extraName;\n  this.sized = false;\n\n  this.repeatListExpression = angular.bind(this, this.repeatListExpression_);\n\n  this.container.register(this);\n};\n\n\n/** @private Cleans up unused blocks. */\nVirtualRepeatController.prototype.cleanupBlocks_ = function() {\n  angular.forEach(this.pooledBlocks, function cleanupBlock(block) {\n    block.element.remove();\n  });\n};\n\n\n/** @private Attempts to set itemSize by measuring a repeated element in the dom */\nVirtualRepeatController.prototype.readItemSize_ = function() {\n  if (this.itemSize) {\n    // itemSize was successfully read in a different asynchronous call.\n    return;\n  }\n\n  this.items = this.repeatListExpression(this.$scope);\n  this.parentNode = this.$element[0].parentNode;\n  var block = this.getBlock_(0);\n  if (!block.element[0].parentNode) {\n    this.parentNode.appendChild(block.element[0]);\n  }\n\n  this.itemSize = block.element[0][\n      this.container.isHorizontal() ? 'offsetWidth' : 'offsetHeight'] || null;\n\n  this.blocks[0] = block;\n  this.poolBlock_(0);\n\n  if (this.itemSize) {\n    this.containerUpdated();\n  }\n};\n\n\n/**\n * Returns the user-specified repeat list, transforming it into an array-like\n * object in the case of infinite scroll/dynamic load mode.\n * @param {!angular.Scope} The scope.\n * @return {!Array|!Object} An array or array-like object for iteration.\n */\nVirtualRepeatController.prototype.repeatListExpression_ = function(scope) {\n  var repeatList = this.rawRepeatListExpression(scope);\n\n  if (this.onDemand && repeatList) {\n    var virtualList = new VirtualRepeatModelArrayLike(repeatList);\n    virtualList.$$includeIndexes(this.newStartIndex, this.newVisibleEnd);\n    return virtualList;\n  } else {\n    return repeatList;\n  }\n};\n\n\n/**\n * Called by the container. Informs us that the containers scroll or size has\n * changed.\n */\nVirtualRepeatController.prototype.containerUpdated = function() {\n  // If itemSize is unknown, attempt to measure it.\n  if (!this.itemSize) {\n    // Make sure to clean up watchers if we can (see #8178)\n    if(this.unwatchItemSize_ && this.unwatchItemSize_ !== angular.noop){\n      this.unwatchItemSize_();\n    }\n    this.unwatchItemSize_ = this.$scope.$watchCollection(\n        this.repeatListExpression,\n        angular.bind(this, function(items) {\n          if (items && items.length) {\n            this.readItemSize_();\n          }\n        }));\n    if (!this.$rootScope.$$phase) this.$scope.$digest();\n\n    return;\n  } else if (!this.sized) {\n    this.items = this.repeatListExpression(this.$scope);\n  }\n\n  if (!this.sized) {\n    this.unwatchItemSize_();\n    this.sized = true;\n    this.$scope.$watchCollection(this.repeatListExpression,\n        angular.bind(this, function(items, oldItems) {\n          if (!this.isVirtualRepeatUpdating_) {\n            this.virtualRepeatUpdate_(items, oldItems);\n          }\n        }));\n  }\n\n  this.updateIndexes_();\n\n  if (this.newStartIndex !== this.startIndex ||\n      this.newEndIndex !== this.endIndex ||\n      this.container.getScrollOffset() > this.container.getScrollSize()) {\n    if (this.items instanceof VirtualRepeatModelArrayLike) {\n      this.items.$$includeIndexes(this.newStartIndex, this.newEndIndex);\n    }\n    this.virtualRepeatUpdate_(this.items, this.items);\n  }\n};\n\n\n/**\n * Called by the container. Returns the size of a single repeated item.\n * @return {?number} Size of a repeated item.\n */\nVirtualRepeatController.prototype.getItemSize = function() {\n  return this.itemSize;\n};\n\n\n/**\n * Called by the container. Returns the size of a single repeated item.\n * @return {?number} Size of a repeated item.\n */\nVirtualRepeatController.prototype.getItemCount = function() {\n  return this.itemsLength;\n};\n\n\n/**\n * Updates the order and visible offset of repeated blocks in response to scrolling\n * or items updates.\n * @private\n */\nVirtualRepeatController.prototype.virtualRepeatUpdate_ = function(items, oldItems) {\n  this.isVirtualRepeatUpdating_ = true;\n\n  var itemsLength = items && items.length || 0;\n  var lengthChanged = false;\n\n  // If the number of items shrank, keep the scroll position.\n  if (this.items && itemsLength < this.items.length && this.container.getScrollOffset() !== 0) {\n    this.items = items;\n    var previousScrollOffset = this.container.getScrollOffset();\n    this.container.resetScroll();\n    this.container.scrollTo(previousScrollOffset);\n  }\n\n  if (itemsLength !== this.itemsLength) {\n    lengthChanged = true;\n    this.itemsLength = itemsLength;\n  }\n\n  this.items = items;\n  if (items !== oldItems || lengthChanged) {\n    this.updateIndexes_();\n  }\n\n  this.parentNode = this.$element[0].parentNode;\n\n  if (lengthChanged) {\n    this.container.setScrollSize(itemsLength * this.itemSize);\n  }\n\n  if (this.isFirstRender) {\n    this.isFirstRender = false;\n    var startIndex = this.$attrs.mdStartIndex ?\n      this.$scope.$eval(this.$attrs.mdStartIndex) :\n      this.container.topIndex;\n    this.container.scrollToIndex(startIndex);\n  }\n\n  // Detach and pool any blocks that are no longer in the viewport.\n  Object.keys(this.blocks).forEach(function(blockIndex) {\n    var index = parseInt(blockIndex, 10);\n    if (index < this.newStartIndex || index >= this.newEndIndex) {\n      this.poolBlock_(index);\n    }\n  }, this);\n\n  // Add needed blocks.\n  // For performance reasons, temporarily block browser url checks as we digest\n  // the restored block scopes ($$checkUrlChange reads window.location to\n  // check for changes and trigger route change, etc, which we don't need when\n  // trying to scroll at 60fps).\n  this.$browser.$$checkUrlChange = angular.noop;\n\n  var i, block,\n      newStartBlocks = [],\n      newEndBlocks = [];\n\n  // Collect blocks at the top.\n  for (i = this.newStartIndex; i < this.newEndIndex && this.blocks[i] == null; i++) {\n    block = this.getBlock_(i);\n    this.updateBlock_(block, i);\n    newStartBlocks.push(block);\n  }\n\n  // Update blocks that are already rendered.\n  for (; this.blocks[i] != null; i++) {\n    this.updateBlock_(this.blocks[i], i);\n  }\n  var maxIndex = i - 1;\n\n  // Collect blocks at the end.\n  for (; i < this.newEndIndex; i++) {\n    block = this.getBlock_(i);\n    this.updateBlock_(block, i);\n    newEndBlocks.push(block);\n  }\n\n  // Attach collected blocks to the document.\n  if (newStartBlocks.length) {\n    this.parentNode.insertBefore(\n        this.domFragmentFromBlocks_(newStartBlocks),\n        this.$element[0].nextSibling);\n  }\n  if (newEndBlocks.length) {\n    this.parentNode.insertBefore(\n        this.domFragmentFromBlocks_(newEndBlocks),\n        this.blocks[maxIndex] && this.blocks[maxIndex].element[0].nextSibling);\n  }\n\n  // Restore $$checkUrlChange.\n  this.$browser.$$checkUrlChange = this.browserCheckUrlChange;\n\n  this.startIndex = this.newStartIndex;\n  this.endIndex = this.newEndIndex;\n\n  this.isVirtualRepeatUpdating_ = false;\n};\n\n\n/**\n * @param {number} index Where the block is to be in the repeated list.\n * @return {!VirtualRepeatController.Block} A new or pooled block to place at the specified index.\n * @private\n */\nVirtualRepeatController.prototype.getBlock_ = function(index) {\n  if (this.pooledBlocks.length) {\n    return this.pooledBlocks.pop();\n  }\n\n  var block;\n  this.transclude(angular.bind(this, function(clone, scope) {\n    block = {\n      element: clone,\n      new: true,\n      scope: scope\n    };\n\n    this.updateScope_(scope, index);\n    this.parentNode.appendChild(clone[0]);\n  }));\n\n  return block;\n};\n\n\n/**\n * Updates and if not in a digest cycle, digests the specified block's scope to the data\n * at the specified index.\n * @param {!VirtualRepeatController.Block} block The block whose scope should be updated.\n * @param {number} index The index to set.\n * @private\n */\nVirtualRepeatController.prototype.updateBlock_ = function(block, index) {\n  this.blocks[index] = block;\n\n  if (!block.new &&\n      (block.scope.$index === index && block.scope[this.repeatName] === this.items[index])) {\n    return;\n  }\n  block.new = false;\n\n  // Update and digest the block's scope.\n  this.updateScope_(block.scope, index);\n\n  // Perform digest before reattaching the block.\n  // Any resulting synchronous dom mutations should be much faster as a result.\n  // This might break some directives, but I'm going to try it for now.\n  if (!this.$rootScope.$$phase) {\n    block.scope.$digest();\n  }\n};\n\n\n/**\n * Updates scope to the data at the specified index.\n * @param {!angular.Scope} scope The scope which should be updated.\n * @param {number} index The index to set.\n * @private\n */\nVirtualRepeatController.prototype.updateScope_ = function(scope, index) {\n  scope.$index = index;\n  scope[this.repeatName] = this.items && this.items[index];\n  if (this.extraName) scope[this.extraName(this.$scope)] = this.items[index];\n};\n\n\n/**\n * Pools the block at the specified index (Pulls its element out of the dom and stores it).\n * @param {number} index The index at which the block to pool is stored.\n * @private\n */\nVirtualRepeatController.prototype.poolBlock_ = function(index) {\n  this.pooledBlocks.push(this.blocks[index]);\n  this.parentNode.removeChild(this.blocks[index].element[0]);\n  delete this.blocks[index];\n};\n\n\n/**\n * Produces a dom fragment containing the elements from the list of blocks.\n * @param {!Array<!VirtualRepeatController.Block>} blocks The blocks whose elements\n *     should be added to the document fragment.\n * @return {DocumentFragment}\n * @private\n */\nVirtualRepeatController.prototype.domFragmentFromBlocks_ = function(blocks) {\n  var fragment = this.$document[0].createDocumentFragment();\n  blocks.forEach(function(block) {\n    fragment.appendChild(block.element[0]);\n  });\n  return fragment;\n};\n\n\n/**\n * Updates start and end indexes based on length of repeated items and container size.\n * @private\n */\nVirtualRepeatController.prototype.updateIndexes_ = function() {\n  var itemsLength = this.items ? this.items.length : 0;\n  var containerLength = Math.ceil(this.container.getSize() / this.itemSize);\n\n  this.newStartIndex = Math.max(0, Math.min(\n      itemsLength - containerLength,\n      Math.floor(this.container.getScrollOffset() / this.itemSize)));\n  this.newVisibleEnd = this.newStartIndex + containerLength + NUM_EXTRA;\n  this.newEndIndex = Math.min(itemsLength, this.newVisibleEnd);\n  this.newStartIndex = Math.max(0, this.newStartIndex - NUM_EXTRA);\n};\n\n/**\n * This VirtualRepeatModelArrayLike class enforces the interface requirements\n * for infinite scrolling within a mdVirtualRepeatContainer. An object with this\n * interface must implement the following interface with two (2) methods:\n *\n * getItemAtIndex: function(index) -> item at that index or null if it is not yet\n *     loaded (It should start downloading the item in that case).\n *\n * getLength: function() -> number The data legnth to which the repeater container\n *     should be sized. Ideally, when the count is known, this method should return it.\n *     Otherwise, return a higher number than the currently loaded items to produce an\n *     infinite-scroll behavior.\n *\n * @usage\n * <hljs lang=\"html\">\n *  <md-virtual-repeat-container md-orient-horizontal>\n *    <div md-virtual-repeat=\"i in items\" md-on-demand>\n *      Hello {{i}}!\n *    </div>\n *  </md-virtual-repeat-container>\n * </hljs>\n *\n */\nfunction VirtualRepeatModelArrayLike(model) {\n  if (!angular.isFunction(model.getItemAtIndex) ||\n      !angular.isFunction(model.getLength)) {\n    throw Error('When md-on-demand is enabled, the Object passed to md-virtual-repeat must implement ' +\n        'functions getItemAtIndex() and getLength() ');\n  }\n\n  this.model = model;\n}\n\n\nVirtualRepeatModelArrayLike.prototype.$$includeIndexes = function(start, end) {\n  for (var i = start; i < end; i++) {\n    if (!this.hasOwnProperty(i)) {\n      this[i] = this.model.getItemAtIndex(i);\n    }\n  }\n  this.length = this.model.getLength();\n};\n\n})(window, window.angular);"]}