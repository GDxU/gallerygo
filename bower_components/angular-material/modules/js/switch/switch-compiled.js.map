{"version":3,"sources":["switch.js"],"names":[],"mappings":"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","file":"switch-compiled.js","sourcesContent":["/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v1.1.1-master-f7ecb4f\n */\n(function( window, angular, undefined ){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.switch\n */\n\nMdSwitch['$inject'] = [\"mdCheckboxDirective\", \"$mdUtil\", \"$mdConstant\", \"$parse\", \"$$rAF\", \"$mdGesture\", \"$timeout\"];\nangular.module('material.components.switch', [\n  'material.core',\n  'material.components.checkbox'\n])\n  .directive('mdSwitch', MdSwitch);\n\n/**\n * @ngdoc directive\n * @module material.components.switch\n * @name mdSwitch\n * @restrict E\n *\n * The switch directive is used very much like the normal [angular checkbox](https://docs.angularjs.org/api/ng/input/input%5Bcheckbox%5D).\n *\n * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)\n * the switch is in the accent color by default. The primary color palette may be used with\n * the `md-primary` class.\n *\n * @param {string} ng-model Assignable angular expression to data-bind to.\n * @param {string=} name Property name of the form under which the control is published.\n * @param {expression=} ng-true-value The value to which the expression should be set when selected.\n * @param {expression=} ng-false-value The value to which the expression should be set when not selected.\n * @param {string=} ng-change Angular expression to be executed when input changes due to user interaction with the input element.\n * @param {expression=} ng-disabled En/Disable based on the expression.\n * @param {boolean=} md-no-ink Use of attribute indicates use of ripple ink effects.\n * @param {string=} aria-label Publish the button label used by screen-readers for accessibility. Defaults to the switch's text.\n * @param {boolean=} md-invert When set to true, the switch will be inverted.\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-switch ng-model=\"isActive\" aria-label=\"Finished?\">\n *   Finished ?\n * </md-switch>\n *\n * <md-switch md-no-ink ng-model=\"hasInk\" aria-label=\"No Ink Effects\">\n *   No Ink Effects\n * </md-switch>\n *\n * <md-switch ng-disabled=\"true\" ng-model=\"isDisabled\" aria-label=\"Disabled\">\n *   Disabled\n * </md-switch>\n *\n * </hljs>\n */\nfunction MdSwitch(mdCheckboxDirective, $mdUtil, $mdConstant, $parse, $$rAF, $mdGesture, $timeout) {\n  var checkboxDirective = mdCheckboxDirective[0];\n\n  return {\n    restrict: 'E',\n    priority: $mdConstant.BEFORE_NG_ARIA,\n    transclude: true,\n    template:\n      '<div class=\"md-container\">' +\n        '<div class=\"md-bar\"></div>' +\n        '<div class=\"md-thumb-container\">' +\n          '<div class=\"md-thumb\" md-ink-ripple md-ink-ripple-checkbox></div>' +\n        '</div>'+\n      '</div>' +\n      '<div ng-transclude class=\"md-label\"></div>',\n    require: '?ngModel',\n    compile: mdSwitchCompile\n  };\n\n  function mdSwitchCompile(element, attr) {\n    var checkboxLink = checkboxDirective.compile(element, attr).post;\n    // No transition on initial load.\n    element.addClass('md-dragging');\n\n    return function (scope, element, attr, ngModel) {\n      ngModel = ngModel || $mdUtil.fakeNgModel();\n\n      var disabledGetter = null;\n      if (attr.disabled != null) {\n        disabledGetter = function() { return true; };\n      } else if (attr.ngDisabled) {\n        disabledGetter = $parse(attr.ngDisabled);\n      }\n\n      var thumbContainer = angular.element(element[0].querySelector('.md-thumb-container'));\n      var switchContainer = angular.element(element[0].querySelector('.md-container'));\n      var labelContainer = angular.element(element[0].querySelector('.md-label'));\n\n      // no transition on initial load\n      $$rAF(function() {\n        element.removeClass('md-dragging');\n      });\n\n      checkboxLink(scope, element, attr, ngModel);\n\n      if (disabledGetter) {\n        scope.$watch(disabledGetter, function(isDisabled) {\n          element.attr('tabindex', isDisabled ? -1 : 0);\n        });\n      }\n\n      attr.$observe('mdInvert', function(newValue) {\n        var isInverted = $mdUtil.parseAttributeBoolean(newValue);\n\n        isInverted ? element.prepend(labelContainer) : element.prepend(switchContainer);\n\n        // Toggle a CSS class to update the margin.\n        element.toggleClass('md-inverted', isInverted);\n      });\n\n      // These events are triggered by setup drag\n      $mdGesture.register(switchContainer, 'drag');\n      switchContainer\n        .on('$md.dragstart', onDragStart)\n        .on('$md.drag', onDrag)\n        .on('$md.dragend', onDragEnd);\n\n      var drag;\n      function onDragStart(ev) {\n        // Don't go if the switch is disabled.\n        if (disabledGetter && disabledGetter(scope)) return;\n        ev.stopPropagation();\n\n        element.addClass('md-dragging');\n        drag = {width: thumbContainer.prop('offsetWidth')};\n      }\n\n      function onDrag(ev) {\n        if (!drag) return;\n        ev.stopPropagation();\n        ev.srcEvent && ev.srcEvent.preventDefault();\n\n        var percent = ev.pointer.distanceX / drag.width;\n\n        //if checked, start from right. else, start from left\n        var translate = ngModel.$viewValue ?  1 + percent : percent;\n        // Make sure the switch stays inside its bounds, 0-1%\n        translate = Math.max(0, Math.min(1, translate));\n\n        thumbContainer.css($mdConstant.CSS.TRANSFORM, 'translate3d(' + (100*translate) + '%,0,0)');\n        drag.translate = translate;\n      }\n\n      function onDragEnd(ev) {\n        if (!drag) return;\n        ev.stopPropagation();\n\n        element.removeClass('md-dragging');\n        thumbContainer.css($mdConstant.CSS.TRANSFORM, '');\n\n        // We changed if there is no distance (this is a click a click),\n        // or if the drag distance is >50% of the total.\n        var isChanged = ngModel.$viewValue ? drag.translate < 0.5 : drag.translate > 0.5;\n        if (isChanged) {\n          applyModelValue(!ngModel.$viewValue);\n        }\n        drag = null;\n\n        // Wait for incoming mouse click\n        scope.skipToggle = true;\n        $timeout(function() {\n          scope.skipToggle = false;\n        }, 1);\n      }\n\n      function applyModelValue(newValue) {\n        scope.$apply(function() {\n          ngModel.$setViewValue(newValue);\n          ngModel.$render();\n        });\n      }\n\n    };\n  }\n\n\n}\n\n})(window, window.angular);"]}