{"version":3,"sources":["chips.js"],"names":[],"mappings":";;AAAA;;;;;;AAMA,CAAC,UAAU,MAAV,EAAkB,OAAlB,EAA2B,SAA3B,EAAsC;AACvC;;AAEA;;;;AAIA;;;;AAGA,UAAQ,MAAR,CAAe,2BAAf,EAA4C,CAC1C,eAD0C,EAE1C,kCAF0C,CAA5C;;AAMA,aAAW,SAAX,IAAwB,CAAC,QAAD,EAAW,UAAX,EAAuB,aAAvB,EAAsC,UAAtC,EAAkD,SAAlD,CAAxB,CAAqF,QAClF,MADkF,CAC3E,2BAD2E,EAElF,UAFkF,CAEvE,YAFuE,EAEzD,UAFyD;;AAIrF;;;;;;;;;;;AAWA,WAAS,UAAT,CAAqB,MAArB,EAA6B,QAA7B,EAAuC,WAAvC,EAAoD,QAApD,EAA8D,OAA9D,EAAuE;AACrE;;;AAGA,SAAK,MAAL,GAAc,MAAd;;AAEA;;;AAGA,SAAK,QAAL,GAAgB,QAAhB;;AAEA;;;AAGA,SAAK,WAAL,GAAmB,WAAnB;;AAEA;;;AAGA,SAAK,QAAL,GAAgB,QAAhB;;AAEA;;;AAGA,SAAK,OAAL,GAAe,OAAf;;AAEA;;;AAGA,SAAK,UAAL,GAAkB,KAAlB;;AAEA;;;AAGA,SAAK,gBAAL,GAAwB,SAAxB;;AAEA;;;AAGA,SAAK,cAAL,GAAsB,KAAtB;AACD;;AAGD;;;AAGA,aAAW,SAAX,CAAqB,IAArB,GAA4B,UAAS,UAAT,EAAqB;AAC/C,SAAK,gBAAL,GAAwB,UAAxB;AACA,SAAK,cAAL,GAAsB,KAAK,gBAAL,CAAsB,cAA5C;;AAEA,QAAI,KAAK,cAAT,EAAyB;AACvB,WAAK,QAAL,CAAc,EAAd,CAAiB,SAAjB,EAA4B,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,CAA5B;AACA,WAAK,QAAL,CAAc,EAAd,CAAiB,WAAjB,EAA8B,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAA9B;AACA,WAAK,cAAL,GAAsB,QAAtB,CAA+B,kCAA/B;AACD;AACF,GATD;;AAYA;;;AAGA,aAAW,SAAX,CAAqB,cAArB,GAAsC,YAAW;AAC/C,QAAI,eAAe,KAAK,QAAL,CAAc,CAAd,EAAiB,sBAAjB,CAAwC,iBAAxC,CAAnB;AACA,WAAO,QAAQ,OAAR,CAAgB,aAAa,CAAb,CAAhB,CAAP;AACD,GAHD;;AAMA;;;AAGA,aAAW,SAAX,CAAqB,iBAArB,GAAyC,YAAW;AAClD,WAAO,QAAQ,OAAR,CAAgB,KAAK,cAAL,GAAsB,QAAtB,GAAiC,CAAjC,CAAhB,CAAP;AACD,GAFD;;AAKA;;;AAGA,aAAW,SAAX,CAAqB,YAArB,GAAoC,YAAW;AAC7C,WAAO,SAAS,KAAK,QAAL,CAAc,IAAd,CAAmB,OAAnB,CAAT,CAAP;AACD,GAFD;;AAKA;;;AAGA,aAAW,SAAX,CAAqB,eAArB,GAAuC,YAAW;AAChD,QAAI,CAAC,KAAK,UAAV,EAAsB;;AAEtB,SAAK,UAAL,GAAkB,KAAlB;AACA,SAAK,QAAL,CAAc,WAAd,CAA0B,kBAA1B;AACA,SAAK,cAAL,GAAsB,CAAtB,EAAyB,eAAzB,GAA2C,OAA3C;AACA,QAAI,YAAY,KAAK,YAAL,EAAhB;;AAEA,QAAI,UAAU,KAAK,iBAAL,GAAyB,IAAzB,EAAd;AACA,QAAI,OAAJ,EAAa;AACX,WAAK,gBAAL,CAAsB,kBAAtB,CACI,SADJ,EAEI,KAAK,iBAAL,GAAyB,IAAzB,EAFJ;;AAKA,WAAK,OAAL,CAAa,QAAb,CAAsB,YAAW;AAC/B,YAAI,KAAK,gBAAL,CAAsB,YAAtB,KAAuC,SAA3C,EAAsD;AACpD,eAAK,gBAAL,CAAsB,SAAtB,CAAgC,SAAhC;AACD;AACF,OAJqB,CAIpB,IAJoB,CAIf,IAJe,CAAtB;AAKD,KAXD,MAWO;AACL,WAAK,gBAAL,CAAsB,uBAAtB,CAA8C,SAA9C;AACD;AACF,GAvBD;;AA0BA;;;;AAIA,aAAW,SAAX,CAAqB,kBAArB,GAA0C,UAAS,IAAT,EAAe;AACvD,QAAI,KAAJ,EAAW,SAAX;AACA,QAAI,SAAS,IAAT,CAAc,eAAlB,EAAmC;AACjC,cAAQ,SAAS,IAAT,CAAc,eAAd,EAAR;AACA,YAAM,iBAAN,CAAwB,IAAxB;AACA,YAAM,MAAN;AACD,KAJD,MAIO,IAAI,OAAO,YAAX,EAAyB;AAC9B,kBAAY,OAAO,YAAP,EAAZ;AACA,cAAQ,SAAS,WAAT,EAAR;AACA,YAAM,kBAAN,CAAyB,IAAzB;AACA,gBAAU,eAAV;AACA,gBAAU,QAAV,CAAmB,KAAnB;AACD;AACF,GAbD;;AAgBA;;;AAGA,aAAW,SAAX,CAAqB,YAArB,GAAoC,YAAW;AAC7C,SAAK,UAAL,GAAkB,IAAlB;AACA,SAAK,QAAL,CAAc,QAAd,CAAuB,kBAAvB;AACA,SAAK,cAAL,GAAsB,CAAtB,EAAyB,eAAzB,GAA2C,MAA3C;AACA,SAAK,cAAL,GAAsB,EAAtB,CAAyB,MAAzB,EAAiC,YAAW;AAC1C,WAAK,eAAL;AACD,KAFgC,CAE/B,IAF+B,CAE1B,IAF0B,CAAjC;;AAIA,SAAK,kBAAL,CAAwB,KAAK,cAAL,GAAsB,CAAtB,CAAxB;AACD,GATD;;AAYA;;;;;;AAMA,aAAW,SAAX,CAAqB,WAArB,GAAmC,UAAS,KAAT,EAAgB;AACjD,QAAI,CAAC,KAAK,UAAN,KACD,MAAM,OAAN,KAAkB,KAAK,WAAL,CAAiB,QAAjB,CAA0B,KAA5C,IACD,MAAM,OAAN,KAAkB,KAAK,WAAL,CAAiB,QAAjB,CAA0B,KAF1C,CAAJ,EAEsD;AACpD,YAAM,cAAN;AACA,WAAK,YAAL;AACD,KALD,MAKO,IAAI,KAAK,UAAL,IACT,MAAM,OAAN,KAAkB,KAAK,WAAL,CAAiB,QAAjB,CAA0B,KADvC,EAC8C;AACnD,YAAM,cAAN;AACA,WAAK,eAAL;AACD;AACF,GAXD;;AAcA;;;AAGA,aAAW,SAAX,CAAqB,aAArB,GAAqC,YAAW;AAC9C,QAAG,KAAK,YAAL,MAAuB,KAAK,gBAAL,CAAsB,YAA7C,IACD,KAAK,cADJ,IAED,CAAC,KAAK,UAFR,EAEoB;AAClB,WAAK,YAAL;AACD;AACF,GAND;;AASA,SAAO,SAAP,IAAoB,CAAC,YAAD,EAAe,SAAf,CAApB,CAA8C,QACzC,MADyC,CAClC,2BADkC,EAEzC,SAFyC,CAE/B,QAF+B,EAErB,MAFqB;;AAI9C;;;;;;;;;;;;;;;;;AAiBA;AACA;AACA,MAAI,uBAAuB;;;YAA3B;;AAKA;;;;;;;AAOA,WAAS,MAAT,CAAgB,UAAhB,EAA4B,OAA5B,EAAqC;AACnC,QAAI,eAAe,QAAQ,eAAR,CAAwB,oBAAxB,CAAnB;;AAEA,WAAO;AACL,gBAAU,GADL;AAEL,eAAS,CAAC,WAAD,EAAc,QAAd,CAFJ;AAGL,eAAU,OAHL;AAIL,kBAAY;AAJP,KAAP;;AAOA,aAAS,OAAT,CAAiB,OAAjB,EAA0B,IAA1B,EAAgC;AAC9B;AACA,cAAQ,MAAR,CAAe,QAAQ,eAAR,CAAwB,YAAxB,CAAf;;AAEA,aAAO,SAAS,QAAT,CAAkB,KAAlB,EAAyB,OAAzB,EAAkC,IAAlC,EAAwC,KAAxC,EAA+C;AACpD,YAAI,kBAAkB,MAAM,KAAN,EAAtB;AACA,YAAI,iBAAkB,MAAM,KAAN,EAAtB;AACA,mBAAW,OAAX;;AAEA,YAAI,eAAJ,EAAqB;AACnB,yBAAe,IAAf,CAAoB,eAApB;;AAEA,kBACG,OADH,CACW,QAAQ,CAAR,EACR,aADQ,CACM,kBADN,CADX,EAGG,EAHH,CAGM,MAHN,EAGc,YAAY;AACtB,4BAAgB,iBAAhB;AACA,4BAAgB,MAAhB,CAAuB,WAAvB;AACD,WANH;AAOD;AACF,OAhBD;AAiBD;AACF;;AAGD,eAAa,SAAb,IAA0B,CAAC,UAAD,CAA1B,CAAuC,QAClC,MADkC,CAC3B,2BAD2B,EAElC,SAFkC,CAExB,cAFwB,EAER,YAFQ;;AAIvC;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;AAOA,WAAS,YAAT,CAAuB,QAAvB,EAAiC;AAC/B,WAAO;AACL,gBAAU,GADL;AAEL,eAAS,UAFJ;AAGL,aAAO,KAHF;AAIL,YAAM;AAJD,KAAP;;AAOA,aAAS,QAAT,CAAkB,KAAlB,EAAyB,OAAzB,EAAkC,IAAlC,EAAwC,IAAxC,EAA8C;AAC5C,cAAQ,EAAR,CAAW,OAAX,EAAoB,UAAS,KAAT,EAAgB;AAClC,cAAM,MAAN,CAAa,YAAW;AACtB,eAAK,UAAL,CAAgB,MAAM,eAAN,CAAsB,MAAtC;AACD,SAFD;AAGD,OAJD;;AAMA;AACA;AACA,eAAS,YAAW;AAClB,gBAAQ,IAAR,CAAa,EAAE,UAAU,CAAC,CAAb,EAAgB,eAAe,IAA/B,EAAb;AACA,gBAAQ,IAAR,CAAa,QAAb,EAAuB,IAAvB,CAA4B,UAA5B,EAAwC,IAAxC;AACD,OAHD;AAID;AACF;;AAGD,mBAAiB,SAAjB,IAA8B,CAAC,UAAD,CAA9B,CAA2C,QACtC,MADsC,CAC/B,2BAD+B,EAEtC,SAFsC,CAE5B,kBAF4B,EAER,gBAFQ;;AAI3C,WAAS,gBAAT,CAA2B,QAA3B,EAAqC;AACnC,WAAO;AACL,gBAAU,IADL;AAEL,gBAAU,IAFL;AAGL,YAAM,IAHD;AAIL,aAAO;AAJF,KAAP;AAMA,aAAS,IAAT,CAAe,KAAf,EAAsB,OAAtB,EAA+B,IAA/B,EAAqC;AACnC,UAAI,OAAO,MAAM,OAAN,CAAc,YAAzB;AAAA,UACI,WAAW,KAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB,EAAwB,KAAK,MAA7B,CADf;AAEA,eAAS,eAAT,GAA2B,KAA3B;AACA,eAAS,KAAT,GAAiB,MAAM,KAAvB;AACA,eAAS,MAAT,GAAkB,MAAM,MAAxB;AACA,eAAS,YAAT,GAAwB,IAAxB;;AAEA,UAAI,UAAU,KAAK,MAAL,CAAY,KAAZ,CAAkB,KAAK,gBAAvB,CAAd;;AAEA,cAAQ,IAAR,CAAa,OAAb;AACA,eAAS,QAAQ,QAAR,EAAT,EAA6B,QAA7B;AACD;AACF;;AAGD,cAAY,SAAZ,IAAyB,CAAC,QAAD,EAAW,QAAX,EAAqB,aAArB,EAAoC,MAApC,EAA4C,UAA5C,EAAwD,UAAxD,EAAoE,SAApE,CAAzB,CAAwG,QACnG,MADmG,CAC5F,2BAD4F,EAEnG,UAFmG,CAExF,aAFwF,EAEzE,WAFyE;;AAIxG;;;;;;;;;;;;;;AAcA,WAAS,WAAT,CAAsB,MAAtB,EAA8B,MAA9B,EAAsC,WAAtC,EAAmD,IAAnD,EAAyD,QAAzD,EAAmE,QAAnE,EAA6E,OAA7E,EAAsF;AACpF;AACA,SAAK,QAAL,GAAgB,QAAhB;;AAEA;AACA,SAAK,WAAL,GAAmB,WAAnB;;AAEA;AACA,SAAK,MAAL,GAAc,MAAd;;AAEA;AACA,SAAK,MAAL,GAAc,OAAO,OAArB;;AAEA;AACA,SAAK,OAAL,GAAe,OAAf;;AAEA;AACA,SAAK,IAAL,GAAY,IAAZ;;AAEA;AACA,SAAK,QAAL,GAAgB,QAAhB;;AAEA;AACA,SAAK,WAAL,GAAmB,IAAnB;;AAEA;AACA,SAAK,oBAAL,GAA4B,IAA5B;;AAEA;AACA,SAAK,gBAAL,GAAwB,IAAxB;;AAEA;AACA,SAAK,gBAAL,GAAwB,IAAxB;;AAEA;AACA,SAAK,KAAL,GAAa,EAAb;;AAEA;AACA,SAAK,YAAL,GAAoB,CAAC,CAArB;;AAEA;AACA,SAAK,cAAL,GAAsB,QAAQ,qBAAR,CAA8B,OAAO,gBAArC,CAAtB;;AAEA;AACA,SAAK,SAAL,GAAiB,QAAQ,qBAAR,CAA8B,OAAO,WAArC,CAAjB;;AAEA;;;;AAIA,SAAK,UAAL,GAAkB,mCAAlB;;AAEA;;;;AAIA,SAAK,iBAAL,GAAyB,QAAzB;;AAEA;;;;AAIA,SAAK,UAAL,GAAkB,EAAlB;;AAEA;;;;;AAKA,SAAK,gBAAL,GAAwB,KAAxB;;AAEA;;;;AAIA,SAAK,QAAL,GAAgB,KAAhB;;AAEA;;;;AAIA,SAAK,WAAL,GAAmB,KAAnB;;AAEA;;;;;AAKD;;AAED;;;;;;AAMA,cAAY,SAAZ,CAAsB,YAAtB,GAAqC,UAAS,KAAT,EAAgB;AACnD,QAAI,aAAa,KAAK,aAAL,EAAjB;;AAEA;AACA,QAAI,KAAK,gBAAL,IAAyB,MAAM,kBAA/B,IAAqD,MAAM,kBAAN,EAAzD,EAAqF;AACnF;AACD;;AAED,QAAI,MAAM,OAAN,KAAkB,KAAK,WAAL,CAAiB,QAAjB,CAA0B,SAAhD,EAA2D;AACzD;AACA;AACA,UAAI,KAAK,iBAAL,CAAuB,MAAM,MAA7B,MAAyC,CAA7C,EAAgD;AAC9C;AACD;;AAED,YAAM,cAAN;AACA,YAAM,eAAN;;AAEA,UAAI,KAAK,KAAL,CAAW,MAAf,EAAuB;AACrB,aAAK,sBAAL,CAA4B,KAAK,KAAL,CAAW,MAAX,GAAoB,CAAhD;AACD;;AAED;AACD;;AAED;AACA,QAAI,CAAC,KAAK,aAAN,IAAuB,KAAK,aAAL,CAAmB,MAAnB,GAA4B,CAAvD,EAA0D;AACxD,WAAK,aAAL,GAAqB,CAAC,KAAK,WAAL,CAAiB,QAAjB,CAA0B,KAA3B,CAArB;AACD;;AAED;AACA,QAAI,KAAK,aAAL,CAAmB,OAAnB,CAA2B,MAAM,OAAjC,MAA8C,CAAC,CAAnD,EAAsD;AACpD,UAAK,KAAK,gBAAL,IAAyB,KAAK,YAA/B,IAAgD,CAAC,UAArD,EAAiE;AACjE,YAAM,cAAN;;AAEA;AACA,UAAI,KAAK,kBAAL,EAAJ,EAA+B;;AAE/B,WAAK,UAAL,CAAgB,WAAW,IAAX,EAAhB;AACA,WAAK,eAAL;AACD;AACF,GAzCD;;AA2CA;;;;;AAKA,cAAY,SAAZ,CAAsB,iBAAtB,GAA0C,UAAS,OAAT,EAAkB;AAC1D;;;;;AAKA,QAAI;AACF,UAAI,QAAQ,cAAR,KAA2B,QAAQ,YAAvC,EAAqD;AACnD,eAAO,QAAQ,cAAf;AACD;AACF,KAJD,CAIE,OAAO,CAAP,EAAU;AACV,UAAI,CAAC,QAAQ,KAAb,EAAoB;AAClB,eAAO,CAAP;AACD;AACF;AACF,GAfD;;AAkBA;;;;;AAKA,cAAY,SAAZ,CAAsB,kBAAtB,GAA2C,UAAS,SAAT,EAAoB,YAApB,EAAiC;AAC1E,QAAG,aAAa,CAAb,IAAkB,YAAY,KAAK,KAAL,CAAW,MAA5C,EAAoD;AAClD,WAAK,KAAL,CAAW,SAAX,IAAwB,YAAxB;AACA,WAAK,WAAL,CAAiB,SAAjB;AACD;AACF,GALD;;AAQA;;;;AAIA,cAAY,SAAZ,CAAsB,aAAtB,GAAsC,YAAW;AAC/C,WAAO,CAAC,CAAC,KAAK,QAAL,CAAc,CAAd,EAAiB,aAAjB,CAA+B,mBAA/B,CAAT;AACD,GAFD;;AAKA,cAAY,SAAZ,CAAsB,WAAtB,GAAoC,YAAW;AAC7C;AACA,QAAI,CAAC,KAAK,WAAV,EAAuB;AACrB,aAAO,KAAP;AACD;;AAED,WAAO,KAAK,QAAL,GAAgB,KAAK,SAArB,GACA,QAAQ,SAAR,CAAkB,KAAK,SAAvB,IAAoC,KAAK,SAAzC,GAAqD,IAD5D;AAED,GARD;;AAUA;;;;;AAKA,cAAY,SAAZ,CAAsB,WAAtB,GAAoC,UAAU,KAAV,EAAiB;AACnD,QAAI,KAAK,aAAL,EAAJ,EAA0B;AAC1B,QAAI,KAAK,aAAL,EAAJ,EAA0B;;AAE1B,YAAQ,MAAM,OAAd;AACE,WAAK,KAAK,WAAL,CAAiB,QAAjB,CAA0B,SAA/B;AACA,WAAK,KAAK,WAAL,CAAiB,QAAjB,CAA0B,MAA/B;AACE,YAAI,KAAK,YAAL,GAAoB,CAAxB,EAA2B;AAC3B,cAAM,cAAN;AACA;AACA,YAAI,CAAC,KAAK,WAAL,EAAL,EAAyB;AACzB,aAAK,2BAAL,CAAiC,KAAK,YAAtC;AACA;AACF,WAAK,KAAK,WAAL,CAAiB,QAAjB,CAA0B,UAA/B;AACE,cAAM,cAAN;AACA,YAAI,KAAK,YAAL,GAAoB,CAAxB,EAA2B,KAAK,YAAL,GAAoB,KAAK,KAAL,CAAW,MAA/B;AAC3B,YAAI,KAAK,KAAL,CAAW,MAAf,EAAuB,KAAK,sBAAL,CAA4B,KAAK,YAAL,GAAoB,CAAhD;AACvB;AACF,WAAK,KAAK,WAAL,CAAiB,QAAjB,CAA0B,WAA/B;AACE,cAAM,cAAN;AACA,aAAK,sBAAL,CAA4B,KAAK,YAAL,GAAoB,CAAhD;AACA;AACF,WAAK,KAAK,WAAL,CAAiB,QAAjB,CAA0B,MAA/B;AACA,WAAK,KAAK,WAAL,CAAiB,QAAjB,CAA0B,GAA/B;AACE,YAAI,KAAK,YAAL,GAAoB,CAAxB,EAA2B;AAC3B,cAAM,cAAN;AACA,aAAK,OAAL;AACA;AAvBJ;AAyBD,GA7BD;;AA+BA;;;;;AAKA,cAAY,SAAZ,CAAsB,cAAtB,GAAuC,YAAW;AAChD;AACA,QAAI,eAAgB,KAAK,KAAL,IAAc,KAAK,KAAL,CAAW,MAAzB,KACf,KAAK,oBAAL,IAA6B,EAA7B,IAAmC,KAAK,oBADzB,CAApB;AAEA,WAAO,eAAe,KAAK,oBAApB,GAA2C,KAAK,WAAvD;AACD,GALD;;AAOA;;;;AAIA,cAAY,SAAZ,CAAsB,2BAAtB,GAAoD,UAAS,KAAT,EAAgB;AAClE,QAAI,WAAW,KAAK,oBAAL,CAA0B,KAA1B,CAAf;AACA,SAAK,UAAL,CAAgB,KAAhB;AACA,SAAK,QAAL,CAAc,QAAQ,IAAR,CAAa,IAAb,EAAmB,YAAY;AACzC,WAAK,sBAAL,CAA4B,QAA5B;AACH,KAFa,CAAd;AAGD,GAND;;AAQA;;;AAGA,cAAY,SAAZ,CAAsB,iBAAtB,GAA0C,YAAW;AACnD,SAAK,YAAL,GAAoB,CAAC,CAArB;AACD,GAFD;;AAIA;;;;;;;;;AASA,cAAY,SAAZ,CAAsB,oBAAtB,GAA6C,UAAS,KAAT,EAAgB;AAC3D,QAAI,MAAM,KAAK,KAAL,CAAW,MAAX,GAAoB,CAA9B;AACA,WAAQ,OAAO,CAAR,GAAa,CAAC,CAAd,GACF,SAAS,GAAV,GAAiB,QAAO,CAAxB,GAA4B,KADhC;AAED,GAJD;;AAMA;;;;;;AAMA,cAAY,SAAZ,CAAsB,UAAtB,GAAmC,UAAS,OAAT,EAAkB;AACnD,QAAI,KAAK,gBAAL,IAAyB,KAAK,aAAlC,EAAiD;AAC/C,UAAI,kBAAkB,KAAK,aAAL,CAAmB,EAAC,SAAS,OAAV,EAAnB,CAAtB;;AAEA;AACA;AACA,UAAI,QAAQ,SAAR,CAAkB,eAAlB,CAAJ,EAAwC;AACtC,kBAAU,eAAV;AACD;AACF;;AAED;AACA,QAAI,QAAQ,QAAR,CAAiB,OAAjB,CAAJ,EAA8B;AAC5B,UAAI,YAAY,KAAK,KAAL,CAAW,IAAX,CAAgB,UAAS,IAAT,EAAc;AAC5C,eAAO,QAAQ,MAAR,CAAe,OAAf,EAAwB,IAAxB,CAAP;AACD,OAFe,CAAhB;AAGA,UAAI,SAAJ,EAAe;AAChB;;AAED;AACA,QAAI,WAAW,IAAX,IAAmB,KAAK,KAAL,CAAW,OAAX,CAAmB,OAAnB,IAA8B,CAArD,EAAwD;;AAExD;AACA,QAAI,QAAQ,KAAK,KAAL,CAAW,IAAX,CAAgB,OAAhB,CAAZ;;AAEA;AACA,SAAK,WAAL,CAAiB,SAAjB;AACA,SAAK,aAAL;;AAEA;AACA,QAAI,KAAK,QAAL,IAAiB,KAAK,KAA1B,EAAiC;AAC/B,WAAK,KAAL,CAAW,EAAE,SAAS,OAAX,EAAoB,UAAU,KAA9B,EAAX;AACD;AACF,GAjCD;;AAmCA;;;;;;;AAOA,cAAY,SAAZ,CAAsB,0BAAtB,GAAmD,YAAW;AAC5D,SAAK,gBAAL,GAAwB,IAAxB;AACD,GAFD;;AAIA;;;;;;;AAOA,cAAY,SAAZ,CAAsB,kBAAtB,GAA2C,YAAW;AACpD,SAAK,QAAL,GAAgB,IAAhB;AACD,GAFD;;AAIA;;;;;;;AAOA,cAAY,SAAZ,CAAsB,qBAAtB,GAA8C,YAAW;AACvD,SAAK,WAAL,GAAmB,IAAnB;AACD,GAFD;;AAIA;;;;;;;AAOA,cAAY,SAAZ,CAAsB,qBAAtB,GAA8C,YAAW;AACvD,SAAK,WAAL,GAAmB,IAAnB;AACD,GAFD;;AAIA;;;;;;;;AAQA,cAAY,SAAZ,CAAsB,aAAtB,GAAsC,YAAW;AAC/C,QAAI,aAAc,CAAC,KAAK,gBAAN,GAAyB,KAAK,UAA9B,GACC,KAAK,oBAAL,GAA4B,KAAK,oBAAL,CAA0B,UAAtD,GACA,KAAK,gBAAL,CAAsB,CAAtB,EAAyB,KAF5C;;AAIA;AACA,WAAO,QAAQ,QAAR,CAAiB,UAAjB,IAA+B,UAA/B,GAA4C,EAAnD;AACD,GAPD;;AASA;;;AAGA,cAAY,SAAZ,CAAsB,eAAtB,GAAwC,YAAW;AACjD,QAAI,KAAK,gBAAT,EAA2B;AACzB,UAAI,KAAK,oBAAT,EAA+B;AAC7B,aAAK,oBAAL,CAA0B,aAA1B,CAAwC,EAAxC;AACA,aAAK,oBAAL,CAA0B,OAA1B;AACD,OAHD,MAGO;AACL,aAAK,gBAAL,CAAsB,CAAtB,EAAyB,KAAzB,GAAiC,EAAjC;AACD;AACF,KAPD,MAOO;AACL,WAAK,UAAL,GAAkB,EAAlB;AACD;AACF,GAXD;;AAaA,cAAY,SAAZ,CAAsB,kBAAtB,GAA2C,YAAW;AACpD,QAAI,QAAQ,QAAR,CAAiB,KAAK,QAAtB,CAAJ,EAAqC,KAAK,QAAL,GAAgB,SAAS,KAAK,QAAd,EAAwB,EAAxB,KAA+B,CAA/C;;AAErC,WAAO,KAAK,QAAL,GAAgB,CAAhB,IAAqB,KAAK,KAAL,CAAW,MAAX,IAAqB,KAAK,QAAtD;AACD,GAJD;;AAMA;;;AAGA,cAAY,SAAZ,CAAsB,aAAtB,GAAsC,YAAW;AAC/C,SAAK,WAAL,CAAiB,YAAjB,CAA8B,cAA9B,EAA8C,CAAC,KAAK,kBAAL,EAA/C;AACD,GAFD;;AAIA;;;;AAIA,cAAY,SAAZ,CAAsB,UAAtB,GAAmC,UAAS,KAAT,EAAgB;AACjD,QAAI,UAAU,KAAK,KAAL,CAAW,MAAX,CAAkB,KAAlB,EAAyB,CAAzB,CAAd;;AAEA;AACA,SAAK,WAAL,CAAiB,SAAjB;AACA,SAAK,aAAL;;AAEA,QAAI,WAAW,QAAQ,MAAnB,IAA6B,KAAK,WAAlC,IAAiD,KAAK,QAA1D,EAAoE;AAClE,WAAK,QAAL,CAAc,EAAE,SAAS,QAAQ,CAAR,CAAX,EAAuB,UAAU,KAAjC,EAAd;AACD;AACF,GAVD;;AAYA,cAAY,SAAZ,CAAsB,uBAAtB,GAAgD,UAAU,KAAV,EAAiB;AAC/D,SAAK,UAAL,CAAgB,KAAhB;;AAEA,QAAI,KAAK,gBAAT,EAA2B;AACzB;AACA;AACA;AACA,WAAK,gBAAL,CAAsB,MAAtB,GAA+B,IAA/B;AACA,WAAK,OAAL,CAAa,QAAb,CAAsB,KAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,CAAtB;AACD,KAND,MAMO;AACL,WAAK,OAAL;AACD;AAEF,GAbD;AAcA;;;;AAIA,cAAY,SAAZ,CAAsB,sBAAtB,GAA+C,UAAS,KAAT,EAAgB;AAC7D,QAAI,CAAC,KAAK,KAAL,CAAW,MAAhB,EAAwB;AACtB,WAAK,UAAL,CAAgB,CAAC,CAAjB;AACA,WAAK,OAAL;AACA;AACD;AACD,QAAI,UAAU,KAAK,KAAL,CAAW,MAAzB,EAAiC,OAAO,KAAK,OAAL,EAAP;AACjC,YAAQ,KAAK,GAAL,CAAS,KAAT,EAAgB,CAAhB,CAAR;AACA,YAAQ,KAAK,GAAL,CAAS,KAAT,EAAgB,KAAK,KAAL,CAAW,MAAX,GAAoB,CAApC,CAAR;AACA,SAAK,UAAL,CAAgB,KAAhB;AACA,SAAK,SAAL,CAAe,KAAf;AACD,GAXD;;AAaA;;;;AAIA,cAAY,SAAZ,CAAsB,UAAtB,GAAmC,UAAS,KAAT,EAAgB;AACjD,QAAI,SAAS,CAAC,CAAV,IAAe,SAAS,KAAK,KAAL,CAAW,MAAvC,EAA+C;AAC7C,WAAK,YAAL,GAAoB,KAApB;;AAEA;AACA,UAAI,KAAK,WAAL,IAAoB,KAAK,QAA7B,EAAuC;AACrC,aAAK,QAAL,CAAc,EAAC,SAAS,KAAK,KAAL,CAAW,KAAK,YAAhB,CAAV,EAAd;AACD;AACF,KAPD,MAOO;AACL,WAAK,IAAL,CAAU,IAAV,CAAe,8CAAf;AACD;AACF,GAXD;;AAaA;;;;AAIA,cAAY,SAAZ,CAAsB,kBAAtB,GAA2C,UAAS,KAAT,EAAgB;AACzD,SAAK,UAAL,CAAgB,KAAhB;AACA,QAAI,SAAS,CAAC,CAAd,EAAiB;AACf,WAAK,SAAL,CAAe,KAAf;AACD;AACF,GALD;;AAOA;;;AAGA,cAAY,SAAZ,CAAsB,SAAtB,GAAkC,UAAS,KAAT,EAAgB;AAChD,SAAK,QAAL,CAAc,CAAd,EAAiB,aAAjB,CAA+B,oBAAoB,KAApB,GAA4B,qBAA3D,EAAkF,KAAlF;AACD,GAFD;;AAIA;;;;;AAKA,cAAY,SAAZ,CAAsB,gBAAtB,GAAyC,UAAS,WAAT,EAAsB;AAC7D,SAAK,WAAL,GAAmB,WAAnB;;AAEA,QAAI,OAAO,IAAX;AACA,gBAAY,OAAZ,GAAsB,YAAW;AAC/B;AACA,WAAK,KAAL,GAAa,KAAK,WAAL,CAAiB,UAA9B;AACD,KAHD;AAID,GARD;;AAUA,cAAY,SAAZ,CAAsB,OAAtB,GAAgC,YAAY;AAC1C,QAAI,QAAQ,KAAK,QAAL,CAAc,CAAd,EAAiB,aAAjB,CAA+B,OAA/B,CAAZ;AACA,aAAS,MAAM,KAAN,EAAT;AACA,SAAK,iBAAL;AACD,GAJD;;AAMA,cAAY,SAAZ,CAAsB,YAAtB,GAAqC,YAAY;AAC/C,SAAK,aAAL,GAAqB,IAArB;AACA,SAAK,iBAAL;AACD,GAHD;;AAKA,cAAY,SAAZ,CAAsB,WAAtB,GAAoC,YAAY;AAC9C,SAAK,aAAL,GAAqB,KAArB;;AAEA,QAAI,aAAa,KAAK,aAAL,GAAqB,IAArB,EAAjB;;AAEA;AACA,SAAK,aAAL;;AAEA,QAAI,eAAe,KAAK,WAAL,CAAiB,MAApC;;AAEA,QAAI,KAAK,oBAAT,EAA+B;AAC7B,sBAAgB,KAAK,oBAAL,CAA0B,MAA1C;AACD;;AAED;AACA,QAAI,KAAK,SAAL,IAAkB,UAAlB,IAAgC,YAApC,EAAkD;AAChD,WAAK,UAAL,CAAgB,UAAhB;AACA,WAAK,eAAL;AACD;AACF,GAnBD;;AAqBA;;;;AAIA,cAAY,SAAZ,CAAsB,kBAAtB,GAA2C,UAAS,YAAT,EAAuB;AAChE,SAAK,gBAAL,GAAwB,YAAxB;;AAEA;AACA,QAAI,cAAc,aAAa,UAAb,CAAwB,SAAxB,CAAlB;AACA;AACA,QAAI,eAAe,KAAK,WAAxB,EAAqC;AACnC,WAAK,oBAAL,GAA4B,WAA5B;AACD;;AAED,QAAI,QAAQ,KAAK,MAAjB;AACA,QAAI,OAAO,IAAX;;AAEA;AACA,QAAI,eAAe,SAAf,YAAe,CAAS,KAAT,EAAgB,EAAhB,EAAoB;AACrC,YAAM,UAAN,CAAiB,QAAQ,IAAR,CAAa,IAAb,EAAmB,EAAnB,EAAuB,KAAvB,CAAjB;AACD,KAFD;;AAIA;AACA,iBACK,IADL,CACU,EAAE,UAAU,CAAZ,EADV,EAEK,EAFL,CAEQ,SAFR,EAEmB,UAAS,KAAT,EAAgB;AAAE,mBAAa,KAAb,EAAoB,KAAK,YAAzB;AAAwC,KAF7E,EAGK,EAHL,CAGQ,OAHR,EAGiB,UAAS,KAAT,EAAgB;AAAE,mBAAa,KAAb,EAAoB,KAAK,YAAzB;AAAwC,KAH3E,EAIK,EAJL,CAIQ,MAJR,EAIgB,UAAS,KAAT,EAAgB;AAAE,mBAAa,KAAb,EAAoB,KAAK,WAAzB;AAAuC,KAJzE;AAKD,GAxBD;;AA0BA,cAAY,SAAZ,CAAsB,qBAAtB,GAA8C,UAAS,IAAT,EAAe;AAC3D,QAAI,IAAJ,EAAU;AACR,WAAK,gBAAL,GAAwB,IAAxB;;AAEA,WAAK,2BAAL,CAAiC,QAAQ,IAAR,CAAa,IAAb,EAAmB,UAAU,IAAV,EAAgB;AAClE,YAAI,IAAJ,EAAU;AACR;AACA,cAAI,KAAK,kBAAL,EAAJ,EAA+B;;AAE/B,eAAK,UAAL,CAAgB,IAAhB;AACA,eAAK,eAAL;AACD;AACF,OARgC,CAAjC;;AAUA,WAAK,QAAL,CAAc,IAAd,CAAmB,OAAnB,EACK,EADL,CACQ,OADR,EACgB,QAAQ,IAAR,CAAa,IAAb,EAAmB,KAAK,YAAxB,CADhB,EAEK,EAFL,CAEQ,MAFR,EAEgB,QAAQ,IAAR,CAAa,IAAb,EAAmB,KAAK,WAAxB,CAFhB;AAGD;AACF,GAlBD;;AAoBA,cAAY,SAAZ,CAAsB,QAAtB,GAAiC,YAAY;AAC3C,WAAO,KAAK,aAAL,IAAsB,KAAK,YAAL,IAAqB,CAAlD;AACD,GAFD;;AAKE,UAAQ,SAAR,IAAqB,CAAC,YAAD,EAAe,SAAf,EAA0B,UAA1B,EAAsC,MAAtC,EAA8C,UAA9C,EAA0D,iBAA1D,CAArB,CAAkG,QAC7F,MAD6F,CACtF,2BADsF,EAE7F,SAF6F,CAEnF,SAFmF,EAExE,OAFwE;;AAIlG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiJA,MAAI,oBAAoB;;;;;;;;;;;;;;;;;;;;;;;uBAAxB;;AAyBA,MAAI,sBAAsB;;;;;;;;;4DAA1B;;AAWA,MAAI,wBAAwB;6BAA5B;;AAGA,MAAI,uBAAuB;;;;;;;;;;;;gBAA3B;;AAcA;;;AAGA,WAAS,OAAT,CAAkB,UAAlB,EAA8B,OAA9B,EAAuC,QAAvC,EAAiD,IAAjD,EAAuD,QAAvD,EAAiE,eAAjE,EAAkF;AAChF;AACA,QAAI,YAAY,cAAhB;;AAEA,WAAO;AACL,gBAAU,kBAAS,OAAT,EAAkB,KAAlB,EAAyB;AACjC;AACA;AACA;AACA;AACA,cAAM,iBAAN,IAA2B,QAAQ,KAAR,EAA3B;AACA,eAAO,UAAU,KAAjB;AACD,OARI;AASL,eAAS,CAAC,SAAD,CATJ;AAUL,gBAAU,GAVL;AAWL,kBAAY,aAXP;AAYL,oBAAc,cAZT;AAaL,wBAAkB,IAbb;AAcL,eAAS,OAdJ;AAeL,aAAO;AACL,kBAAU,WADL;AAEL,mBAAW,cAFN;AAGL,qBAAa,GAHR;AAIL,8BAAsB,GAJjB;AAKL,kBAAU,aALL;AAML,uBAAe,kBANV;AAOL,kBAAU,aAPL;AAQL,eAAO,UARF;AASL,kBAAU,aATL;AAUL,kBAAU,aAVL;AAWL,oBAAY,GAXP;AAYL,2BAAmB,GAZd;AAaL,uBAAe,mBAbV;AAcL,sBAAc;AAdT;AAfF,KAAP;;AAiCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,aAAS,OAAT,CAAiB,OAAjB,EAA0B,IAA1B,EAAgC;AAC9B;AACA,UAAI,eAAe,KAAK,iBAAL,CAAnB;AACA,WAAK,iBAAL,IAA0B,IAA1B;;AAEA,UAAI,eAAe,mBAAmB,2BAAnB,CAAnB;;AAEA,UAAI,qBAAqB,QACtB,QADsB,GAEtB,SAFsB,CAEZ,gBAFY,EAGtB,GAHsB,CAGlB,UAAS,IAAT,EAAe;AAClB,eAAO,gBAAgB,IAAhB,GAAuB,GAA9B;AACD,OALsB,EAMtB,IANsB,CAMjB,GANiB,CAAzB;;AAQA;AACA;AACA,UAAI,qBAAuB,mBAAmB,kBAAnB,KAA0C,UAAU,MAA/E;AAAA,UACI,uBAAuB,gBAAgB,UAAU,OADrD;AAAA,UAEI,oBAAuB,mBAAmB,0BAAnB,KAChB,mBAAmB,gBAAnB,CADgB,IAEhB,UAAU,KAJrB;AAAA,UAKI,cAAc,aAAa,IAAb,CAAkB,SAAlB,CALlB;;AAOA;AACA,UAAI,aAAa,CAAb,EAAgB,aAAhB,CAA8B,oCAA9B,CAAJ,EAAyE;AACvE,aAAK,IAAL,CAAU,8DAAV;AACD;;AAED,eAAS,kBAAT,CAA6B,KAA7B,EAAoC;AAClC,YAAI,CAAC,KAAK,OAAV,EAAmB;AACnB,YAAI,UAAU,aAAa,CAAb,EAAgB,aAAhB,CAA8B,KAA9B,CAAd;AACA,eAAO,WAAW,QAAQ,SAA1B;AACD;;AAED;;;AAGA,aAAO,SAAS,QAAT,CAAkB,KAAlB,EAAyB,OAAzB,EAAkC,KAAlC,EAAyC,WAAzC,EAAsD;AAC3D,gBAAQ,sBAAR,CAA+B,KAA/B,EAAsC,IAAtC;;AAEA,mBAAW,OAAX;AACA,YAAI,cAAc,YAAY,CAAZ,CAAlB;AACA,YAAG,YAAH,EAAiB;AACf;AACA,sBAAY,cAAZ,GAA6B,KAA7B;AACD;;AAED,oBAAY,oBAAZ,GAAmC,oBAAnC;AACA,oBAAY,kBAAZ,GAAmC,kBAAnC;AACA,oBAAY,iBAAZ,GAAmC,iBAAnC;;AAEA,oBAAY,WAAZ,GAA0B,gBAAgB,OAA1C;;AAEA,gBACK,IADL,CACU,EAAE,eAAe,IAAjB,EAAuB,UAAU,CAAC,CAAlC,EADV,EAEK,EAFL,CAEQ,OAFR,EAEiB,YAAY;AAAE,sBAAY,OAAZ;AAAwB,SAFvD;;AAIA,YAAI,KAAK,OAAT,EAAkB;AAChB,sBAAY,gBAAZ,CAA6B,QAAQ,UAAR,CAAmB,SAAnB,CAA7B;;AAEA;AACA;AACA,cAAI,MAAM,eAAV,EAA2B,YAAY,0BAAZ;;AAE3B;AACA;AACA;AACA;AACA,cAAI,MAAM,UAAV,EAAsB,YAAY,qBAAZ;;AAEtB;AACA;AACA,cAAI,MAAM,OAAV,EAAmB,YAAY,kBAAZ;;AAEnB;AACA;AACA,cAAI,MAAM,UAAV,EAAsB,YAAY,qBAAZ;;AAEtB;AACA;AACA,cAAI,MAAM,UAAV,EAAsB,YAAY,qBAAZ;;AAEtB;AACA;AACA;AACA,cAAI,qBAAqB,UAAU,KAAnC,EAA0C;AACxC;AACA;AACA;AACA;AACA,kBAAM,MAAN,CAAa,uBAAb,EAAsC,UAAS,QAAT,EAAmB;AACvD,kBAAI,CAAC,QAAL,EAAe;;AAEb,wBAAQ,QAAR,CAAiB,YAAU;;AAEzB,sBAAI,kBAAkB,OAAlB,CAA0B,kBAA1B,MAAkD,CAAtD,EAAyD;AACvD,wBAAI,iBAAiB,QAAQ,IAAR,CAAa,iBAAb,CAArB;AACA,gCAAY,qBAAZ,CAAkC,eAAe,UAAf,CAA0B,gBAA1B,CAAlC;AACD;;AAED,8BAAY,kBAAZ,CAA+B,QAAQ,IAAR,CAAa,OAAb,CAA/B;AACD,iBARD;AASD;AACF,aAbD;AAcD;;AAED;AACA,kBAAQ,QAAR,CAAiB,YAAW;AAC1B,gBAAI,QAAQ,QAAQ,IAAR,CAAa,OAAb,CAAZ;;AAEA,qBAAS,MAAM,WAAN,CAAkB,UAAlB,EAA8B,IAA9B,CAAT;AACD,WAJD;AAKD;;AAED;AACA,YAAI,YAAY,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,cAAI,sBAAsB,SAAS,YAAY,KAAZ,EAAT,EAA8B,MAAM,OAApC,CAA1B;AACA,mBAAS,YAAW;AAAE,oBAAQ,IAAR,CAAa,eAAb,EAA8B,OAA9B,CAAsC,mBAAtC;AAA6D,WAAnF;AACD;AACF,OAlFD;AAmFD;;AAED,aAAS,YAAT,GAAwB;AACtB,aAAO;AACL,eAAO,QAAQ,eAAR,CAAwB,iBAAxB,CADF;AAEL,eAAO,QAAQ,eAAR,CAAwB,mBAAxB,CAFF;AAGL,iBAAS,QAAQ,eAAR,CAAwB,qBAAxB,CAHJ;AAIL,gBAAQ,QAAQ,eAAR,CAAwB,oBAAxB;AAJH,OAAP;AAMD;AACF;;AAEH,UACK,MADL,CACY,2BADZ,EAEK,UAFL,CAEgB,oBAFhB,EAEsC,kBAFtC;;AAMA;;;;AAIA,WAAS,kBAAT,GAA+B;AAC7B;AACA,SAAK,YAAL,GAAoB,IAApB;;AAEA;AACA,SAAK,UAAL,GAAkB,EAAlB;AACD;;AAGD,qBAAmB,SAAnB,CAA6B,YAA7B,GAA4C,UAAS,UAAT,EAAqB;AAC/D,QAAI,UAAU,KAAK,YAAL,CAAkB,EAAC,UAAU,UAAX,EAAlB,CAAd;AACA,WAAO,KAAK,cAAL,GACH,QAAQ,MAAR,CAAe,QAAQ,IAAR,CAAa,IAAb,EAAmB,KAAK,sBAAxB,CAAf,CADG,GAC+D,OADtE;AAED,GAJD;;AAOA,qBAAmB,SAAnB,CAA6B,QAA7B,GAAwC,UAAS,IAAT,EAAe;AACrD,WAAO,KAAK,KAAK,WAAV,CAAP;AACD,GAFD;;AAKA,qBAAmB,SAAnB,CAA6B,sBAA7B,GAAsD,UAAS,OAAT,EAAkB;AACtE,WAAO,KAAK,QAAL,CAAc,OAAd,CAAsB,OAAtB,KAAkC,CAAC,CAA1C;AACD,GAFD;;AAKA,iBAAe,SAAf,IAA4B,CAAC,YAAD,EAAe,SAAf,CAA5B,CAAsD,QACnD,MADmD,CAC5C,2BAD4C,EAEnD,SAFmD,CAEzC,gBAFyC,EAEvB,cAFuB;;AAItD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA,MAAI,4BAA4B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBAAhC;;AAyCA;;;;;;;AAOA,WAAS,cAAT,CAAwB,UAAxB,EAAoC,OAApC,EAA6C;AAC3C,WAAO;AACL,gBAAU,kBAAS,OAAT,EAAkB,KAAlB,EAAyB;AACjC,eAAO,yBAAP;AACD,OAHI;AAIL,gBAAU,GAJL;AAKL,kBAAY,oBALP;AAML,oBAAc,qBANT;AAOL,wBAAkB,IAPb;AAQL,eAAS,OARJ;AASL,aAAO;AACL,sBAAc,aADT;AAEL,qBAAa,GAFR;AAGL,8BAAsB,GAHjB;AAIL,qBAAa,gBAJR;AAKL,sBAAc,iBALT;AAML,sBAAc,iBANT;AAOL,kBAAU,UAPL;AAQL,sBAAc,kBART;AASL,wBAAgB;AATX;AATF,KAAP;;AAsBA,aAAS,OAAT,CAAiB,OAAjB,EAA0B,IAA1B,EAAgC;AAC9B,aAAO,SAAS,QAAT,CAAkB,KAAlB,EAAyB,OAAzB,EAAkC,KAAlC,EAAyC,WAAzC,EAAsD;;AAE3D,gBAAQ,sBAAR,CAA+B,KAA/B,EAAsC,IAAtC;AACA,mBAAW,OAAX;;AAEA,gBAAQ,IAAR,CAAa,UAAb,EAAyB,IAAzB;AACD,OAND;AAOD;AACF;AAEA,CA9gDD,EA8gDG,MA9gDH,EA8gDW,OAAO,OA9gDlB","file":"chips-compiled.js","sourcesContent":["/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v1.1.1-master-f7ecb4f\n */\n(function( window, angular, undefined ){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.chips\n */\n/*\n * @see js folder for chips implementation\n */\nangular.module('material.components.chips', [\n  'material.core',\n  'material.components.autocomplete'\n]);\n\n\nMdChipCtrl['$inject'] = [\"$scope\", \"$element\", \"$mdConstant\", \"$timeout\", \"$mdUtil\"];angular\n  .module('material.components.chips')\n  .controller('MdChipCtrl', MdChipCtrl);\n\n/**\n * Controller for the MdChip component. Responsible for handling keyboard\n * events and editting the chip if needed.\n *\n * @param $scope\n * @param $element\n * @param $mdConstant\n * @param $timeout\n * @param $mdUtil\n * @constructor\n */\nfunction MdChipCtrl ($scope, $element, $mdConstant, $timeout, $mdUtil) {\n  /**\n   * @type {$scope}\n   */\n  this.$scope = $scope;\n\n  /**\n   * @type {$element}\n   */\n  this.$element = $element;\n\n  /**\n   * @type {$mdConstant}\n   */\n  this.$mdConstant = $mdConstant;\n\n  /**\n   * @type {$timeout}\n   */\n  this.$timeout = $timeout;\n\n  /**\n   * @type {$mdUtil}\n   */\n  this.$mdUtil = $mdUtil;\n\n  /**\n   * @type {boolean}\n   */\n  this.isEditting = false;\n\n  /**\n   * @type {MdChipsCtrl}\n   */\n  this.parentController = undefined;\n\n  /**\n   * @type {boolean}\n   */\n  this.enableChipEdit = false;\n}\n\n\n/**\n * @param {MdChipsCtrl} controller\n */\nMdChipCtrl.prototype.init = function(controller) {\n  this.parentController = controller;\n  this.enableChipEdit = this.parentController.enableChipEdit;\n\n  if (this.enableChipEdit) {\n    this.$element.on('keydown', this.chipKeyDown.bind(this));\n    this.$element.on('mousedown', this.chipMouseDown.bind(this));\n    this.getChipContent().addClass('_md-chip-content-edit-is-enabled');\n  }\n};\n\n\n/**\n * @return {Object}\n */\nMdChipCtrl.prototype.getChipContent = function() {\n  var chipContents = this.$element[0].getElementsByClassName('md-chip-content');\n  return angular.element(chipContents[0]);\n};\n\n\n/**\n * @return {Object}\n */\nMdChipCtrl.prototype.getContentElement = function() {\n  return angular.element(this.getChipContent().children()[0]);\n};\n\n\n/**\n * @return {number}\n */\nMdChipCtrl.prototype.getChipIndex = function() {\n  return parseInt(this.$element.attr('index'));\n};\n\n\n/**\n * Presents an input element to edit the contents of the chip.\n */\nMdChipCtrl.prototype.goOutOfEditMode = function() {\n  if (!this.isEditting) return;\n\n  this.isEditting = false;\n  this.$element.removeClass('_md-chip-editing');\n  this.getChipContent()[0].contentEditable = 'false';\n  var chipIndex = this.getChipIndex();\n\n  var content = this.getContentElement().text();\n  if (content) {\n    this.parentController.updateChipContents(\n        chipIndex,\n        this.getContentElement().text()\n    );\n\n    this.$mdUtil.nextTick(function() {\n      if (this.parentController.selectedChip === chipIndex) {\n        this.parentController.focusChip(chipIndex);\n      }\n    }.bind(this));\n  } else {\n    this.parentController.removeChipAndFocusInput(chipIndex);\n  }\n};\n\n\n/**\n * Given an HTML element. Selects contents of it.\n * @param node\n */\nMdChipCtrl.prototype.selectNodeContents = function(node) {\n  var range, selection;\n  if (document.body.createTextRange) {\n    range = document.body.createTextRange();\n    range.moveToElementText(node);\n    range.select();\n  } else if (window.getSelection) {\n    selection = window.getSelection();\n    range = document.createRange();\n    range.selectNodeContents(node);\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n};\n\n\n/**\n * Presents an input element to edit the contents of the chip.\n */\nMdChipCtrl.prototype.goInEditMode = function() {\n  this.isEditting = true;\n  this.$element.addClass('_md-chip-editing');\n  this.getChipContent()[0].contentEditable = 'true';\n  this.getChipContent().on('blur', function() {\n    this.goOutOfEditMode();\n  }.bind(this));\n\n  this.selectNodeContents(this.getChipContent()[0]);\n};\n\n\n/**\n * Handles the keydown event on the chip element. If enable-chip-edit attribute is\n * set to true, space or enter keys can trigger going into edit mode. Enter can also\n * trigger submitting if the chip is already being edited.\n * @param event\n */\nMdChipCtrl.prototype.chipKeyDown = function(event) {\n  if (!this.isEditting &&\n    (event.keyCode === this.$mdConstant.KEY_CODE.ENTER ||\n    event.keyCode === this.$mdConstant.KEY_CODE.SPACE)) {\n    event.preventDefault();\n    this.goInEditMode();\n  } else if (this.isEditting &&\n    event.keyCode === this.$mdConstant.KEY_CODE.ENTER) {\n    event.preventDefault();\n    this.goOutOfEditMode();\n  }\n};\n\n\n/**\n * Handles the double click event\n */\nMdChipCtrl.prototype.chipMouseDown = function() {\n  if(this.getChipIndex() == this.parentController.selectedChip &&\n    this.enableChipEdit &&\n    !this.isEditting) {\n    this.goInEditMode();\n  }\n};\n\n\nMdChip['$inject'] = [\"$mdTheming\", \"$mdUtil\"];angular\n    .module('material.components.chips')\n    .directive('mdChip', MdChip);\n\n/**\n * @ngdoc directive\n * @name mdChip\n * @module material.components.chips\n *\n * @description\n * `<md-chip>` is a component used within `<md-chips>` and is responsible for rendering individual\n * chips.\n *\n *\n * @usage\n * <hljs lang=\"html\">\n *   <md-chip>{{$chip}}</md-chip>\n * </hljs>\n *\n */\n\n// This hint text is hidden within a chip but used by screen readers to\n// inform the user how they can interact with a chip.\nvar DELETE_HINT_TEMPLATE = '\\\n    <span ng-if=\"!$mdChipsCtrl.readonly\" class=\"md-visually-hidden\">\\\n      {{$mdChipsCtrl.deleteHint}}\\\n    </span>';\n\n/**\n * MDChip Directive Definition\n *\n * @param $mdTheming\n * @param $mdUtil\n * ngInject\n */\nfunction MdChip($mdTheming, $mdUtil) {\n  var hintTemplate = $mdUtil.processTemplate(DELETE_HINT_TEMPLATE);\n\n  return {\n    restrict: 'E',\n    require: ['^?mdChips', 'mdChip'],\n    compile:  compile,\n    controller: 'MdChipCtrl'\n  };\n\n  function compile(element, attr) {\n    // Append the delete template\n    element.append($mdUtil.processTemplate(hintTemplate));\n\n    return function postLink(scope, element, attr, ctrls) {\n      var chipsController = ctrls.shift();\n      var chipController  = ctrls.shift();\n      $mdTheming(element);\n\n      if (chipsController) {\n        chipController.init(chipsController);\n\n        angular\n          .element(element[0]\n          .querySelector('.md-chip-content'))\n          .on('blur', function () {\n            chipsController.resetSelectedChip();\n            chipsController.$scope.$applyAsync();\n          });\n      }\n    };\n  }\n}\n\n\nMdChipRemove['$inject'] = [\"$timeout\"];angular\n    .module('material.components.chips')\n    .directive('mdChipRemove', MdChipRemove);\n\n/**\n * @ngdoc directive\n * @name mdChipRemove\n * @restrict A\n * @module material.components.chips\n *\n * @description\n * Designates an element to be used as the delete button for a chip. <br/>\n * This element is passed as a child of the `md-chips` element.\n *\n * The designated button will be just appended to the chip and removes the given chip on click.<br/>\n * By default the button is not being styled by the `md-chips` component.\n *\n * @usage\n * <hljs lang=\"html\">\n *   <md-chips>\n *     <button md-chip-remove=\"\">\n *       <md-icon md-svg-icon=\"md-close\"></md-icon>\n *     </button>\n *   </md-chips>\n * </hljs>\n */\n\n\n/**\n * MdChipRemove Directive Definition.\n * \n * @param $timeout\n * @returns {{restrict: string, require: string[], link: Function, scope: boolean}}\n * @constructor\n */\nfunction MdChipRemove ($timeout) {\n  return {\n    restrict: 'A',\n    require: '^mdChips',\n    scope: false,\n    link: postLink\n  };\n\n  function postLink(scope, element, attr, ctrl) {\n    element.on('click', function(event) {\n      scope.$apply(function() {\n        ctrl.removeChip(scope.$$replacedScope.$index);\n      });\n    });\n\n    // Child elements aren't available until after a $timeout tick as they are hidden by an\n    // `ng-if`. see http://goo.gl/zIWfuw\n    $timeout(function() {\n      element.attr({ tabindex: -1, 'aria-hidden': true });\n      element.find('button').attr('tabindex', '-1');\n    });\n  }\n}\n\n\nMdChipTransclude['$inject'] = [\"$compile\"];angular\n    .module('material.components.chips')\n    .directive('mdChipTransclude', MdChipTransclude);\n\nfunction MdChipTransclude ($compile) {\n  return {\n    restrict: 'EA',\n    terminal: true,\n    link: link,\n    scope: false\n  };\n  function link (scope, element, attr) {\n    var ctrl = scope.$parent.$mdChipsCtrl,\n        newScope = ctrl.parent.$new(false, ctrl.parent);\n    newScope.$$replacedScope = scope;\n    newScope.$chip = scope.$chip;\n    newScope.$index = scope.$index;\n    newScope.$mdChipsCtrl = ctrl;\n\n    var newHtml = ctrl.$scope.$eval(attr.mdChipTransclude);\n\n    element.html(newHtml);\n    $compile(element.contents())(newScope);\n  }\n}\n\n\nMdChipsCtrl['$inject'] = [\"$scope\", \"$attrs\", \"$mdConstant\", \"$log\", \"$element\", \"$timeout\", \"$mdUtil\"];angular\n    .module('material.components.chips')\n    .controller('MdChipsCtrl', MdChipsCtrl);\n\n/**\n * Controller for the MdChips component. Responsible for adding to and\n * removing from the list of chips, marking chips as selected, and binding to\n * the models of various input components.\n *\n * @param $scope\n * @param $attrs\n * @param $mdConstant\n * @param $log\n * @param $element\n * @param $timeout\n * @param $mdUtil\n * @constructor\n */\nfunction MdChipsCtrl ($scope, $attrs, $mdConstant, $log, $element, $timeout, $mdUtil) {\n  /** @type {$timeout} **/\n  this.$timeout = $timeout;\n\n  /** @type {Object} */\n  this.$mdConstant = $mdConstant;\n\n  /** @type {angular.$scope} */\n  this.$scope = $scope;\n\n  /** @type {angular.$scope} */\n  this.parent = $scope.$parent;\n\n  /** @type {$mdUtil} */\n  this.$mdUtil = $mdUtil;\n\n  /** @type {$log} */\n  this.$log = $log;\n\n  /** @type {$element} */\n  this.$element = $element;\n\n  /** @type {angular.NgModelController} */\n  this.ngModelCtrl = null;\n\n  /** @type {angular.NgModelController} */\n  this.userInputNgModelCtrl = null;\n\n  /** @type {MdAutocompleteCtrl} */\n  this.autocompleteCtrl = null;\n\n  /** @type {Element} */\n  this.userInputElement = null;\n\n  /** @type {Array.<Object>} */\n  this.items = [];\n\n  /** @type {number} */\n  this.selectedChip = -1;\n\n  /** @type {string} */\n  this.enableChipEdit = $mdUtil.parseAttributeBoolean($attrs.mdEnableChipEdit);\n\n  /** @type {string} */\n  this.addOnBlur = $mdUtil.parseAttributeBoolean($attrs.mdAddOnBlur);\n\n  /**\n   * Hidden hint text for how to delete a chip. Used to give context to screen readers.\n   * @type {string}\n   */\n  this.deleteHint = 'Press delete to remove this chip.';\n\n  /**\n   * Hidden label for the delete button. Used to give context to screen readers.\n   * @type {string}\n   */\n  this.deleteButtonLabel = 'Remove';\n\n  /**\n   * Model used by the input element.\n   * @type {string}\n   */\n  this.chipBuffer = '';\n\n  /**\n   * Whether to use the transformChip expression to transform the chip buffer\n   * before appending it to the list.\n   * @type {boolean}\n   */\n  this.useTransformChip = false;\n\n  /**\n   * Whether to use the onAdd expression to notify of chip additions.\n   * @type {boolean}\n   */\n  this.useOnAdd = false;\n\n  /**\n   * Whether to use the onRemove expression to notify of chip removals.\n   * @type {boolean}\n   */\n  this.useOnRemove = false;\n\n  /**\n   * Whether to use the onSelect expression to notify the component's user\n   * after selecting a chip from the list.\n   * @type {boolean}\n   */\n}\n\n/**\n * Handles the keydown event on the input element: by default <enter> appends\n * the buffer to the chip list, while backspace removes the last chip in the\n * list if the current buffer is empty.\n * @param event\n */\nMdChipsCtrl.prototype.inputKeydown = function(event) {\n  var chipBuffer = this.getChipBuffer();\n\n  // If we have an autocomplete, and it handled the event, we have nothing to do\n  if (this.autocompleteCtrl && event.isDefaultPrevented && event.isDefaultPrevented()) {\n    return;\n  }\n\n  if (event.keyCode === this.$mdConstant.KEY_CODE.BACKSPACE) {\n    // Only select and focus the previous chip, if the current caret position of the\n    // input element is at the beginning.\n    if (this.getCursorPosition(event.target) !== 0) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (this.items.length) {\n      this.selectAndFocusChipSafe(this.items.length - 1);\n    }\n\n    return;\n  }\n\n  // By default <enter> appends the buffer to the chip list.\n  if (!this.separatorKeys || this.separatorKeys.length < 1) {\n    this.separatorKeys = [this.$mdConstant.KEY_CODE.ENTER];\n  }\n\n  // Support additional separator key codes in an array of `md-separator-keys`.\n  if (this.separatorKeys.indexOf(event.keyCode) !== -1) {\n    if ((this.autocompleteCtrl && this.requireMatch) || !chipBuffer) return;\n    event.preventDefault();\n\n    // Only append the chip and reset the chip buffer if the max chips limit isn't reached.\n    if (this.hasMaxChipsReached()) return;\n\n    this.appendChip(chipBuffer.trim());\n    this.resetChipBuffer();\n  }\n};\n\n/**\n * Returns the cursor position of the specified input element.\n * @param element HTMLInputElement\n * @returns {Number} Cursor Position of the input.\n */\nMdChipsCtrl.prototype.getCursorPosition = function(element) {\n  /*\n   * Figure out whether the current input for the chips buffer is valid for using\n   * the selectionStart / end property to retrieve the cursor position.\n   * Some browsers do not allow the use of those attributes, on different input types.\n   */\n  try {\n    if (element.selectionStart === element.selectionEnd) {\n      return element.selectionStart;\n    }\n  } catch (e) {\n    if (!element.value) {\n      return 0;\n    }\n  }\n};\n\n\n/**\n * Updates the content of the chip at given index\n * @param chipIndex\n * @param chipContents\n */\nMdChipsCtrl.prototype.updateChipContents = function(chipIndex, chipContents){\n  if(chipIndex >= 0 && chipIndex < this.items.length) {\n    this.items[chipIndex] = chipContents;\n    this.ngModelCtrl.$setDirty();\n  }\n};\n\n\n/**\n * Returns true if a chip is currently being edited. False otherwise.\n * @return {boolean}\n */\nMdChipsCtrl.prototype.isEditingChip = function() {\n  return !!this.$element[0].querySelector('._md-chip-editing');\n};\n\n\nMdChipsCtrl.prototype.isRemovable = function() {\n  // Return false if we have static chips\n  if (!this.ngModelCtrl) {\n    return false;\n  }\n\n  return this.readonly ? this.removable :\n         angular.isDefined(this.removable) ? this.removable : true;\n};\n\n/**\n * Handles the keydown event on the chip elements: backspace removes the selected chip, arrow\n * keys switch which chips is active\n * @param event\n */\nMdChipsCtrl.prototype.chipKeydown = function (event) {\n  if (this.getChipBuffer()) return;\n  if (this.isEditingChip()) return;\n\n  switch (event.keyCode) {\n    case this.$mdConstant.KEY_CODE.BACKSPACE:\n    case this.$mdConstant.KEY_CODE.DELETE:\n      if (this.selectedChip < 0) return;\n      event.preventDefault();\n      // Cancel the delete action only after the event cancel. Otherwise the page will go back.\n      if (!this.isRemovable()) return;\n      this.removeAndSelectAdjacentChip(this.selectedChip);\n      break;\n    case this.$mdConstant.KEY_CODE.LEFT_ARROW:\n      event.preventDefault();\n      if (this.selectedChip < 0) this.selectedChip = this.items.length;\n      if (this.items.length) this.selectAndFocusChipSafe(this.selectedChip - 1);\n      break;\n    case this.$mdConstant.KEY_CODE.RIGHT_ARROW:\n      event.preventDefault();\n      this.selectAndFocusChipSafe(this.selectedChip + 1);\n      break;\n    case this.$mdConstant.KEY_CODE.ESCAPE:\n    case this.$mdConstant.KEY_CODE.TAB:\n      if (this.selectedChip < 0) return;\n      event.preventDefault();\n      this.onFocus();\n      break;\n  }\n};\n\n/**\n * Get the input's placeholder - uses `placeholder` when list is empty and `secondary-placeholder`\n * when the list is non-empty. If `secondary-placeholder` is not provided, `placeholder` is used\n * always.\n */\nMdChipsCtrl.prototype.getPlaceholder = function() {\n  // Allow `secondary-placeholder` to be blank.\n  var useSecondary = (this.items && this.items.length &&\n      (this.secondaryPlaceholder == '' || this.secondaryPlaceholder));\n  return useSecondary ? this.secondaryPlaceholder : this.placeholder;\n};\n\n/**\n * Removes chip at {@code index} and selects the adjacent chip.\n * @param index\n */\nMdChipsCtrl.prototype.removeAndSelectAdjacentChip = function(index) {\n  var selIndex = this.getAdjacentChipIndex(index);\n  this.removeChip(index);\n  this.$timeout(angular.bind(this, function () {\n      this.selectAndFocusChipSafe(selIndex);\n  }));\n};\n\n/**\n * Sets the selected chip index to -1.\n */\nMdChipsCtrl.prototype.resetSelectedChip = function() {\n  this.selectedChip = -1;\n};\n\n/**\n * Gets the index of an adjacent chip to select after deletion. Adjacency is\n * determined as the next chip in the list, unless the target chip is the\n * last in the list, then it is the chip immediately preceding the target. If\n * there is only one item in the list, -1 is returned (select none).\n * The number returned is the index to select AFTER the target has been\n * removed.\n * If the current chip is not selected, then -1 is returned to select none.\n */\nMdChipsCtrl.prototype.getAdjacentChipIndex = function(index) {\n  var len = this.items.length - 1;\n  return (len == 0) ? -1 :\n      (index == len) ? index -1 : index;\n};\n\n/**\n * Append the contents of the buffer to the chip list. This method will first\n * call out to the md-transform-chip method, if provided.\n *\n * @param newChip\n */\nMdChipsCtrl.prototype.appendChip = function(newChip) {\n  if (this.useTransformChip && this.transformChip) {\n    var transformedChip = this.transformChip({'$chip': newChip});\n\n    // Check to make sure the chip is defined before assigning it, otherwise, we'll just assume\n    // they want the string version.\n    if (angular.isDefined(transformedChip)) {\n      newChip = transformedChip;\n    }\n  }\n\n  // If items contains an identical object to newChip, do not append\n  if (angular.isObject(newChip)){\n    var identical = this.items.some(function(item){\n      return angular.equals(newChip, item);\n    });\n    if (identical) return;\n  }\n\n  // Check for a null (but not undefined), or existing chip and cancel appending\n  if (newChip == null || this.items.indexOf(newChip) + 1) return;\n\n  // Append the new chip onto our list\n  var index = this.items.push(newChip);\n\n  // Update model validation\n  this.ngModelCtrl.$setDirty();\n  this.validateModel();\n\n  // If they provide the md-on-add attribute, notify them of the chip addition\n  if (this.useOnAdd && this.onAdd) {\n    this.onAdd({ '$chip': newChip, '$index': index });\n  }\n};\n\n/**\n * Sets whether to use the md-transform-chip expression. This expression is\n * bound to scope and controller in {@code MdChipsDirective} as\n * {@code transformChip}. Due to the nature of directive scope bindings, the\n * controller cannot know on its own/from the scope whether an expression was\n * actually provided.\n */\nMdChipsCtrl.prototype.useTransformChipExpression = function() {\n  this.useTransformChip = true;\n};\n\n/**\n * Sets whether to use the md-on-add expression. This expression is\n * bound to scope and controller in {@code MdChipsDirective} as\n * {@code onAdd}. Due to the nature of directive scope bindings, the\n * controller cannot know on its own/from the scope whether an expression was\n * actually provided.\n */\nMdChipsCtrl.prototype.useOnAddExpression = function() {\n  this.useOnAdd = true;\n};\n\n/**\n * Sets whether to use the md-on-remove expression. This expression is\n * bound to scope and controller in {@code MdChipsDirective} as\n * {@code onRemove}. Due to the nature of directive scope bindings, the\n * controller cannot know on its own/from the scope whether an expression was\n * actually provided.\n */\nMdChipsCtrl.prototype.useOnRemoveExpression = function() {\n  this.useOnRemove = true;\n};\n\n/*\n * Sets whether to use the md-on-select expression. This expression is\n * bound to scope and controller in {@code MdChipsDirective} as\n * {@code onSelect}. Due to the nature of directive scope bindings, the\n * controller cannot know on its own/from the scope whether an expression was\n * actually provided.\n */\nMdChipsCtrl.prototype.useOnSelectExpression = function() {\n  this.useOnSelect = true;\n};\n\n/**\n * Gets the input buffer. The input buffer can be the model bound to the\n * default input item {@code this.chipBuffer}, the {@code selectedItem}\n * model of an {@code md-autocomplete}, or, through some magic, the model\n * bound to any inpput or text area element found within a\n * {@code md-input-container} element.\n * @return {string}\n */\nMdChipsCtrl.prototype.getChipBuffer = function() {\n  var chipBuffer =  !this.userInputElement ? this.chipBuffer :\n                     this.userInputNgModelCtrl ? this.userInputNgModelCtrl.$viewValue :\n                     this.userInputElement[0].value;\n\n  // Ensure that the chip buffer is always a string. For example, the input element buffer might be falsy.\n  return angular.isString(chipBuffer) ? chipBuffer : '';\n};\n\n/**\n * Resets the input buffer for either the internal input or user provided input element.\n */\nMdChipsCtrl.prototype.resetChipBuffer = function() {\n  if (this.userInputElement) {\n    if (this.userInputNgModelCtrl) {\n      this.userInputNgModelCtrl.$setViewValue('');\n      this.userInputNgModelCtrl.$render();\n    } else {\n      this.userInputElement[0].value = '';\n    }\n  } else {\n    this.chipBuffer = '';\n  }\n};\n\nMdChipsCtrl.prototype.hasMaxChipsReached = function() {\n  if (angular.isString(this.maxChips)) this.maxChips = parseInt(this.maxChips, 10) || 0;\n\n  return this.maxChips > 0 && this.items.length >= this.maxChips;\n};\n\n/**\n * Updates the validity properties for the ngModel.\n */\nMdChipsCtrl.prototype.validateModel = function() {\n  this.ngModelCtrl.$setValidity('md-max-chips', !this.hasMaxChipsReached());\n};\n\n/**\n * Removes the chip at the given index.\n * @param index\n */\nMdChipsCtrl.prototype.removeChip = function(index) {\n  var removed = this.items.splice(index, 1);\n\n  // Update model validation\n  this.ngModelCtrl.$setDirty();\n  this.validateModel();\n\n  if (removed && removed.length && this.useOnRemove && this.onRemove) {\n    this.onRemove({ '$chip': removed[0], '$index': index });\n  }\n};\n\nMdChipsCtrl.prototype.removeChipAndFocusInput = function (index) {\n  this.removeChip(index);\n\n  if (this.autocompleteCtrl) {\n    // Always hide the autocomplete dropdown before focusing the autocomplete input.\n    // Wait for the input to move horizontally, because the chip was removed.\n    // This can lead to an incorrect dropdown position.\n    this.autocompleteCtrl.hidden = true;\n    this.$mdUtil.nextTick(this.onFocus.bind(this));\n  } else {\n    this.onFocus();\n  }\n\n};\n/**\n * Selects the chip at `index`,\n * @param index\n */\nMdChipsCtrl.prototype.selectAndFocusChipSafe = function(index) {\n  if (!this.items.length) {\n    this.selectChip(-1);\n    this.onFocus();\n    return;\n  }\n  if (index === this.items.length) return this.onFocus();\n  index = Math.max(index, 0);\n  index = Math.min(index, this.items.length - 1);\n  this.selectChip(index);\n  this.focusChip(index);\n};\n\n/**\n * Marks the chip at the given index as selected.\n * @param index\n */\nMdChipsCtrl.prototype.selectChip = function(index) {\n  if (index >= -1 && index <= this.items.length) {\n    this.selectedChip = index;\n\n    // Fire the onSelect if provided\n    if (this.useOnSelect && this.onSelect) {\n      this.onSelect({'$chip': this.items[this.selectedChip] });\n    }\n  } else {\n    this.$log.warn('Selected Chip index out of bounds; ignoring.');\n  }\n};\n\n/**\n * Selects the chip at `index` and gives it focus.\n * @param index\n */\nMdChipsCtrl.prototype.selectAndFocusChip = function(index) {\n  this.selectChip(index);\n  if (index != -1) {\n    this.focusChip(index);\n  }\n};\n\n/**\n * Call `focus()` on the chip at `index`\n */\nMdChipsCtrl.prototype.focusChip = function(index) {\n  this.$element[0].querySelector('md-chip[index=\"' + index + '\"] .md-chip-content').focus();\n};\n\n/**\n * Configures the required interactions with the ngModel Controller.\n * Specifically, set {@code this.items} to the {@code NgModelCtrl#$viewVale}.\n * @param ngModelCtrl\n */\nMdChipsCtrl.prototype.configureNgModel = function(ngModelCtrl) {\n  this.ngModelCtrl = ngModelCtrl;\n\n  var self = this;\n  ngModelCtrl.$render = function() {\n    // model is updated. do something.\n    self.items = self.ngModelCtrl.$viewValue;\n  };\n};\n\nMdChipsCtrl.prototype.onFocus = function () {\n  var input = this.$element[0].querySelector('input');\n  input && input.focus();\n  this.resetSelectedChip();\n};\n\nMdChipsCtrl.prototype.onInputFocus = function () {\n  this.inputHasFocus = true;\n  this.resetSelectedChip();\n};\n\nMdChipsCtrl.prototype.onInputBlur = function () {\n  this.inputHasFocus = false;\n\n  var chipBuffer = this.getChipBuffer().trim();\n\n  // Update the custom chip validators.\n  this.validateModel();\n\n  var isModelValid = this.ngModelCtrl.$valid;\n\n  if (this.userInputNgModelCtrl) {\n    isModelValid &= this.userInputNgModelCtrl.$valid;\n  }\n\n  // Only append the chip and reset the chip buffer if the chips and input ngModel is valid.\n  if (this.addOnBlur && chipBuffer && isModelValid) {\n    this.appendChip(chipBuffer);\n    this.resetChipBuffer();\n  }\n};\n\n/**\n * Configure event bindings on a user-provided input element.\n * @param inputElement\n */\nMdChipsCtrl.prototype.configureUserInput = function(inputElement) {\n  this.userInputElement = inputElement;\n\n  // Find the NgModelCtrl for the input element\n  var ngModelCtrl = inputElement.controller('ngModel');\n  // `.controller` will look in the parent as well.\n  if (ngModelCtrl != this.ngModelCtrl) {\n    this.userInputNgModelCtrl = ngModelCtrl;\n  }\n\n  var scope = this.$scope;\n  var ctrl = this;\n\n  // Run all of the events using evalAsync because a focus may fire a blur in the same digest loop\n  var scopeApplyFn = function(event, fn) {\n    scope.$evalAsync(angular.bind(ctrl, fn, event));\n  };\n\n  // Bind to keydown and focus events of input\n  inputElement\n      .attr({ tabindex: 0 })\n      .on('keydown', function(event) { scopeApplyFn(event, ctrl.inputKeydown) })\n      .on('focus', function(event) { scopeApplyFn(event, ctrl.onInputFocus) })\n      .on('blur', function(event) { scopeApplyFn(event, ctrl.onInputBlur) })\n};\n\nMdChipsCtrl.prototype.configureAutocomplete = function(ctrl) {\n  if (ctrl) {\n    this.autocompleteCtrl = ctrl;\n\n    ctrl.registerSelectedItemWatcher(angular.bind(this, function (item) {\n      if (item) {\n        // Only append the chip and reset the chip buffer if the max chips limit isn't reached.\n        if (this.hasMaxChipsReached()) return;\n\n        this.appendChip(item);\n        this.resetChipBuffer();\n      }\n    }));\n\n    this.$element.find('input')\n        .on('focus',angular.bind(this, this.onInputFocus) )\n        .on('blur', angular.bind(this, this.onInputBlur) );\n  }\n};\n\nMdChipsCtrl.prototype.hasFocus = function () {\n  return this.inputHasFocus || this.selectedChip >= 0;\n};\n\n  \n  MdChips['$inject'] = [\"$mdTheming\", \"$mdUtil\", \"$compile\", \"$log\", \"$timeout\", \"$$mdSvgRegistry\"];angular\n      .module('material.components.chips')\n      .directive('mdChips', MdChips);\n\n  /**\n   * @ngdoc directive\n   * @name mdChips\n   * @module material.components.chips\n   *\n   * @description\n   * `<md-chips>` is an input component for building lists of strings or objects. The list items are\n   * displayed as 'chips'. This component can make use of an `<input>` element or an \n   * `<md-autocomplete>` element.\n   *\n   * ### Custom templates\n   * A custom template may be provided to render the content of each chip. This is achieved by\n   * specifying an `<md-chip-template>` element containing the custom content as a child of\n   * `<md-chips>`.\n   *\n   * Note: Any attributes on\n   * `<md-chip-template>` will be dropped as only the innerHTML is used for the chip template. The\n   * variables `$chip` and `$index` are available in the scope of `<md-chip-template>`, representing\n   * the chip object and its index in the list of chips, respectively.\n   * To override the chip delete control, include an element (ideally a button) with the attribute\n   * `md-chip-remove`. A click listener to remove the chip will be added automatically. The element\n   * is also placed as a sibling to the chip content (on which there are also click listeners) to\n   * avoid a nested ng-click situation.\n   *\n   * <h3> Pending Features </h3>\n   * <ul style=\"padding-left:20px;\">\n   *\n   *   <ul>Style\n   *     <li>Colours for hover, press states (ripple?).</li>\n   *   </ul>\n   *\n   *   <ul>Validation\n   *     <li>allow a validation callback</li>\n   *     <li>hilighting style for invalid chips</li>\n   *   </ul>\n   *\n   *   <ul>Item mutation\n   *     <li>Support `\n   *       <md-chip-edit>` template, show/hide the edit element on tap/click? double tap/double\n   *       click?\n   *     </li>\n   *   </ul>\n   *\n   *   <ul>Truncation and Disambiguation (?)\n   *     <li>Truncate chip text where possible, but do not truncate entries such that two are\n   *     indistinguishable.</li>\n   *   </ul>\n   *\n   *   <ul>Drag and Drop\n   *     <li>Drag and drop chips between related `<md-chips>` elements.\n   *     </li>\n   *   </ul>\n   * </ul>\n   *\n   * <span style=\"font-size:.8em;text-align:center\">\n   *   Warning: This component is a WORK IN PROGRESS. If you use it now,\n   *   it will probably break on you in the future.\n   * </span>\n   *\n   * Sometimes developers want to limit the amount of possible chips.<br/>\n   * You can specify the maximum amount of chips by using the following markup.\n   *\n   * <hljs lang=\"html\">\n   *   <md-chips\n   *       ng-model=\"myItems\"\n   *       placeholder=\"Add an item\"\n   *       md-max-chips=\"5\">\n   *   </md-chips>\n   * </hljs>\n   *\n   * In some cases, you have an autocomplete inside of the `md-chips`.<br/>\n   * When the maximum amount of chips has been reached, you can also disable the autocomplete selection.<br/>\n   * Here is an example markup.\n   *\n   * <hljs lang=\"html\">\n   *   <md-chips ng-model=\"myItems\" md-max-chips=\"5\">\n   *     <md-autocomplete ng-hide=\"myItems.length > 5\" ...></md-autocomplete>\n   *   </md-chips>\n   * </hljs>\n   *\n   * @param {string=|object=} ng-model A model to bind the list of items to\n   * @param {string=} placeholder Placeholder text that will be forwarded to the input.\n   * @param {string=} secondary-placeholder Placeholder text that will be forwarded to the input,\n   *    displayed when there is at least one item in the list\n   * @param {boolean=} md-removable Enables or disables the deletion of chips through the\n   *    removal icon or the Delete/Backspace key. Defaults to true.\n   * @param {boolean=} readonly Disables list manipulation (deleting or adding list items), hiding\n   *    the input and delete buttons. If no `ng-model` is provided, the chips will automatically be\n   *    marked as readonly.<br/><br/>\n   *    When `md-removable` is not defined, the `md-remove` behavior will be overwritten and disabled.\n   * @param {string=} md-enable-chip-edit Set this to \"true\" to enable editing of chip contents. The user can \n   *    go into edit mode with pressing \"space\", \"enter\", or double clicking on the chip. Chip edit is only\n   *    supported for chips with basic template.\n   * @param {number=} md-max-chips The maximum number of chips allowed to add through user input.\n   *    <br/><br/>The validation property `md-max-chips` can be used when the max chips\n   *    amount is reached.\n   * @param {boolean=} md-add-on-blur When set to true, remaining text inside of the input will\n   *    be converted into a new chip on blur.\n   * @param {expression} md-transform-chip An expression of form `myFunction($chip)` that when called\n   *    expects one of the following return values:\n   *    - an object representing the `$chip` input string\n   *    - `undefined` to simply add the `$chip` input string, or\n   *    - `null` to prevent the chip from being appended\n   * @param {expression=} md-on-add An expression which will be called when a chip has been\n   *    added.\n   * @param {expression=} md-on-remove An expression which will be called when a chip has been\n   *    removed.\n   * @param {expression=} md-on-select An expression which will be called when a chip is selected.\n   * @param {boolean} md-require-match If true, and the chips template contains an autocomplete,\n   *    only allow selection of pre-defined chips (i.e. you cannot add new ones).\n   * @param {string=} delete-hint A string read by screen readers instructing users that pressing\n   *    the delete key will remove the chip.\n   * @param {string=} delete-button-label A label for the delete button. Also hidden and read by\n   *    screen readers.\n   * @param {expression=} md-separator-keys An array of key codes used to separate chips.\n   *\n   * @usage\n   * <hljs lang=\"html\">\n   *   <md-chips\n   *       ng-model=\"myItems\"\n   *       placeholder=\"Add an item\"\n   *       readonly=\"isReadOnly\">\n   *   </md-chips>\n   * </hljs>\n   *\n   * <h3>Validation</h3>\n   * When using [ngMessages](https://docs.angularjs.org/api/ngMessages), you can show errors based\n   * on our custom validators.\n   * <hljs lang=\"html\">\n   *   <form name=\"userForm\">\n   *     <md-chips\n   *       name=\"fruits\"\n   *       ng-model=\"myItems\"\n   *       placeholder=\"Add an item\"\n   *       md-max-chips=\"5\">\n   *     </md-chips>\n   *     <div ng-messages=\"userForm.fruits.$error\" ng-if=\"userForm.$dirty\">\n   *       <div ng-message=\"md-max-chips\">You reached the maximum amount of chips</div>\n   *    </div>\n   *   </form>\n   * </hljs>\n   *\n   */\n\n\n  var MD_CHIPS_TEMPLATE = '\\\n      <md-chips-wrap\\\n          ng-keydown=\"$mdChipsCtrl.chipKeydown($event)\"\\\n          ng-class=\"{ \\'md-focused\\': $mdChipsCtrl.hasFocus(), \\\n                      \\'md-readonly\\': !$mdChipsCtrl.ngModelCtrl || $mdChipsCtrl.readonly,\\\n                      \\'md-removable\\': $mdChipsCtrl.isRemovable() }\"\\\n          class=\"md-chips\">\\\n        <md-chip ng-repeat=\"$chip in $mdChipsCtrl.items\"\\\n            index=\"{{$index}}\"\\\n            ng-class=\"{\\'md-focused\\': $mdChipsCtrl.selectedChip == $index, \\'md-readonly\\': !$mdChipsCtrl.ngModelCtrl || $mdChipsCtrl.readonly}\">\\\n          <div class=\"md-chip-content\"\\\n              tabindex=\"-1\"\\\n              aria-hidden=\"true\"\\\n              ng-click=\"!$mdChipsCtrl.readonly && $mdChipsCtrl.focusChip($index)\"\\\n              ng-focus=\"!$mdChipsCtrl.readonly && $mdChipsCtrl.selectChip($index)\"\\\n              md-chip-transclude=\"$mdChipsCtrl.chipContentsTemplate\"></div>\\\n          <div ng-if=\"$mdChipsCtrl.isRemovable()\"\\\n               class=\"md-chip-remove-container\"\\\n               md-chip-transclude=\"$mdChipsCtrl.chipRemoveTemplate\"></div>\\\n        </md-chip>\\\n        <div class=\"md-chip-input-container\" ng-if=\"!$mdChipsCtrl.readonly && $mdChipsCtrl.ngModelCtrl\">\\\n          <div md-chip-transclude=\"$mdChipsCtrl.chipInputTemplate\"></div>\\\n        </div>\\\n      </md-chips-wrap>';\n\n  var CHIP_INPUT_TEMPLATE = '\\\n        <input\\\n            class=\"md-input\"\\\n            tabindex=\"0\"\\\n            placeholder=\"{{$mdChipsCtrl.getPlaceholder()}}\"\\\n            aria-label=\"{{$mdChipsCtrl.getPlaceholder()}}\"\\\n            ng-model=\"$mdChipsCtrl.chipBuffer\"\\\n            ng-focus=\"$mdChipsCtrl.onInputFocus()\"\\\n            ng-blur=\"$mdChipsCtrl.onInputBlur()\"\\\n            ng-keydown=\"$mdChipsCtrl.inputKeydown($event)\">';\n\n  var CHIP_DEFAULT_TEMPLATE = '\\\n      <span>{{$chip}}</span>';\n\n  var CHIP_REMOVE_TEMPLATE = '\\\n      <button\\\n          class=\"md-chip-remove\"\\\n          ng-if=\"$mdChipsCtrl.isRemovable()\"\\\n          ng-click=\"$mdChipsCtrl.removeChipAndFocusInput($$replacedScope.$index)\"\\\n          type=\"button\"\\\n          aria-hidden=\"true\"\\\n          tabindex=\"-1\">\\\n        <md-icon md-svg-src=\"{{ $mdChipsCtrl.mdCloseIcon }}\"></md-icon>\\\n        <span class=\"md-visually-hidden\">\\\n          {{$mdChipsCtrl.deleteButtonLabel}}\\\n        </span>\\\n      </button>';\n\n  /**\n   * MDChips Directive Definition\n   */\n  function MdChips ($mdTheming, $mdUtil, $compile, $log, $timeout, $$mdSvgRegistry) {\n    // Run our templates through $mdUtil.processTemplate() to allow custom start/end symbols\n    var templates = getTemplates();\n\n    return {\n      template: function(element, attrs) {\n        // Clone the element into an attribute. By prepending the attribute\n        // name with '$', Angular won't write it into the DOM. The cloned\n        // element propagates to the link function via the attrs argument,\n        // where various contained-elements can be consumed.\n        attrs['$mdUserTemplate'] = element.clone();\n        return templates.chips;\n      },\n      require: ['mdChips'],\n      restrict: 'E',\n      controller: 'MdChipsCtrl',\n      controllerAs: '$mdChipsCtrl',\n      bindToController: true,\n      compile: compile,\n      scope: {\n        readonly: '=readonly',\n        removable: '=mdRemovable',\n        placeholder: '@',\n        secondaryPlaceholder: '@',\n        maxChips: '@mdMaxChips',\n        transformChip: '&mdTransformChip',\n        onAppend: '&mdOnAppend',\n        onAdd: '&mdOnAdd',\n        onRemove: '&mdOnRemove',\n        onSelect: '&mdOnSelect',\n        deleteHint: '@',\n        deleteButtonLabel: '@',\n        separatorKeys: '=?mdSeparatorKeys',\n        requireMatch: '=?mdRequireMatch'\n      }\n    };\n\n    /**\n     * Builds the final template for `md-chips` and returns the postLink function.\n     *\n     * Building the template involves 3 key components:\n     * static chips\n     * chip template\n     * input control\n     *\n     * If no `ng-model` is provided, only the static chip work needs to be done.\n     *\n     * If no user-passed `md-chip-template` exists, the default template is used. This resulting\n     * template is appended to the chip content element.\n     *\n     * The remove button may be overridden by passing an element with an md-chip-remove attribute.\n     *\n     * If an `input` or `md-autocomplete` element is provided by the caller, it is set aside for\n     * transclusion later. The transclusion happens in `postLink` as the parent scope is required.\n     * If no user input is provided, a default one is appended to the input container node in the\n     * template.\n     *\n     * Static Chips (i.e. `md-chip` elements passed from the caller) are gathered and set aside for\n     * transclusion in the `postLink` function.\n     *\n     *\n     * @param element\n     * @param attr\n     * @returns {Function}\n     */\n    function compile(element, attr) {\n      // Grab the user template from attr and reset the attribute to null.\n      var userTemplate = attr['$mdUserTemplate'];\n      attr['$mdUserTemplate'] = null;\n\n      var chipTemplate = getTemplateByQuery('md-chips>md-chip-template');\n\n      var chipRemoveSelector = $mdUtil\n        .prefixer()\n        .buildList('md-chip-remove')\n        .map(function(attr) {\n          return 'md-chips>*[' + attr + ']';\n        })\n        .join(',');\n\n      // Set the chip remove, chip contents and chip input templates. The link function will put\n      // them on the scope for transclusion later.\n      var chipRemoveTemplate   = getTemplateByQuery(chipRemoveSelector) || templates.remove,\n          chipContentsTemplate = chipTemplate || templates.default,\n          chipInputTemplate    = getTemplateByQuery('md-chips>md-autocomplete')\n              || getTemplateByQuery('md-chips>input')\n              || templates.input,\n          staticChips = userTemplate.find('md-chip');\n\n      // Warn of malformed template. See #2545\n      if (userTemplate[0].querySelector('md-chip-template>*[md-chip-remove]')) {\n        $log.warn('invalid placement of md-chip-remove within md-chip-template.');\n      }\n\n      function getTemplateByQuery (query) {\n        if (!attr.ngModel) return;\n        var element = userTemplate[0].querySelector(query);\n        return element && element.outerHTML;\n      }\n\n      /**\n       * Configures controller and transcludes.\n       */\n      return function postLink(scope, element, attrs, controllers) {\n        $mdUtil.initOptionalProperties(scope, attr);\n\n        $mdTheming(element);\n        var mdChipsCtrl = controllers[0];\n        if(chipTemplate) {\n          // Chip editing functionality assumes we are using the default chip template.\n          mdChipsCtrl.enableChipEdit = false;\n        }\n\n        mdChipsCtrl.chipContentsTemplate = chipContentsTemplate;\n        mdChipsCtrl.chipRemoveTemplate   = chipRemoveTemplate;\n        mdChipsCtrl.chipInputTemplate    = chipInputTemplate;\n\n        mdChipsCtrl.mdCloseIcon = $$mdSvgRegistry.mdClose;\n\n        element\n            .attr({ 'aria-hidden': true, tabindex: -1 })\n            .on('focus', function () { mdChipsCtrl.onFocus(); });\n\n        if (attr.ngModel) {\n          mdChipsCtrl.configureNgModel(element.controller('ngModel'));\n\n          // If an `md-transform-chip` attribute was set, tell the controller to use the expression\n          // before appending chips.\n          if (attrs.mdTransformChip) mdChipsCtrl.useTransformChipExpression();\n\n          // If an `md-on-append` attribute was set, tell the controller to use the expression\n          // when appending chips.\n          //\n          // DEPRECATED: Will remove in official 1.0 release\n          if (attrs.mdOnAppend) mdChipsCtrl.useOnAppendExpression();\n\n          // If an `md-on-add` attribute was set, tell the controller to use the expression\n          // when adding chips.\n          if (attrs.mdOnAdd) mdChipsCtrl.useOnAddExpression();\n\n          // If an `md-on-remove` attribute was set, tell the controller to use the expression\n          // when removing chips.\n          if (attrs.mdOnRemove) mdChipsCtrl.useOnRemoveExpression();\n\n          // If an `md-on-select` attribute was set, tell the controller to use the expression\n          // when selecting chips.\n          if (attrs.mdOnSelect) mdChipsCtrl.useOnSelectExpression();\n\n          // The md-autocomplete and input elements won't be compiled until after this directive\n          // is complete (due to their nested nature). Wait a tick before looking for them to\n          // configure the controller.\n          if (chipInputTemplate != templates.input) {\n            // The autocomplete will not appear until the readonly attribute is not true (i.e.\n            // false or undefined), so we have to watch the readonly and then on the next tick\n            // after the chip transclusion has run, we can configure the autocomplete and user\n            // input.\n            scope.$watch('$mdChipsCtrl.readonly', function(readonly) {\n              if (!readonly) {\n\n                $mdUtil.nextTick(function(){\n\n                  if (chipInputTemplate.indexOf('<md-autocomplete') === 0) {\n                    var autocompleteEl = element.find('md-autocomplete');\n                    mdChipsCtrl.configureAutocomplete(autocompleteEl.controller('mdAutocomplete'));\n                  }\n\n                  mdChipsCtrl.configureUserInput(element.find('input'));\n                });\n              }\n            });\n          }\n\n          // At the next tick, if we find an input, make sure it has the md-input class\n          $mdUtil.nextTick(function() {\n            var input = element.find('input');\n\n            input && input.toggleClass('md-input', true);\n          });\n        }\n\n        // Compile with the parent's scope and prepend any static chips to the wrapper.\n        if (staticChips.length > 0) {\n          var compiledStaticChips = $compile(staticChips.clone())(scope.$parent);\n          $timeout(function() { element.find('md-chips-wrap').prepend(compiledStaticChips); });\n        }\n      };\n    }\n\n    function getTemplates() {\n      return {\n        chips: $mdUtil.processTemplate(MD_CHIPS_TEMPLATE),\n        input: $mdUtil.processTemplate(CHIP_INPUT_TEMPLATE),\n        default: $mdUtil.processTemplate(CHIP_DEFAULT_TEMPLATE),\n        remove: $mdUtil.processTemplate(CHIP_REMOVE_TEMPLATE)\n      };\n    }\n  }\n\nangular\n    .module('material.components.chips')\n    .controller('MdContactChipsCtrl', MdContactChipsCtrl);\n\n\n\n/**\n * Controller for the MdContactChips component\n * @constructor\n */\nfunction MdContactChipsCtrl () {\n  /** @type {Object} */\n  this.selectedItem = null;\n\n  /** @type {string} */\n  this.searchText = '';\n}\n\n\nMdContactChipsCtrl.prototype.queryContact = function(searchText) {\n  var results = this.contactQuery({'$query': searchText});\n  return this.filterSelected ?\n      results.filter(angular.bind(this, this.filterSelectedContacts)) : results;\n};\n\n\nMdContactChipsCtrl.prototype.itemName = function(item) {\n  return item[this.contactName];\n};\n\n\nMdContactChipsCtrl.prototype.filterSelectedContacts = function(contact) {\n  return this.contacts.indexOf(contact) == -1;\n};\n\n\nMdContactChips['$inject'] = [\"$mdTheming\", \"$mdUtil\"];angular\n  .module('material.components.chips')\n  .directive('mdContactChips', MdContactChips);\n\n/**\n * @ngdoc directive\n * @name mdContactChips\n * @module material.components.chips\n *\n * @description\n * `<md-contact-chips>` is an input component based on `md-chips` and makes use of an\n * `md-autocomplete` element. The component allows the caller to supply a query expression which\n * returns  a list of possible contacts. The user can select one of these and add it to the list of\n * chips.\n *\n * You may also use the `md-highlight-text` directive along with its parameters to control the\n * appearance of the matched text inside of the contacts' autocomplete popup.\n *\n * @param {string=|object=} ng-model A model to bind the list of items to\n * @param {string=} placeholder Placeholder text that will be forwarded to the input.\n * @param {string=} secondary-placeholder Placeholder text that will be forwarded to the input,\n *    displayed when there is at least on item in the list\n * @param {expression} md-contacts An expression expected to return contacts matching the search\n *    test, `$query`. If this expression involves a promise, a loading bar is displayed while\n *    waiting for it to resolve.\n * @param {string} md-contact-name The field name of the contact object representing the\n *    contact's name.\n * @param {string} md-contact-email The field name of the contact object representing the\n *    contact's email address.\n * @param {string} md-contact-image The field name of the contact object representing the\n *    contact's image.\n *\n *\n * @param {expression=} filter-selected Whether to filter selected contacts from the list of\n *    suggestions shown in the autocomplete. This attribute has been removed but may come back.\n *\n *\n *\n * @usage\n * <hljs lang=\"html\">\n *   <md-contact-chips\n *       ng-model=\"ctrl.contacts\"\n *       md-contacts=\"ctrl.querySearch($query)\"\n *       md-contact-name=\"name\"\n *       md-contact-image=\"image\"\n *       md-contact-email=\"email\"\n *       placeholder=\"To\">\n *   </md-contact-chips>\n * </hljs>\n *\n */\n\n\nvar MD_CONTACT_CHIPS_TEMPLATE = '\\\n      <md-chips class=\"md-contact-chips\"\\\n          ng-model=\"$mdContactChipsCtrl.contacts\"\\\n          md-require-match=\"$mdContactChipsCtrl.requireMatch\"\\\n          md-autocomplete-snap>\\\n          <md-autocomplete\\\n              md-menu-class=\"md-contact-chips-suggestions\"\\\n              md-selected-item=\"$mdContactChipsCtrl.selectedItem\"\\\n              md-search-text=\"$mdContactChipsCtrl.searchText\"\\\n              md-items=\"item in $mdContactChipsCtrl.queryContact($mdContactChipsCtrl.searchText)\"\\\n              md-item-text=\"$mdContactChipsCtrl.itemName(item)\"\\\n              md-no-cache=\"true\"\\\n              md-autoselect\\\n              placeholder=\"{{$mdContactChipsCtrl.contacts.length == 0 ?\\\n                  $mdContactChipsCtrl.placeholder : $mdContactChipsCtrl.secondaryPlaceholder}}\">\\\n            <div class=\"md-contact-suggestion\">\\\n              <img \\\n                  ng-src=\"{{item[$mdContactChipsCtrl.contactImage]}}\"\\\n                  alt=\"{{item[$mdContactChipsCtrl.contactName]}}\"\\\n                  ng-if=\"item[$mdContactChipsCtrl.contactImage]\" />\\\n              <span class=\"md-contact-name\" md-highlight-text=\"$mdContactChipsCtrl.searchText\"\\\n                    md-highlight-flags=\"{{$mdContactChipsCtrl.highlightFlags}}\">\\\n                {{item[$mdContactChipsCtrl.contactName]}}\\\n              </span>\\\n              <span class=\"md-contact-email\" >{{item[$mdContactChipsCtrl.contactEmail]}}</span>\\\n            </div>\\\n          </md-autocomplete>\\\n          <md-chip-template>\\\n            <div class=\"md-contact-avatar\">\\\n              <img \\\n                  ng-src=\"{{$chip[$mdContactChipsCtrl.contactImage]}}\"\\\n                  alt=\"{{$chip[$mdContactChipsCtrl.contactName]}}\"\\\n                  ng-if=\"$chip[$mdContactChipsCtrl.contactImage]\" />\\\n            </div>\\\n            <div class=\"md-contact-name\">\\\n              {{$chip[$mdContactChipsCtrl.contactName]}}\\\n            </div>\\\n          </md-chip-template>\\\n      </md-chips>';\n\n\n/**\n * MDContactChips Directive Definition\n *\n * @param $mdTheming\n * @returns {*}\n * ngInject\n */\nfunction MdContactChips($mdTheming, $mdUtil) {\n  return {\n    template: function(element, attrs) {\n      return MD_CONTACT_CHIPS_TEMPLATE;\n    },\n    restrict: 'E',\n    controller: 'MdContactChipsCtrl',\n    controllerAs: '$mdContactChipsCtrl',\n    bindToController: true,\n    compile: compile,\n    scope: {\n      contactQuery: '&mdContacts',\n      placeholder: '@',\n      secondaryPlaceholder: '@',\n      contactName: '@mdContactName',\n      contactImage: '@mdContactImage',\n      contactEmail: '@mdContactEmail',\n      contacts: '=ngModel',\n      requireMatch: '=?mdRequireMatch',\n      highlightFlags: '@?mdHighlightFlags'\n    }\n  };\n\n  function compile(element, attr) {\n    return function postLink(scope, element, attrs, controllers) {\n\n      $mdUtil.initOptionalProperties(scope, attr);\n      $mdTheming(element);\n\n      element.attr('tabindex', '-1');\n    };\n  }\n}\n\n})(window, window.angular);"]}