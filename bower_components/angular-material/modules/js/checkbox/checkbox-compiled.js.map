{"version":3,"sources":["checkbox.js"],"names":[],"mappings":"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","file":"checkbox-compiled.js","sourcesContent":["/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v1.1.1-master-f7ecb4f\n */\n(function( window, angular, undefined ){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.checkbox\n * @description Checkbox module!\n */\nMdCheckboxDirective['$inject'] = [\"inputDirective\", \"$mdAria\", \"$mdConstant\", \"$mdTheming\", \"$mdUtil\", \"$mdInteraction\"];\nangular\n  .module('material.components.checkbox', ['material.core'])\n  .directive('mdCheckbox', MdCheckboxDirective);\n\n/**\n * @ngdoc directive\n * @name mdCheckbox\n * @module material.components.checkbox\n * @restrict E\n *\n * @description\n * The checkbox directive is used like the normal [angular checkbox](https://docs.angularjs.org/api/ng/input/input%5Bcheckbox%5D).\n *\n * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-color-schemes)\n * the checkbox is in the accent color by default. The primary color palette may be used with\n * the `md-primary` class.\n *\n * @param {string} ng-model Assignable angular expression to data-bind to.\n * @param {string=} name Property name of the form under which the control is published.\n * @param {expression=} ng-true-value The value to which the expression should be set when selected.\n * @param {expression=} ng-false-value The value to which the expression should be set when not selected.\n * @param {string=} ng-change Angular expression to be executed when input changes due to user interaction with the input element.\n * @param {boolean=} md-no-ink Use of attribute indicates use of ripple ink effects\n * @param {string=} aria-label Adds label to checkbox for accessibility.\n *     Defaults to checkbox's text. If no default text is found, a warning will be logged.\n * @param {expression=} md-indeterminate This determines when the checkbox should be rendered as 'indeterminate'.\n *     If a truthy expression or no value is passed in the checkbox renders in the md-indeterminate state.\n *     If falsy expression is passed in it just looks like a normal unchecked checkbox.\n *     The indeterminate, checked, and unchecked states are mutually exclusive. A box cannot be in any two states at the same time.\n *     Adding the 'md-indeterminate' attribute overrides any checked/unchecked rendering logic.\n *     When using the 'md-indeterminate' attribute use 'ng-checked' to define rendering logic instead of using 'ng-model'.\n * @param {expression=} ng-checked If this expression evaluates as truthy, the 'md-checked' css class is added to the checkbox and it\n *     will appear checked.\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-checkbox ng-model=\"isChecked\" aria-label=\"Finished?\">\n *   Finished ?\n * </md-checkbox>\n *\n * <md-checkbox md-no-ink ng-model=\"hasInk\" aria-label=\"No Ink Effects\">\n *   No Ink Effects\n * </md-checkbox>\n *\n * <md-checkbox ng-disabled=\"true\" ng-model=\"isDisabled\" aria-label=\"Disabled\">\n *   Disabled\n * </md-checkbox>\n *\n * </hljs>\n *\n */\nfunction MdCheckboxDirective(inputDirective, $mdAria, $mdConstant, $mdTheming, $mdUtil, $mdInteraction) {\n  inputDirective = inputDirective[0];\n\n  return {\n    restrict: 'E',\n    transclude: true,\n    require: '?ngModel',\n    priority: $mdConstant.BEFORE_NG_ARIA,\n    template:\n      '<div class=\"md-container\" md-ink-ripple md-ink-ripple-checkbox>' +\n        '<div class=\"md-icon\"></div>' +\n      '</div>' +\n      '<div ng-transclude class=\"md-label\"></div>',\n    compile: compile\n  };\n\n  // **********************************************************\n  // Private Methods\n  // **********************************************************\n\n  function compile (tElement, tAttrs) {\n    tAttrs.$set('tabindex', tAttrs.tabindex || '0');\n    tAttrs.$set('type', 'checkbox');\n    tAttrs.$set('role', tAttrs.type);\n\n    return  {\n      pre: function(scope, element) {\n        // Attach a click handler during preLink, in order to immediately stop propagation\n        // (especially for ng-click) when the checkbox is disabled.\n        element.on('click', function(e) {\n          if (this.hasAttribute('disabled')) {\n            e.stopImmediatePropagation();\n          }\n        });\n      },\n      post: postLink\n    };\n\n    function postLink(scope, element, attr, ngModelCtrl) {\n      var isIndeterminate;\n      ngModelCtrl = ngModelCtrl || $mdUtil.fakeNgModel();\n      $mdTheming(element);\n\n      // Redirect focus events to the root element, because IE11 is always focusing the container element instead\n      // of the md-checkbox element. This causes issues when using ngModelOptions: `updateOnBlur`\n      element.children().on('focus', function() {\n        element.focus();\n      });\n\n      if ($mdUtil.parseAttributeBoolean(attr.mdIndeterminate)) {\n        setIndeterminateState();\n        scope.$watch(attr.mdIndeterminate, setIndeterminateState);\n      }\n\n      if (attr.ngChecked) {\n        scope.$watch(scope.$eval.bind(scope, attr.ngChecked), function(value) {\n          ngModelCtrl.$setViewValue(value);\n          ngModelCtrl.$render();\n        });\n      }\n\n      $$watchExpr('ngDisabled', 'tabindex', {\n        true: '-1',\n        false: attr.tabindex\n      });\n\n      $mdAria.expectWithText(element, 'aria-label');\n\n      // Reuse the original input[type=checkbox] directive from Angular core.\n      // This is a bit hacky as we need our own event listener and own render\n      // function.\n      inputDirective.link.pre(scope, {\n        on: angular.noop,\n        0: {}\n      }, attr, [ngModelCtrl]);\n\n      element.on('click', listener)\n        .on('keypress', keypressHandler)\n        .on('focus', function() {\n          if ($mdInteraction.getLastInteractionType() === 'keyboard') {\n            element.addClass('md-focused');\n          }\n        })\n        .on('blur', function() {\n          element.removeClass('md-focused');\n        });\n\n      ngModelCtrl.$render = render;\n\n      function $$watchExpr(expr, htmlAttr, valueOpts) {\n        if (attr[expr]) {\n          scope.$watch(attr[expr], function(val) {\n            if (valueOpts[val]) {\n              element.attr(htmlAttr, valueOpts[val]);\n            }\n          });\n        }\n      }\n\n      function keypressHandler(ev) {\n        var keyCode = ev.which || ev.keyCode;\n        if (keyCode === $mdConstant.KEY_CODE.SPACE || keyCode === $mdConstant.KEY_CODE.ENTER) {\n          ev.preventDefault();\n          element.addClass('md-focused');\n          listener(ev);\n        }\n      }\n\n      function listener(ev) {\n        // skipToggle boolean is used by the switch directive to prevent the click event\n        // when releasing the drag. There will be always a click if releasing the drag over the checkbox\n        if (element[0].hasAttribute('disabled') || scope.skipToggle) {\n          return;\n        }\n\n        scope.$apply(function() {\n          // Toggle the checkbox value...\n          var viewValue = attr.ngChecked ? attr.checked : !ngModelCtrl.$viewValue;\n\n          ngModelCtrl.$setViewValue(viewValue, ev && ev.type);\n          ngModelCtrl.$render();\n        });\n      }\n\n      function render() {\n        // Cast the $viewValue to a boolean since it could be undefined\n        element.toggleClass('md-checked', !!ngModelCtrl.$viewValue && !isIndeterminate);\n      }\n\n      function setIndeterminateState(newValue) {\n        isIndeterminate = newValue !== false;\n        if (isIndeterminate) {\n          element.attr('aria-checked', 'mixed');\n        }\n        element.toggleClass('md-indeterminate', isIndeterminate);\n      }\n    }\n  }\n}\n\n})(window, window.angular);"]}