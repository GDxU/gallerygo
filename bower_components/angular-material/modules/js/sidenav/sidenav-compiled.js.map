{"version":3,"sources":["sidenav.js"],"names":[],"mappings":";;AAAA;;;;;;AAMA,CAAC,UAAU,MAAV,EAAkB,OAAlB,EAA2B,SAA3B,EAAsC;AACvC;;AAEA;;;;;;;;AAOA,iBAAe,SAAf,IAA4B,CAAC,sBAAD,EAAyB,SAAzB,EAAoC,IAApC,EAA0C,MAA1C,CAA5B;AACA,mBAAiB,SAAjB,IAA8B,CAAC,UAAD,EAAa,SAAb,EAAwB,aAAxB,EAAuC,YAAvC,EAAqD,gBAArD,EAAuE,UAAvE,EAAmF,UAAnF,EAA+F,QAA/F,EAAyG,MAAzG,EAAiH,IAAjH,EAAuH,WAAvH,EAAoI,SAApI,EAA+I,OAA/I,CAA9B;AACA,oBAAkB,SAAlB,IAA+B,CAAC,QAAD,EAAW,QAAX,EAAqB,sBAArB,EAA6C,IAA7C,EAAmD,cAAnD,CAA/B;AACA,UACG,MADH,CACU,6BADV,EACyC,CACrC,eADqC,EAErC,8BAFqC,CADzC,EAKG,OALH,CAKW,YALX,EAKyB,cALzB,EAMG,SANH,CAMa,WANb,EAM0B,gBAN1B,EAOG,SAPH,CAOa,gBAPb,EAO+B,qBAP/B,EAQG,UARH,CAQc,sBARd,EAQsC,iBARtC;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA,WAAS,cAAT,CAAwB,oBAAxB,EAA8C,OAA9C,EAAuD,EAAvD,EAA2D,IAA3D,EAAiE;AAC/D,QAAI,WAAW,oEAAf;AACA,QAAI,UAAU;AACR,YAAU,YADF,EACoB;AAC5B,eAAU,eAFF,CAEoB;AAFpB,KAAd;;AAKA;;;;;;;;AAQA,WAAO,UAAS,MAAT,EAAiB,UAAjB,EAA6B;AAClC,UAAK,QAAQ,WAAR,CAAoB,MAApB,CAAL,EAAmC,OAAO,OAAP;;AAEnC,UAAI,aAAa,eAAe,IAAhC;AACA,UAAI,WAAW,QAAQ,IAAR,CAAa,MAAb,EAAqB,UAArB,CAAf;AACA,aAAQ,CAAC,QAAD,IAAa,UAAb,GAA0B,QAAQ,OAAR,CAAgB,MAAhB,CAA1B,GACA,CAAC,QAAD,IAAa,QAAQ,WAAR,CAAoB,UAApB,CAAb,GAA+C,aAAa,OAAb,EAAsB,MAAtB,CAA/C,GAA+E,QADvF;AAED,KAPD;;AASA;;;;AAIA,aAAS,YAAT,CAAsB,OAAtB,EAA+B,MAA/B,EAAuC;AACnC,UAAI,UAAW,SAAX,OAAW,GAAW;AAAE,eAAO,KAAP;AAAe,OAA3C;AACA,UAAI,WAAW,SAAX,QAAW,GAAW;AACpB,eAAO,GAAG,IAAH,CAAQ,QAAQ,QAAR,CAAiB,QAAjB,EAA2B,CAAC,UAAU,EAAX,CAA3B,CAAR,CAAP;AACD,OAFL;;AAIA,aAAO,QAAQ,MAAR,CAAe;AACpB,sBAAe,OADK;AAEpB,gBAAe,OAFK;AAGpB,gBAAe,QAHK;AAIpB,cAAe,QAJK;AAKpB,eAAe,QALK;AAMpB,iBAAe,QAAQ,IANH;AAOpB,cAAO,cAAS,QAAT,EAAmB;AACxB,iBAAO,gBAAgB,MAAhB,EACJ,IADI,CACC,YAAY,QAAQ,IADrB,CAAP;AAED;AAVmB,OAAf,EAWH,OAXG,CAAP;AAYD;AACD;;;;AAIA,aAAS,YAAT,CAAsB,MAAtB,EAA8B,UAA9B,EAA0C;AACxC,UAAI,WAAW,qBAAqB,GAArB,CAAyB,MAAzB,CAAf;;AAEA,UAAI,CAAC,QAAD,IAAa,CAAC,UAAlB,EAA8B;;AAE5B;AACA,aAAK,KAAL,CAAY,QAAQ,QAAR,CAAiB,QAAjB,EAA2B,CAAC,UAAU,EAAX,CAA3B,CAAZ;;AAEA;AACA;AACA,eAAO,SAAP;AACD;AACD,aAAO,QAAP;AACD;;AAED;;;;AAIA,aAAS,eAAT,CAAyB,MAAzB,EAAiC;AAC/B,aAAO,qBAAqB,IAArB,CAA0B,MAA1B,EAAkC,KAAlC,CAAwC,KAAK,KAA7C,CAAP;AACD;AACJ;AACD;;;;;;;;;;;;;;;;;;;;;;;AAuBA,WAAS,qBAAT,GAAiC;AAC/B,WAAO;AACL,gBAAU,GADL;AAEL,eAAS,YAFJ;AAGL,YAAM,cAAS,KAAT,EAAgB,OAAhB,EAAyB,IAAzB,EAA+B,WAA/B,EAA4C;AAChD;AACD;AALI,KAAP;AAOD;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqEA,WAAS,gBAAT,CAA0B,QAA1B,EAAoC,OAApC,EAA6C,WAA7C,EAA0D,UAA1D,EAAsE,cAAtE,EAAsF,QAAtF,EAC0B,QAD1B,EACoC,MADpC,EAC4C,IAD5C,EACkD,EADlD,EACsD,SADtD,EACiE,OADjE,EAC0E,KAD1E,EACiF;AAC/E,WAAO;AACL,gBAAU,GADL;AAEL,aAAO;AACL,gBAAQ;AADH,OAFF;AAKL,kBAAY,sBALP;AAML,eAAS,iBAAS,OAAT,EAAkB;AACzB,gBAAQ,QAAR,CAAiB,WAAjB,EAA8B,IAA9B,CAAmC,UAAnC,EAA+C,IAA/C;AACA,eAAO,QAAP;AACD;AATI,KAAP;;AAYA;;;AAGA,aAAS,QAAT,CAAkB,KAAlB,EAAyB,OAAzB,EAAkC,IAAlC,EAAwC,WAAxC,EAAqD;AACnD,UAAI,kBAAJ;AACA,UAAI,QAAJ;AACA,UAAI,sBAAsB,IAA1B;AACA,UAAI,yBAAJ;AACA,UAAI,oBAAoB,IAAxB;AACA,UAAI,uBAAJ;AACA,UAAI,UAAU,GAAG,IAAH,CAAQ,IAAR,CAAd;AACA,UAAI,qBAAqB,OAAO,KAAK,cAAZ,CAAzB;AACA,UAAI,WAAW,QAAQ,OAAR,CAAgB,OAAhB,CAAf;AACA,UAAI,WAAW,SAAX,QAAW,GAAW;AACxB,eAAO,mBAAmB,MAAM,OAAzB,EAAkC;AACvC,kBAAQ,gBAAS,GAAT,EAAc;AACpB,iBAAK,IAAL,CAAU,gEAAV;AACA,mBAAO,SAAS,GAAT,CAAP;AACD,WAJsC;AAKvC,oBAAU;AAL6B,SAAlC,CAAP;AAOD,OARD;;AAUA,UAAI,KAAK,qBAAT,EAAgC;AAC9B,8BAAsB,UAAU,CAAV,EAAa,aAAb,CAA2B,KAAK,qBAAhC,CAAtB;;AAEA,YAAI,mBAAJ,EAAyB;AACvB,gCAAsB,QAAQ,OAAR,CAAgB,mBAAhB,CAAtB;AACD,SAFD,MAEO;AACL,eAAK,IAAL,CAAU,QAAQ,QAAR,CAAiB,gDACzB,gDADQ,EAC0C,EAAE,UAAU,KAAK,qBAAjB,EAD1C,CAAV;AAED;AACF;;AAED,UAAI,CAAC,mBAAL,EAA0B;AACxB,8BAAsB,QAAQ,MAAR,EAAtB;AACD;;AAED;AACA,UAAI,CAAC,KAAK,cAAL,CAAoB,mBAApB,CAAL,EAA+C;AAC7C,mBAAW,QAAQ,cAAR,CAAuB,KAAvB,EAA8B,wCAA9B,CAAX;AACD;;AAED,cAAQ,QAAR,CAAiB,KAAjB,EAxCmD,CAwCtB;AAC7B,iBAAW,OAAX;;AAEA;AACA;AACA,UAAK,QAAL,EAAgB,WAAW,OAAX,CAAmB,QAAnB,EAA6B,OAA7B;;AAEhB,cAAQ,EAAR,CAAW,UAAX,EAAuB,YAAW;AAChC,oBAAY,SAAS,MAAT,EAAZ;AACA,oBAAY,OAAZ;AACD,OAHD;;AAKA,YAAM,GAAN,CAAU,UAAV,EAAsB,YAAU;AAC9B,oBAAY,SAAS,MAAT,EAAZ;AACD,OAFD;;AAIA,YAAM,MAAN,CAAa,QAAb,EAAuB,cAAvB;AACA,YAAM,MAAN,CAAa,QAAb,EAAuB,YAAvB;;AAGA;AACA,kBAAY,WAAZ,GAA0B,UAA1B;;AAEA;;;;AAIA,eAAS,cAAT,CAAwB,QAAxB,EAAkC,QAAlC,EAA4C;AAC1C,cAAM,YAAN,GAAqB,QAArB;AACA,YAAI,aAAa,QAAjB,EAA2B;AACzB,kBAAQ,WAAR,CAAoB,gBAApB,EAAsC,CAAC,CAAC,QAAxC;AACD,SAFD,MAEO;AACL,mBAAS,WAAW,UAAX,GAAwB,aAAjC,EAAgD,OAAhD,EAAyD,gBAAzD;AACD;AACD,YAAI,QAAJ,EAAc;AACZ,mBAAS,WAAT,CAAqB,gBAArB,EAAuC,CAAC,CAAC,QAAzC;AACD;AACF;;AAED;;;;AAIA,eAAS,YAAT,CAAsB,MAAtB,EAA8B;AAC5B;AACA,YAAI,UAAU,QAAQ,eAAR,CAAwB,OAAxB,KAAoC,QAAQ,eAAR,CAAwB,OAAxB,EAAgC,oBAAhC,CAApC,IAA6F,OAA3G;AACA,YAAI,SAAS,QAAQ,MAAR,EAAb;;AAEA,eAAO,SAAS,IAAT,GAAgB,KAAvB,EAA8B,SAA9B,EAAyC,SAAzC;AACA,YAAI,QAAJ,EAAc,SAAS,SAAS,IAAT,GAAgB,KAAzB,EAAgC,OAAhC,EAAyC,KAAzC;;AAEd,YAAI,qBAAqB,yBAAyB,MAAzB,EAAiC,MAAjC,CAAzB;;AAEA,YAAK,MAAL,EAAc;AACZ;AACA,8BAAoB,UAAU,CAAV,EAAa,aAAjC;AACA,sCAA4B,eAAe,sBAAf,EAA5B;AACD;;AAED,4BAAoB,MAApB;;AAEA,eAAO,UAAU,GAAG,GAAH,CAAO,CACtB,UAAU,QAAV,GAAqB,SAAS,KAAT,CAAe,QAAf,EAAyB,MAAzB,CAArB,GAAwD,WACnC,SAAS,KAAT,CAAe,QAAf,CADmC,GACR,GAAG,IAAH,CAAQ,IAAR,CAF1B,EAGtB,SAAS,SAAS,aAAT,GAAyB,UAAlC,EAA8C,OAA9C,EAAuD,WAAvD,CAHsB,CAAP,EAId,IAJc,CAIT,YAAW;AACjB;AACA,cAAI,MAAM,MAAV,EAAkB;AAChB,kBAAM,YAAW;AACf;AACA;AACA,uBAAS,cAAT,CAAwB,QAAxB;AACD,aAJD;;AAMA,uBAAW,QAAQ,KAAR,EAAX;AACD;;AAED;AACA,gCAAsB,oBAAtB;AACD,SAlBgB,CAAjB;AAmBD;;AAED,eAAS,wBAAT,CAAkC,MAAlC,EAA0C,QAA1C,EAAoD;AAClD,YAAI,WAAW,QAAQ,CAAR,CAAf;AACA,YAAI,YAAY,OAAO,CAAP,EAAU,SAA1B;;AAEA,YAAI,YAAY,SAAhB,EAA2B;AACzB,oCAA0B;AACxB,iBAAK,SAAS,KAAT,CAAe,GADI;AAExB,oBAAQ,SAAS,KAAT,CAAe,MAFC;AAGxB,oBAAQ,SAAS,KAAT,CAAe;AAHC,WAA1B;;AAMA;AACA;AACA;AACA,cAAI,gBAAgB;AAClB,iBAAK,YAAY,IADC;AAElB,oBAAQ,MAFU;AAGlB,oBAAQ,OAAO,CAAP,EAAU,YAAV,GAAyB;AAHf,WAApB;;AAMA;AACA,kBAAQ,GAAR,CAAY,aAAZ;AACA,mBAAS,GAAT,CAAa,aAAb;AACD;;AAED;AACA;AACA,YAAI,CAAC,QAAD,IAAa,uBAAjB,EAA0C;AACxC,iBAAO,YAAW;AAChB,qBAAS,KAAT,CAAe,GAAf,GAAqB,wBAAwB,GAA7C;AACA,qBAAS,KAAT,CAAe,MAAf,GAAwB,wBAAwB,MAAhD;AACA,qBAAS,KAAT,CAAe,MAAf,GAAwB,wBAAwB,MAAhD;;AAEA,qBAAS,CAAT,EAAY,KAAZ,CAAkB,GAAlB,GAAwB,IAAxB;AACA,qBAAS,CAAT,EAAY,KAAZ,CAAkB,MAAlB,GAA2B,IAA3B;AACA,qBAAS,CAAT,EAAY,KAAZ,CAAkB,MAAlB,GAA2B,IAA3B;;AAEA,sCAA0B,IAA1B;AACD,WAVD;AAWD;AACF;;AAED;;;AAGA,eAAS,mBAAT,CAA6B,QAA7B,EAAuC;AACrC,YAAK,YAAY,CAAC,kBAAlB,EAAuC;AACrC,+BAAqB,oBAAoB,GAApB,CAAwB,UAAxB,CAArB;AACA,8BAAoB,GAApB,CAAwB,UAAxB,EAAoC,QAApC;AACD,SAHD,MAGO,IAAI,QAAQ,SAAR,CAAkB,kBAAlB,CAAJ,EAA2C;AAChD,8BAAoB,GAApB,CAAwB,UAAxB,EAAoC,kBAApC;AACA,+BAAqB,SAArB;AACD;AACF;;AAED;;;;;;;AAOA,eAAS,UAAT,CAAqB,MAArB,EAA8B;AAC5B,YAAI,MAAM,MAAN,IAAgB,MAApB,EAA6B;;AAE3B,iBAAO,GAAG,IAAH,CAAQ,IAAR,CAAP;AAED,SAJD,MAIO;AACL,cAAI,MAAM,MAAN,IAAgB,YAAY,SAAhC,EAA2C,YAAY,SAAZ;;AAE3C,iBAAO,GAAG,UAAS,OAAT,EAAiB;AACzB;AACA,kBAAM,MAAN,GAAe,MAAf;;AAEA,oBAAQ,QAAR,CAAiB,YAAW;AAC1B;AACA,sBAAQ,IAAR,CAAa,UAAS,MAAT,EAAiB;;AAE5B,oBAAK,CAAC,MAAM,MAAP,IAAiB,iBAAjB,IAAsC,8BAA8B,UAAzE,EAAqF;AACnF;AACA,oCAAkB,KAAlB;AACA,sCAAoB,IAApB;AACD;;AAED,wBAAQ,MAAR;AACD,eATD;AAUD,aAZD;AAcD,WAlBM,CAAP;AAoBD;AACF;;AAED;;;;AAIA,eAAS,SAAT,CAAmB,EAAnB,EAAuB;AACrB,YAAI,WAAY,GAAG,OAAH,KAAe,YAAY,QAAZ,CAAqB,MAApD;AACA,eAAO,WAAW,MAAM,EAAN,CAAX,GAAuB,GAAG,IAAH,CAAQ,IAAR,CAA9B;AACD;;AAED;;;;;AAKA,eAAS,KAAT,CAAe,EAAf,EAAmB;AACjB,WAAG,cAAH;;AAEA,eAAO,YAAY,KAAZ,EAAP;AACD;AAEF;AACF;;AAED;;;;;;AAMA,WAAS,iBAAT,CAA2B,MAA3B,EAAmC,MAAnC,EAA2C,oBAA3C,EAAiE,EAAjE,EAAqE,YAArE,EAAmF;;AAEjF,QAAI,OAAO,IAAX;;AAEA;;AAEA;AACA,SAAK,MAAL,GAAc,YAAW;AAAE,aAAO,CAAC,CAAC,OAAO,MAAhB;AAAyB,KAApD;AACA,SAAK,YAAL,GAAoB,YAAW;AAAE,aAAO,CAAC,CAAC,OAAO,YAAhB;AAA+B,KAAhE;;AAEA;AACA,SAAK,OAAL,GAAe,UAAU,QAAV,EAAoB;AACjC,WAAK,SAAL,GAAiB,QAAjB;AACA,aAAO,IAAP;AACD,KAHD;;AAKA;AACA,SAAK,IAAL,GAAc,YAAW;AAAE,aAAO,KAAK,WAAL,CAAkB,IAAlB,CAAP;AAAmC,KAA9D;AACA,SAAK,KAAL,GAAc,YAAW;AAAE,aAAO,KAAK,WAAL,CAAkB,KAAlB,CAAP;AAAmC,KAA9D;AACA,SAAK,MAAL,GAAc,YAAW;AAAE,aAAO,KAAK,WAAL,CAAkB,CAAC,OAAO,MAA1B,CAAP;AAA6C,KAAxE;AACA,SAAK,WAAL,GAAmB,UAAS,KAAT,EAAgB;AAAE,aAAO,GAAG,IAAH,CAAQ,OAAO,MAAP,GAAgB,KAAxB,CAAP;AAAwC,KAA7E;;AAEA;AACA,QAAI,QAAQ,OAAO,aAAnB;AACA,QAAI,iBAAiB,SAAS,MAAM,OAAN,CAAc,aAAa,WAAb,EAAd,IAA4C,CAAC,CAA3E;AACA,QAAI,cAAc,iBAAiB,aAAa,KAAb,EAAoB,OAAO,OAA3B,CAAjB,GAAuD,KAAzE;;AAEA;AACA,SAAK,OAAL,GAAe,qBAAqB,QAArB,CAA8B,IAA9B,EAAoC,WAApC,CAAf;;AAEA;AACA,QAAI,cAAJ,EAAoB;AAClB,aAAO,QAAP,CAAgB,eAAhB,EAAiC,UAAS,EAAT,EAAa;AAC5C,YAAI,MAAM,OAAO,KAAK,UAAtB,EAAkC;AAChC,eAAK,OAAL,GADgC,CAChB;AAChB,eAAK,OAAL,GAAe,qBAAqB,QAArB,CAA8B,IAA9B,EAAoC,EAApC,CAAf;AACD;AACF,OALD;AAMD;AACF;AAEA,CAziBD,EAyiBG,MAziBH,EAyiBW,OAAO,OAziBlB","file":"sidenav-compiled.js","sourcesContent":["/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v1.1.1-master-f7ecb4f\n */\n(function( window, angular, undefined ){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.sidenav\n *\n * @description\n * A Sidenav QP component.\n */\nSidenavService['$inject'] = [\"$mdComponentRegistry\", \"$mdUtil\", \"$q\", \"$log\"];\nSidenavDirective['$inject'] = [\"$mdMedia\", \"$mdUtil\", \"$mdConstant\", \"$mdTheming\", \"$mdInteraction\", \"$animate\", \"$compile\", \"$parse\", \"$log\", \"$q\", \"$document\", \"$window\", \"$$rAF\"];\nSidenavController['$inject'] = [\"$scope\", \"$attrs\", \"$mdComponentRegistry\", \"$q\", \"$interpolate\"];\nangular\n  .module('material.components.sidenav', [\n    'material.core',\n    'material.components.backdrop'\n  ])\n  .factory('$mdSidenav', SidenavService )\n  .directive('mdSidenav', SidenavDirective)\n  .directive('mdSidenavFocus', SidenavFocusDirective)\n  .controller('$mdSidenavController', SidenavController);\n\n\n/**\n * @ngdoc service\n * @name $mdSidenav\n * @module material.components.sidenav\n *\n * @description\n * `$mdSidenav` makes it easy to interact with multiple sidenavs\n * in an app. When looking up a sidenav instance, you can either look\n * it up synchronously or wait for it to be initializied asynchronously.\n * This is done by passing the second argument to `$mdSidenav`.\n *\n * @usage\n * <hljs lang=\"js\">\n * // Async lookup for sidenav instance; will resolve when the instance is available\n * $mdSidenav(componentId, true).then(function(instance) {\n *   $log.debug( componentId + \"is now ready\" );\n * });\n * // Sync lookup for sidenav instance; this will resolve immediately.\n * $mdSidenav(componentId).then(function(instance) {\n *   $log.debug( componentId + \"is now ready\" );\n * });\n * // Async toggle the given sidenav;\n * // when instance is known ready and lazy lookup is not needed.\n * $mdSidenav(componentId)\n *    .toggle()\n *    .then(function(){\n *      $log.debug('toggled');\n *    });\n * // Async open the given sidenav\n * $mdSidenav(componentId)\n *    .open()\n *    .then(function(){\n *      $log.debug('opened');\n *    });\n * // Async close the given sidenav\n * $mdSidenav(componentId)\n *    .close()\n *    .then(function(){\n *      $log.debug('closed');\n *    });\n * // Sync check to see if the specified sidenav is set to be open\n * $mdSidenav(componentId).isOpen();\n * // Sync check to whether given sidenav is locked open\n * // If this is true, the sidenav will be open regardless of close()\n * $mdSidenav(componentId).isLockedOpen();\n * // On close callback to handle close, backdrop click or escape key pressed\n * // Callback happens BEFORE the close action occurs.\n * $mdSidenav(componentId).onClose(function () {\n *   $log.debug('closing');\n * });\n * </hljs>\n */\nfunction SidenavService($mdComponentRegistry, $mdUtil, $q, $log) {\n  var errorMsg = \"SideNav '{0}' is not available! Did you use md-component-id='{0}'?\";\n  var service = {\n        find    : findInstance,     //  sync  - returns proxy API\n        waitFor : waitForInstance   //  async - returns promise\n      };\n\n  /**\n   * Service API that supports three (3) usages:\n   *   $mdSidenav().find(\"left\")                       // sync (must already exist) or returns undefined\n   *   $mdSidenav(\"left\").toggle();                    // sync (must already exist) or returns reject promise;\n   *   $mdSidenav(\"left\",true).then( function(left){   // async returns instance when available\n   *    left.toggle();\n   *   });\n   */\n  return function(handle, enableWait) {\n    if ( angular.isUndefined(handle) ) return service;\n\n    var shouldWait = enableWait === true;\n    var instance = service.find(handle, shouldWait);\n    return  !instance && shouldWait ? service.waitFor(handle) :\n            !instance && angular.isUndefined(enableWait) ? addLegacyAPI(service, handle) : instance;\n  };\n\n  /**\n   * For failed instance/handle lookups, older-clients expect an response object with noops\n   * that include `rejected promise APIs`\n   */\n  function addLegacyAPI(service, handle) {\n      var falseFn  = function() { return false; };\n      var rejectFn = function() {\n            return $q.when($mdUtil.supplant(errorMsg, [handle || \"\"]));\n          };\n\n      return angular.extend({\n        isLockedOpen : falseFn,\n        isOpen       : falseFn,\n        toggle       : rejectFn,\n        open         : rejectFn,\n        close        : rejectFn,\n        onClose      : angular.noop,\n        then : function(callback) {\n          return waitForInstance(handle)\n            .then(callback || angular.noop);\n        }\n       }, service);\n    }\n    /**\n     * Synchronously lookup the controller instance for the specified sidNav instance which has been\n     * registered with the markup `md-component-id`\n     */\n    function findInstance(handle, shouldWait) {\n      var instance = $mdComponentRegistry.get(handle);\n\n      if (!instance && !shouldWait) {\n\n        // Report missing instance\n        $log.error( $mdUtil.supplant(errorMsg, [handle || \"\"]) );\n\n        // The component has not registered itself... most like NOT yet created\n        // return null to indicate that the Sidenav is not in the DOM\n        return undefined;\n      }\n      return instance;\n    }\n\n    /**\n     * Asynchronously wait for the component instantiation,\n     * Deferred lookup of component instance using $component registry\n     */\n    function waitForInstance(handle) {\n      return $mdComponentRegistry.when(handle).catch($log.error);\n    }\n}\n/**\n * @ngdoc directive\n * @name mdSidenavFocus\n * @module material.components.sidenav\n *\n * @restrict A\n *\n * @description\n * `mdSidenavFocus` provides a way to specify the focused element when a sidenav opens.\n * This is completely optional, as the sidenav itself is focused by default.\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-sidenav>\n *   <form>\n *     <md-input-container>\n *       <label for=\"testInput\">Label</label>\n *       <input id=\"testInput\" type=\"text\" md-sidenav-focus>\n *     </md-input-container>\n *   </form>\n * </md-sidenav>\n * </hljs>\n **/\nfunction SidenavFocusDirective() {\n  return {\n    restrict: 'A',\n    require: '^mdSidenav',\n    link: function(scope, element, attr, sidenavCtrl) {\n      // @see $mdUtil.findFocusTarget(...)\n    }\n  };\n}\n/**\n * @ngdoc directive\n * @name mdSidenav\n * @module material.components.sidenav\n * @restrict E\n *\n * @description\n *\n * A Sidenav component that can be opened and closed programatically.\n *\n * By default, upon opening it will slide out on top of the main content area.\n *\n * For keyboard and screen reader accessibility, focus is sent to the sidenav wrapper by default.\n * It can be overridden with the `md-autofocus` directive on the child element you want focused.\n *\n * @usage\n * <hljs lang=\"html\">\n * <div layout=\"row\" ng-controller=\"MyController\">\n *   <md-sidenav md-component-id=\"left\" class=\"md-sidenav-left\">\n *     Left Nav!\n *   </md-sidenav>\n *\n *   <md-content>\n *     Center Content\n *     <md-button ng-click=\"openLeftMenu()\">\n *       Open Left Menu\n *     </md-button>\n *   </md-content>\n *\n *   <md-sidenav md-component-id=\"right\"\n *     md-is-locked-open=\"$mdMedia('min-width: 333px')\"\n *     class=\"md-sidenav-right\">\n *     <form>\n *       <md-input-container>\n *         <label for=\"testInput\">Test input</label>\n *         <input id=\"testInput\" type=\"text\"\n *                ng-model=\"data\" md-autofocus>\n *       </md-input-container>\n *     </form>\n *   </md-sidenav>\n * </div>\n * </hljs>\n *\n * <hljs lang=\"js\">\n * var app = angular.module('myApp', ['ngMaterial']);\n * app.controller('MyController', function($scope, $mdSidenav) {\n *   $scope.openLeftMenu = function() {\n *     $mdSidenav('left').toggle();\n *   };\n * });\n * </hljs>\n *\n * @param {expression=} md-is-open A model bound to whether the sidenav is opened.\n * @param {boolean=} md-disable-backdrop When present in the markup, the sidenav will not show a backdrop.\n * @param {string=} md-component-id componentId to use with $mdSidenav service.\n * @param {expression=} md-is-locked-open When this expression evaluates to true,\n * the sidenav 'locks open': it falls into the content's flow instead\n * of appearing over it. This overrides the `md-is-open` attribute.\n * @param {string=} md-disable-scroll-target Selector, pointing to an element, whose scrolling will\n * be disabled when the sidenav is opened. By default this is the sidenav's direct parent.\n *\n* The $mdMedia() service is exposed to the is-locked-open attribute, which\n * can be given a media query or one of the `sm`, `gt-sm`, `md`, `gt-md`, `lg` or `gt-lg` presets.\n * Examples:\n *\n *   - `<md-sidenav md-is-locked-open=\"shouldLockOpen\"></md-sidenav>`\n *   - `<md-sidenav md-is-locked-open=\"$mdMedia('min-width: 1000px')\"></md-sidenav>`\n *   - `<md-sidenav md-is-locked-open=\"$mdMedia('sm')\"></md-sidenav>` (locks open on small screens)\n */\nfunction SidenavDirective($mdMedia, $mdUtil, $mdConstant, $mdTheming, $mdInteraction, $animate,\n                          $compile, $parse, $log, $q, $document, $window, $$rAF) {\n  return {\n    restrict: 'E',\n    scope: {\n      isOpen: '=?mdIsOpen'\n    },\n    controller: '$mdSidenavController',\n    compile: function(element) {\n      element.addClass('md-closed').attr('tabIndex', '-1');\n      return postLink;\n    }\n  };\n\n  /**\n   * Directive Post Link function...\n   */\n  function postLink(scope, element, attr, sidenavCtrl) {\n    var lastParentOverFlow;\n    var backdrop;\n    var disableScrollTarget = null;\n    var triggeringInteractionType;\n    var triggeringElement = null;\n    var previousContainerStyles;\n    var promise = $q.when(true);\n    var isLockedOpenParsed = $parse(attr.mdIsLockedOpen);\n    var ngWindow = angular.element($window);\n    var isLocked = function() {\n      return isLockedOpenParsed(scope.$parent, {\n        $media: function(arg) {\n          $log.warn(\"$media is deprecated for is-locked-open. Use $mdMedia instead.\");\n          return $mdMedia(arg);\n        },\n        $mdMedia: $mdMedia\n      });\n    };\n\n    if (attr.mdDisableScrollTarget) {\n      disableScrollTarget = $document[0].querySelector(attr.mdDisableScrollTarget);\n\n      if (disableScrollTarget) {\n        disableScrollTarget = angular.element(disableScrollTarget);\n      } else {\n        $log.warn($mdUtil.supplant('mdSidenav: couldn\\'t find element matching ' +\n          'selector \"{selector}\". Falling back to parent.', { selector: attr.mdDisableScrollTarget }));\n      }\n    }\n\n    if (!disableScrollTarget) {\n      disableScrollTarget = element.parent();\n    }\n\n    // Only create the backdrop if the backdrop isn't disabled.\n    if (!attr.hasOwnProperty('mdDisableBackdrop')) {\n      backdrop = $mdUtil.createBackdrop(scope, \"md-sidenav-backdrop md-opaque ng-enter\");\n    }\n\n    element.addClass('_md');     // private md component indicator for styling\n    $mdTheming(element);\n\n    // The backdrop should inherit the sidenavs theme,\n    // because the backdrop will take its parent theme by default.\n    if ( backdrop ) $mdTheming.inherit(backdrop, element);\n\n    element.on('$destroy', function() {\n      backdrop && backdrop.remove();\n      sidenavCtrl.destroy();\n    });\n\n    scope.$on('$destroy', function(){\n      backdrop && backdrop.remove();\n    });\n\n    scope.$watch(isLocked, updateIsLocked);\n    scope.$watch('isOpen', updateIsOpen);\n\n\n    // Publish special accessor for the Controller instance\n    sidenavCtrl.$toggleOpen = toggleOpen;\n\n    /**\n     * Toggle the DOM classes to indicate `locked`\n     * @param isLocked\n     */\n    function updateIsLocked(isLocked, oldValue) {\n      scope.isLockedOpen = isLocked;\n      if (isLocked === oldValue) {\n        element.toggleClass('md-locked-open', !!isLocked);\n      } else {\n        $animate[isLocked ? 'addClass' : 'removeClass'](element, 'md-locked-open');\n      }\n      if (backdrop) {\n        backdrop.toggleClass('md-locked-open', !!isLocked);\n      }\n    }\n\n    /**\n     * Toggle the SideNav view and attach/detach listeners\n     * @param isOpen\n     */\n    function updateIsOpen(isOpen) {\n      // Support deprecated md-sidenav-focus attribute as fallback\n      var focusEl = $mdUtil.findFocusTarget(element) || $mdUtil.findFocusTarget(element,'[md-sidenav-focus]') || element;\n      var parent = element.parent();\n\n      parent[isOpen ? 'on' : 'off']('keydown', onKeyDown);\n      if (backdrop) backdrop[isOpen ? 'on' : 'off']('click', close);\n\n      var restorePositioning = updateContainerPositions(parent, isOpen);\n\n      if ( isOpen ) {\n        // Capture upon opening..\n        triggeringElement = $document[0].activeElement;\n        triggeringInteractionType = $mdInteraction.getLastInteractionType();\n      }\n\n      disableParentScroll(isOpen);\n\n      return promise = $q.all([\n        isOpen && backdrop ? $animate.enter(backdrop, parent) : backdrop ?\n                             $animate.leave(backdrop) : $q.when(true),\n        $animate[isOpen ? 'removeClass' : 'addClass'](element, 'md-closed')\n      ]).then(function() {\n        // Perform focus when animations are ALL done...\n        if (scope.isOpen) {\n          $$rAF(function() {\n            // Notifies child components that the sidenav was opened. Should wait\n            // a frame in order to allow for the element height to be computed.\n            ngWindow.triggerHandler('resize');\n          });\n\n          focusEl && focusEl.focus();\n        }\n\n        // Restores the positioning on the sidenav and backdrop.\n        restorePositioning && restorePositioning();\n      });\n    }\n\n    function updateContainerPositions(parent, willOpen) {\n      var drawerEl = element[0];\n      var scrollTop = parent[0].scrollTop;\n\n      if (willOpen && scrollTop) {\n        previousContainerStyles = {\n          top: drawerEl.style.top,\n          bottom: drawerEl.style.bottom,\n          height: drawerEl.style.height\n        };\n\n        // When the parent is scrolled down, then we want to be able to show the sidenav at the current scroll\n        // position. We're moving the sidenav down to the correct scroll position and apply the height of the\n        // parent, to increase the performance. Using 100% as height, will impact the performance heavily.\n        var positionStyle = {\n          top: scrollTop + 'px',\n          bottom: 'auto',\n          height: parent[0].clientHeight + 'px'\n        };\n\n        // Apply the new position styles to the sidenav and backdrop.\n        element.css(positionStyle);\n        backdrop.css(positionStyle);\n      }\n\n      // When the sidenav is closing and we have previous defined container styles,\n      // then we return a restore function, which resets the sidenav and backdrop.\n      if (!willOpen && previousContainerStyles) {\n        return function() {\n          drawerEl.style.top = previousContainerStyles.top;\n          drawerEl.style.bottom = previousContainerStyles.bottom;\n          drawerEl.style.height = previousContainerStyles.height;\n\n          backdrop[0].style.top = null;\n          backdrop[0].style.bottom = null;\n          backdrop[0].style.height = null;\n\n          previousContainerStyles = null;\n        };\n      }\n    }\n\n    /**\n     * Prevent parent scrolling (when the SideNav is open)\n     */\n    function disableParentScroll(disabled) {\n      if ( disabled && !lastParentOverFlow ) {\n        lastParentOverFlow = disableScrollTarget.css('overflow');\n        disableScrollTarget.css('overflow', 'hidden');\n      } else if (angular.isDefined(lastParentOverFlow)) {\n        disableScrollTarget.css('overflow', lastParentOverFlow);\n        lastParentOverFlow = undefined;\n      }\n    }\n\n    /**\n     * Toggle the sideNav view and publish a promise to be resolved when\n     * the view animation finishes.\n     *\n     * @param isOpen\n     * @returns {*}\n     */\n    function toggleOpen( isOpen ) {\n      if (scope.isOpen == isOpen ) {\n\n        return $q.when(true);\n\n      } else {\n        if (scope.isOpen && sidenavCtrl.onCloseCb) sidenavCtrl.onCloseCb();\n\n        return $q(function(resolve){\n          // Toggle value to force an async `updateIsOpen()` to run\n          scope.isOpen = isOpen;\n\n          $mdUtil.nextTick(function() {\n            // When the current `updateIsOpen()` animation finishes\n            promise.then(function(result) {\n\n              if ( !scope.isOpen && triggeringElement && triggeringInteractionType === 'keyboard') {\n                // reset focus to originating element (if available) upon close\n                triggeringElement.focus();\n                triggeringElement = null;\n              }\n\n              resolve(result);\n            });\n          });\n\n        });\n\n      }\n    }\n\n    /**\n     * Auto-close sideNav when the `escape` key is pressed.\n     * @param evt\n     */\n    function onKeyDown(ev) {\n      var isEscape = (ev.keyCode === $mdConstant.KEY_CODE.ESCAPE);\n      return isEscape ? close(ev) : $q.when(true);\n    }\n\n    /**\n     * With backdrop `clicks` or `escape` key-press, immediately\n     * apply the CSS close transition... Then notify the controller\n     * to close() and perform its own actions.\n     */\n    function close(ev) {\n      ev.preventDefault();\n\n      return sidenavCtrl.close();\n    }\n\n  }\n}\n\n/*\n * @private\n * @ngdoc controller\n * @name SidenavController\n * @module material.components.sidenav\n */\nfunction SidenavController($scope, $attrs, $mdComponentRegistry, $q, $interpolate) {\n\n  var self = this;\n\n  // Use Default internal method until overridden by directive postLink\n\n  // Synchronous getters\n  self.isOpen = function() { return !!$scope.isOpen; };\n  self.isLockedOpen = function() { return !!$scope.isLockedOpen; };\n\n  // Synchronous setters\n  self.onClose = function (callback) {\n    self.onCloseCb = callback;\n    return self;\n  };\n\n  // Async actions\n  self.open   = function() { return self.$toggleOpen( true );  };\n  self.close  = function() { return self.$toggleOpen( false ); };\n  self.toggle = function() { return self.$toggleOpen( !$scope.isOpen );  };\n  self.$toggleOpen = function(value) { return $q.when($scope.isOpen = value); };\n\n  // Evaluate the component id.\n  var rawId = $attrs.mdComponentId;\n  var hasDataBinding = rawId && rawId.indexOf($interpolate.startSymbol()) > -1;\n  var componentId = hasDataBinding ? $interpolate(rawId)($scope.$parent) : rawId;\n\n  // Register the component.\n  self.destroy = $mdComponentRegistry.register(self, componentId);\n\n  // Watch and update the component, if the id has changed.\n  if (hasDataBinding) {\n    $attrs.$observe('mdComponentId', function(id) {\n      if (id && id !== self.$$mdHandle) {\n        self.destroy(); // `destroy` only deregisters the old component id so we can add the new one.\n        self.destroy = $mdComponentRegistry.register(self, id);\n      }\n    });\n  }\n}\n\n})(window, window.angular);"]}