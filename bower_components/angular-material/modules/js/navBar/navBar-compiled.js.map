{"version":3,"sources":["navBar.js"],"names":[],"mappings":"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","file":"navBar-compiled.js","sourcesContent":["/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v1.1.1-master-f7ecb4f\n */\n(function( window, angular, undefined ){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.navBar\n */\n\n\nMdNavBarController['$inject'] = [\"$element\", \"$scope\", \"$timeout\", \"$mdConstant\"];\nMdNavItem['$inject'] = [\"$$rAF\"];\nMdNavItemController['$inject'] = [\"$element\"];\nMdNavBar['$inject'] = [\"$mdAria\", \"$mdTheming\"];\nangular.module('material.components.navBar', ['material.core'])\n    .controller('MdNavBarController', MdNavBarController)\n    .directive('mdNavBar', MdNavBar)\n    .controller('MdNavItemController', MdNavItemController)\n    .directive('mdNavItem', MdNavItem);\n\n\n/*****************************************************************************\n *                            PUBLIC DOCUMENTATION                           *\n *****************************************************************************/\n/**\n * @ngdoc directive\n * @name mdNavBar\n * @module material.components.navBar\n *\n * @restrict E\n *\n * @description\n * The `<md-nav-bar>` directive renders a list of material tabs that can be used\n * for top-level page navigation. Unlike `<md-tabs>`, it has no concept of a tab\n * body and no bar pagination.\n *\n * Because it deals with page navigation, certain routing concepts are built-in.\n * Route changes via via ng-href, ui-sref, or ng-click events are supported.\n * Alternatively, the user could simply watch currentNavItem for changes.\n *\n * Accessibility functionality is implemented as a site navigator with a\n * listbox, according to\n * https://www.w3.org/TR/wai-aria-practices/#Site_Navigator_Tabbed_Style\n *\n * @param {string=} mdSelectedNavItem The name of the current tab; this must\n *     match the name attribute of `<md-nav-item>`\n * @param {boolean=} mdNoInkBar If set to true, the ink bar will be hidden.\n * @param {string=} navBarAriaLabel An aria-label for the nav-bar\n *\n * @usage\n * <hljs lang=\"html\">\n *  <md-nav-bar md-selected-nav-item=\"currentNavItem\">\n *    <md-nav-item md-nav-click=\"goto('page1')\" name=\"page1\">\n *      Page One\n *    </md-nav-item>\n *    <md-nav-item md-nav-href=\"#page2\" name=\"page3\">Page Two</md-nav-item>\n *    <md-nav-item md-nav-sref=\"page3\" name=\"page2\">Page Three</md-nav-item>\n *    <md-nav-item\n *      md-nav-sref=\"app.page4\"\n *      sref-opts=\"{reload: true, notify: true}\"\n *      name=\"page4\">\n *      Page Four\n *    </md-nav-item>\n *  </md-nav-bar>\n *</hljs>\n * <hljs lang=\"js\">\n * (function() {\n *   'use strict';\n *\n *    $rootScope.$on('$routeChangeSuccess', function(event, current) {\n *      $scope.currentLink = getCurrentLinkFromRoute(current);\n *    });\n * });\n * </hljs>\n */\n\n/*****************************************************************************\n *                            mdNavItem\n *****************************************************************************/\n/**\n * @ngdoc directive\n * @name mdNavItem\n * @module material.components.navBar\n *\n * @restrict E\n *\n * @description\n * `<md-nav-item>` describes a page navigation link within the `<md-nav-bar>`\n * component. It renders an md-button as the actual link.\n *\n * Exactly one of the mdNavClick, mdNavHref, mdNavSref attributes are required\n * to be specified.\n *\n * @param {Function=} mdNavClick Function which will be called when the\n *     link is clicked to change the page. Renders as an `ng-click`.\n * @param {string=} mdNavHref url to transition to when this link is clicked.\n *     Renders as an `ng-href`.\n * @param {string=} mdNavSref Ui-router state to transition to when this link is\n *     clicked. Renders as a `ui-sref`.\n * @param {!Object=} srefOpts Ui-router options that are passed to the\n *     `$state.go()` function. See the [Ui-router documentation for details]\n *     (https://ui-router.github.io/docs/latest/interfaces/transition.transitionoptions.html).\n * @param {string=} name The name of this link. Used by the nav bar to know\n *     which link is currently selected.\n *\n * @usage\n * See `<md-nav-bar>` for usage.\n */\n\n\n/*****************************************************************************\n *                                IMPLEMENTATION                             *\n *****************************************************************************/\n\nfunction MdNavBar($mdAria, $mdTheming) {\n  return {\n    restrict: 'E',\n    transclude: true,\n    controller: MdNavBarController,\n    controllerAs: 'ctrl',\n    bindToController: true,\n    scope: {\n      'mdSelectedNavItem': '=?',\n      'mdNoInkBar': '=?',\n      'navBarAriaLabel': '@?',\n    },\n    template:\n      '<div class=\"md-nav-bar\">' +\n        '<nav role=\"navigation\">' +\n          '<ul class=\"_md-nav-bar-list\" ng-transclude role=\"listbox\"' +\n            'tabindex=\"0\"' +\n            'ng-focus=\"ctrl.onFocus()\"' +\n            'ng-keydown=\"ctrl.onKeydown($event)\"' +\n            'aria-label=\"{{ctrl.navBarAriaLabel}}\">' +\n          '</ul>' +\n        '</nav>' +\n        '<md-nav-ink-bar ng-hide=\"ctrl.mdNoInkBar\"></md-nav-ink-bar>' +\n      '</div>',\n    link: function(scope, element, attrs, ctrl) {\n      $mdTheming(element);\n      if (!ctrl.navBarAriaLabel) {\n        $mdAria.expectAsync(element, 'aria-label', angular.noop);\n      }\n    },\n  };\n}\n\n/**\n * Controller for the nav-bar component.\n *\n * Accessibility functionality is implemented as a site navigator with a\n * listbox, according to\n * https://www.w3.org/TR/wai-aria-practices/#Site_Navigator_Tabbed_Style\n * @param {!angular.JQLite} $element\n * @param {!angular.Scope} $scope\n * @param {!angular.Timeout} $timeout\n * @param {!Object} $mdConstant\n * @constructor\n * @final\n * ngInject\n */\nfunction MdNavBarController($element, $scope, $timeout, $mdConstant) {\n  // Injected variables\n  /** @private @const {!angular.Timeout} */\n  this._$timeout = $timeout;\n\n  /** @private @const {!angular.Scope} */\n  this._$scope = $scope;\n\n  /** @private @const {!Object} */\n  this._$mdConstant = $mdConstant;\n\n  // Data-bound variables.\n  /** @type {string} */\n  this.mdSelectedNavItem;\n\n  /** @type {string} */\n  this.navBarAriaLabel;\n\n  // State variables.\n\n  /** @type {?angular.JQLite} */\n  this._navBarEl = $element[0];\n\n  /** @type {?angular.JQLite} */\n  this._inkbar;\n\n  var self = this;\n  // need to wait for transcluded content to be available\n  var deregisterTabWatch = this._$scope.$watch(function() {\n    return self._navBarEl.querySelectorAll('._md-nav-button').length;\n  },\n  function(newLength) {\n    if (newLength > 0) {\n      self._initTabs();\n      deregisterTabWatch();\n    }\n  });\n}\n\n\n\n/**\n * Initializes the tab components once they exist.\n * @private\n */\nMdNavBarController.prototype._initTabs = function() {\n  this._inkbar = angular.element(this._navBarEl.querySelector('md-nav-ink-bar'));\n\n  var self = this;\n  this._$timeout(function() {\n    self._updateTabs(self.mdSelectedNavItem, undefined);\n  });\n\n  this._$scope.$watch('ctrl.mdSelectedNavItem', function(newValue, oldValue) {\n    // Wait a digest before update tabs for products doing\n    // anything dynamic in the template.\n    self._$timeout(function() {\n      self._updateTabs(newValue, oldValue);\n    });\n  });\n};\n\n/**\n * Set the current tab to be selected.\n * @param {string|undefined} newValue New current tab name.\n * @param {string|undefined} oldValue Previous tab name.\n * @private\n */\nMdNavBarController.prototype._updateTabs = function(newValue, oldValue) {\n  var self = this;\n  var tabs = this._getTabs();\n  var oldIndex = -1;\n  var newIndex = -1;\n  var newTab = this._getTabByName(newValue);\n  var oldTab = this._getTabByName(oldValue);\n\n  if (oldTab) {\n    oldTab.setSelected(false);\n    oldIndex = tabs.indexOf(oldTab);\n  }\n\n  if (newTab) {\n    newTab.setSelected(true);\n    newIndex = tabs.indexOf(newTab);\n  }\n\n  this._$timeout(function() {\n    self._updateInkBarStyles(newTab, newIndex, oldIndex);\n  });\n};\n\n/**\n * Repositions the ink bar to the selected tab.\n * @private\n */\nMdNavBarController.prototype._updateInkBarStyles = function(tab, newIndex, oldIndex) {\n  this._inkbar.toggleClass('_md-left', newIndex < oldIndex)\n      .toggleClass('_md-right', newIndex > oldIndex);\n\n  this._inkbar.css({display: newIndex < 0 ? 'none' : ''});\n\n  if (tab) {\n    var tabEl = tab.getButtonEl();\n    var left = tabEl.offsetLeft;\n\n    this._inkbar.css({left: left + 'px', width: tabEl.offsetWidth + 'px'});\n  }\n};\n\n/**\n * Returns an array of the current tabs.\n * @return {!Array<!NavItemController>}\n * @private\n */\nMdNavBarController.prototype._getTabs = function() {\n  var linkArray = Array.prototype.slice.call(\n      this._navBarEl.querySelectorAll('.md-nav-item'));\n  return linkArray.map(function(el) {\n    return angular.element(el).controller('mdNavItem');\n  });\n};\n\n/**\n * Returns the tab with the specified name.\n * @param {string} name The name of the tab, found in its name attribute.\n * @return {!NavItemController|undefined}\n * @private\n */\nMdNavBarController.prototype._getTabByName = function(name) {\n  return this._findTab(function(tab) {\n    return tab.getName() == name;\n  });\n};\n\n/**\n * Returns the selected tab.\n * @return {!NavItemController|undefined}\n * @private\n */\nMdNavBarController.prototype._getSelectedTab = function() {\n  return this._findTab(function(tab) {\n    return tab.isSelected();\n  });\n};\n\n/**\n * Returns the focused tab.\n * @return {!NavItemController|undefined}\n */\nMdNavBarController.prototype.getFocusedTab = function() {\n  return this._findTab(function(tab) {\n    return tab.hasFocus();\n  });\n};\n\n/**\n * Find a tab that matches the specified function.\n * @private\n */\nMdNavBarController.prototype._findTab = function(fn) {\n  var tabs = this._getTabs();\n  for (var i = 0; i < tabs.length; i++) {\n    if (fn(tabs[i])) {\n      return tabs[i];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Direct focus to the selected tab when focus enters the nav bar.\n */\nMdNavBarController.prototype.onFocus = function() {\n  var tab = this._getSelectedTab();\n  if (tab) {\n    tab.setFocused(true);\n  }\n};\n\n/**\n * Move focus from oldTab to newTab.\n * @param {!NavItemController} oldTab\n * @param {!NavItemController} newTab\n * @private\n */\nMdNavBarController.prototype._moveFocus = function(oldTab, newTab) {\n  oldTab.setFocused(false);\n  newTab.setFocused(true);\n};\n\n/**\n * Responds to keypress events.\n * @param {!Event} e\n */\nMdNavBarController.prototype.onKeydown = function(e) {\n  var keyCodes = this._$mdConstant.KEY_CODE;\n  var tabs = this._getTabs();\n  var focusedTab = this.getFocusedTab();\n  if (!focusedTab) return;\n\n  var focusedTabIndex = tabs.indexOf(focusedTab);\n\n  // use arrow keys to navigate between tabs\n  switch (e.keyCode) {\n    case keyCodes.UP_ARROW:\n    case keyCodes.LEFT_ARROW:\n      if (focusedTabIndex > 0) {\n        this._moveFocus(focusedTab, tabs[focusedTabIndex - 1]);\n      }\n      break;\n    case keyCodes.DOWN_ARROW:\n    case keyCodes.RIGHT_ARROW:\n      if (focusedTabIndex < tabs.length - 1) {\n        this._moveFocus(focusedTab, tabs[focusedTabIndex + 1]);\n      }\n      break;\n    case keyCodes.SPACE:\n    case keyCodes.ENTER:\n      // timeout to avoid a \"digest already in progress\" console error\n      this._$timeout(function() {\n        focusedTab.getButtonEl().click();\n      });\n      break;\n  }\n};\n\n/**\n * ngInject\n */\nfunction MdNavItem($$rAF) {\n  return {\n    restrict: 'E',\n    require: ['mdNavItem', '^mdNavBar'],\n    controller: MdNavItemController,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    replace: true,\n    transclude: true,\n    template: function(tElement, tAttrs) {\n      var hasNavClick = tAttrs.mdNavClick;\n      var hasNavHref = tAttrs.mdNavHref;\n      var hasNavSref = tAttrs.mdNavSref;\n      var hasSrefOpts = tAttrs.srefOpts;\n      var navigationAttribute;\n      var navigationOptions;\n      var buttonTemplate;\n\n      // Cannot specify more than one nav attribute\n      if ((hasNavClick ? 1:0) + (hasNavHref ? 1:0) + (hasNavSref ? 1:0) > 1) {\n        throw Error(\n          'Must not specify more than one of the md-nav-click, md-nav-href, ' +\n          'or md-nav-sref attributes per nav-item directive.'\n        );\n      }\n\n      if (hasNavClick) {\n        navigationAttribute = 'ng-click=\"ctrl.mdNavClick()\"';\n      } else if (hasNavHref) {\n        navigationAttribute = 'ng-href=\"{{ctrl.mdNavHref}}\"';\n      } else if (hasNavSref) {\n        navigationAttribute = 'ui-sref=\"{{ctrl.mdNavSref}}\"';\n      }\n\n      navigationOptions = hasSrefOpts ? 'ui-sref-opts=\"{{ctrl.srefOpts}}\" ' : '';\n\n      if (navigationAttribute) {\n        buttonTemplate = '' +\n          '<md-button class=\"_md-nav-button md-accent\" ' +\n            'ng-class=\"ctrl.getNgClassMap()\" ' +\n            'ng-blur=\"ctrl.setFocused(false)\" ' +\n            'tabindex=\"-1\" ' +\n            navigationOptions +\n            navigationAttribute + '>' +\n            '<span ng-transclude class=\"_md-nav-button-text\"></span>' +\n          '</md-button>';\n      }\n\n      return '' +\n        '<li class=\"md-nav-item\" ' +\n          'role=\"option\" ' +\n          'aria-selected=\"{{ctrl.isSelected()}}\">' +\n          (buttonTemplate || '') +\n        '</li>';\n    },\n    scope: {\n      'mdNavClick': '&?',\n      'mdNavHref': '@?',\n      'mdNavSref': '@?',\n      'srefOpts': '=?',\n      'name': '@',\n    },\n    link: function(scope, element, attrs, controllers) {\n      // When accessing the element's contents synchronously, they\n      // may not be defined yet because of transclusion. There is a higher\n      // chance that it will be accessible if we wait one frame.\n      $$rAF(function() {\n        var mdNavItem = controllers[0];\n        var mdNavBar = controllers[1];\n        var navButton = angular.element(element[0].querySelector('._md-nav-button'));\n\n        if (!mdNavItem.name) {\n          mdNavItem.name = angular.element(element[0]\n              .querySelector('._md-nav-button-text')).text().trim();\n        }\n\n        navButton.on('click', function() {\n          mdNavBar.mdSelectedNavItem = mdNavItem.name;\n          scope.$apply();\n        });\n      });\n    }\n  };\n}\n\n/**\n * Controller for the nav-item component.\n * @param {!angular.JQLite} $element\n * @constructor\n * @final\n * ngInject\n */\nfunction MdNavItemController($element) {\n\n  /** @private @const {!angular.JQLite} */\n  this._$element = $element;\n\n  // Data-bound variables\n\n  /** @const {?Function} */\n  this.mdNavClick;\n\n  /** @const {?string} */\n  this.mdNavHref;\n\n  /** @const {?string} */\n  this.mdNavSref;\n  /** @const {?Object} */\n  this.srefOpts;\n  /** @const {?string} */\n  this.name;\n\n  // State variables\n  /** @private {boolean} */\n  this._selected = false;\n\n  /** @private {boolean} */\n  this._focused = false;\n}\n\n/**\n * Returns a map of class names and values for use by ng-class.\n * @return {!Object<string,boolean>}\n */\nMdNavItemController.prototype.getNgClassMap = function() {\n  return {\n    'md-active': this._selected,\n    'md-primary': this._selected,\n    'md-unselected': !this._selected,\n    'md-focused': this._focused,\n  };\n};\n\n/**\n * Get the name attribute of the tab.\n * @return {string}\n */\nMdNavItemController.prototype.getName = function() {\n  return this.name;\n};\n\n/**\n * Get the button element associated with the tab.\n * @return {!Element}\n */\nMdNavItemController.prototype.getButtonEl = function() {\n  return this._$element[0].querySelector('._md-nav-button');\n};\n\n/**\n * Set the selected state of the tab.\n * @param {boolean} isSelected\n */\nMdNavItemController.prototype.setSelected = function(isSelected) {\n  this._selected = isSelected;\n};\n\n/**\n * @return {boolean}\n */\nMdNavItemController.prototype.isSelected = function() {\n  return this._selected;\n};\n\n/**\n * Set the focused state of the tab.\n * @param {boolean} isFocused\n */\nMdNavItemController.prototype.setFocused = function(isFocused) {\n  this._focused = isFocused;\n\n  if (isFocused) {\n    this.getButtonEl().focus();\n  }\n};\n\n/**\n * @return {boolean}\n */\nMdNavItemController.prototype.hasFocus = function() {\n  return this._focused;\n};\n\n})(window, window.angular);"]}