{"version":3,"sources":["input.js"],"names":[],"mappings":"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","file":"input-compiled.js","sourcesContent":["/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v1.1.1-master-f7ecb4f\n */\n(function( window, angular, undefined ){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.input\n */\nmdInputContainerDirective['$inject'] = [\"$mdTheming\", \"$parse\"];\ninputTextareaDirective['$inject'] = [\"$mdUtil\", \"$window\", \"$mdAria\", \"$timeout\", \"$mdGesture\"];\nmdMaxlengthDirective['$inject'] = [\"$animate\", \"$mdUtil\"];\nplaceholderDirective['$inject'] = [\"$compile\"];\nngMessageDirective['$inject'] = [\"$mdUtil\"];\nmdSelectOnFocusDirective['$inject'] = [\"$timeout\"];\nmdInputInvalidMessagesAnimation['$inject'] = [\"$$AnimateRunner\", \"$animateCss\", \"$mdUtil\", \"$log\"];\nngMessagesAnimation['$inject'] = [\"$$AnimateRunner\", \"$animateCss\", \"$mdUtil\", \"$log\"];\nngMessageAnimation['$inject'] = [\"$$AnimateRunner\", \"$animateCss\", \"$mdUtil\", \"$log\"];\nvar inputModule = angular.module('material.components.input', [\n    'material.core'\n  ])\n  .directive('mdInputContainer', mdInputContainerDirective)\n  .directive('label', labelDirective)\n  .directive('input', inputTextareaDirective)\n  .directive('textarea', inputTextareaDirective)\n  .directive('mdMaxlength', mdMaxlengthDirective)\n  .directive('placeholder', placeholderDirective)\n  .directive('ngMessages', ngMessagesDirective)\n  .directive('ngMessage', ngMessageDirective)\n  .directive('ngMessageExp', ngMessageDirective)\n  .directive('mdSelectOnFocus', mdSelectOnFocusDirective)\n\n  .animation('.md-input-invalid', mdInputInvalidMessagesAnimation)\n  .animation('.md-input-messages-animation', ngMessagesAnimation)\n  .animation('.md-input-message-animation', ngMessageAnimation);\n\n// If we are running inside of tests; expose some extra services so that we can test them\nif (window._mdMocksIncluded) {\n  inputModule.service('$$mdInput', function() {\n    return {\n      // special accessor to internals... useful for testing\n      messages: {\n        show        : showInputMessages,\n        hide        : hideInputMessages,\n        getElement  : getMessagesElement\n      }\n    }\n  })\n\n  // Register a service for each animation so that we can easily inject them into unit tests\n  .service('mdInputInvalidAnimation', mdInputInvalidMessagesAnimation)\n  .service('mdInputMessagesAnimation', ngMessagesAnimation)\n  .service('mdInputMessageAnimation', ngMessageAnimation);\n}\n\n/**\n * @ngdoc directive\n * @name mdInputContainer\n * @module material.components.input\n *\n * @restrict E\n *\n * @description\n * `<md-input-container>` is the parent of any input or textarea element.\n *\n * Input and textarea elements will not behave properly unless the md-input-container\n * parent is provided.\n *\n * A single `<md-input-container>` should contain only one `<input>` element, otherwise it will throw an error.\n *\n * <b>Exception:</b> Hidden inputs (`<input type=\"hidden\" />`) are ignored and will not throw an error, so\n * you may combine these with other inputs.\n *\n * <b>Note:</b> When using `ngMessages` with your input element, make sure the message and container elements\n * are *block* elements, otherwise animations applied to the messages will not look as intended. Either use a `div` and\n * apply the `ng-message` and `ng-messages` classes respectively, or use the `md-block` class on your element.\n *\n * @param md-is-error {expression=} When the given expression evaluates to true, the input container\n *   will go into error state. Defaults to erroring if the input has been touched and is invalid.\n * @param md-no-float {boolean=} When present, `placeholder` attributes on the input will not be converted to floating\n *   labels.\n *\n * @usage\n * <hljs lang=\"html\">\n *\n * <md-input-container>\n *   <label>Username</label>\n *   <input type=\"text\" ng-model=\"user.name\">\n * </md-input-container>\n *\n * <md-input-container>\n *   <label>Description</label>\n *   <textarea ng-model=\"user.description\"></textarea>\n * </md-input-container>\n *\n * </hljs>\n *\n * <h3>When disabling floating labels</h3>\n * <hljs lang=\"html\">\n *\n * <md-input-container md-no-float>\n *   <input type=\"text\" placeholder=\"Non-Floating Label\">\n * </md-input-container>\n *\n * </hljs>\n */\nfunction mdInputContainerDirective($mdTheming, $parse) {\n\n  ContainerCtrl['$inject'] = [\"$scope\", \"$element\", \"$attrs\", \"$animate\"];\n  var INPUT_TAGS = ['INPUT', 'TEXTAREA', 'SELECT', 'MD-SELECT'];\n\n  var LEFT_SELECTORS = INPUT_TAGS.reduce(function(selectors, isel) {\n    return selectors.concat(['md-icon ~ ' + isel, '.md-icon ~ ' + isel]);\n  }, []).join(\",\");\n\n  var RIGHT_SELECTORS = INPUT_TAGS.reduce(function(selectors, isel) {\n    return selectors.concat([isel + ' ~ md-icon', isel + ' ~ .md-icon']);\n  }, []).join(\",\");\n\n  return {\n    restrict: 'E',\n    compile: compile,\n    controller: ContainerCtrl\n  };\n\n  function compile(tElement) {\n    // Check for both a left & right icon\n    var leftIcon = tElement[0].querySelector(LEFT_SELECTORS);\n    var rightIcon = tElement[0].querySelector(RIGHT_SELECTORS);\n\n    if (leftIcon) { tElement.addClass('md-icon-left'); }\n    if (rightIcon) { tElement.addClass('md-icon-right'); }\n\n    return function postLink(scope, element) {\n      $mdTheming(element);\n    };\n  }\n\n  function ContainerCtrl($scope, $element, $attrs, $animate) {\n    var self = this;\n\n    self.isErrorGetter = $attrs.mdIsError && $parse($attrs.mdIsError);\n\n    self.delegateClick = function() {\n      self.input.focus();\n    };\n    self.element = $element;\n    self.setFocused = function(isFocused) {\n      $element.toggleClass('md-input-focused', !!isFocused);\n    };\n    self.setHasValue = function(hasValue) {\n      $element.toggleClass('md-input-has-value', !!hasValue);\n    };\n    self.setHasPlaceholder = function(hasPlaceholder) {\n      $element.toggleClass('md-input-has-placeholder', !!hasPlaceholder);\n    };\n    self.setInvalid = function(isInvalid) {\n      if (isInvalid) {\n        $animate.addClass($element, 'md-input-invalid');\n      } else {\n        $animate.removeClass($element, 'md-input-invalid');\n      }\n    };\n    $scope.$watch(function() {\n      return self.label && self.input;\n    }, function(hasLabelAndInput) {\n      if (hasLabelAndInput && !self.label.attr('for')) {\n        self.label.attr('for', self.input.attr('id'));\n      }\n    });\n  }\n}\n\nfunction labelDirective() {\n  return {\n    restrict: 'E',\n    require: '^?mdInputContainer',\n    link: function(scope, element, attr, containerCtrl) {\n      if (!containerCtrl || attr.mdNoFloat || element.hasClass('md-container-ignore')) return;\n\n      containerCtrl.label = element;\n      scope.$on('$destroy', function() {\n        containerCtrl.label = null;\n      });\n    }\n  };\n}\n\n/**\n * @ngdoc directive\n * @name mdInput\n * @restrict E\n * @module material.components.input\n *\n * @description\n * You can use any `<input>` or `<textarea>` element as a child of an `<md-input-container>`. This\n * allows you to build complex forms for data entry.\n *\n * When the input is required and uses a floating label, then the label will automatically contain\n * an asterisk (`*`).<br/>\n * This behavior can be disabled by using the `md-no-asterisk` attribute.\n *\n * @param {number=} md-maxlength The maximum number of characters allowed in this input. If this is\n *   specified, a character counter will be shown underneath the input.<br/><br/>\n *   The purpose of **`md-maxlength`** is exactly to show the max length counter text. If you don't\n *   want the counter text and only need \"plain\" validation, you can use the \"simple\" `ng-maxlength`\n *   or maxlength attributes.<br/><br/>\n *   **Note:** Only valid for text/string inputs (not numeric).\n *\n * @param {string=} aria-label Aria-label is required when no label is present.  A warning message\n *   will be logged in the console if not present.\n * @param {string=} placeholder An alternative approach to using aria-label when the label is not\n *   PRESENT. The placeholder text is copied to the aria-label attribute.\n * @param md-no-autogrow {boolean=} When present, textareas will not grow automatically.\n * @param md-no-asterisk {boolean=} When present, an asterisk will not be appended to the inputs floating label\n * @param md-no-resize {boolean=} Disables the textarea resize handle.\n * @param {number=} max-rows The maximum amount of rows for a textarea.\n * @param md-detect-hidden {boolean=} When present, textareas will be sized properly when they are\n *   revealed after being hidden. This is off by default for performance reasons because it\n *   guarantees a reflow every digest cycle.\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-input-container>\n *   <label>Color</label>\n *   <input type=\"text\" ng-model=\"color\" required md-maxlength=\"10\">\n * </md-input-container>\n * </hljs>\n *\n * <h3>With Errors</h3>\n *\n * `md-input-container` also supports errors using the standard `ng-messages` directives and\n * animates the messages when they become visible using from the `ngEnter`/`ngLeave` events or\n * the `ngShow`/`ngHide` events.\n *\n * By default, the messages will be hidden until the input is in an error state. This is based off\n * of the `md-is-error` expression of the `md-input-container`. This gives the user a chance to\n * fill out the form before the errors become visible.\n *\n * <hljs lang=\"html\">\n * <form name=\"colorForm\">\n *   <md-input-container>\n *     <label>Favorite Color</label>\n *     <input name=\"favoriteColor\" ng-model=\"favoriteColor\" required>\n *     <div ng-messages=\"colorForm.favoriteColor.$error\">\n *       <div ng-message=\"required\">This is required!</div>\n *     </div>\n *   </md-input-container>\n * </form>\n * </hljs>\n *\n * We automatically disable this auto-hiding functionality if you provide any of the following\n * visibility directives on the `ng-messages` container:\n *\n *  - `ng-if`\n *  - `ng-show`/`ng-hide`\n *  - `ng-switch-when`/`ng-switch-default`\n *\n * You can also disable this functionality manually by adding the `md-auto-hide=\"false\"` expression\n * to the `ng-messages` container. This may be helpful if you always want to see the error messages\n * or if you are building your own visibilty directive.\n *\n * _<b>Note:</b> The `md-auto-hide` attribute is a static string that is  only checked upon\n * initialization of the `ng-messages` directive to see if it equals the string `false`._\n *\n * <hljs lang=\"html\">\n * <form name=\"userForm\">\n *   <md-input-container>\n *     <label>Last Name</label>\n *     <input name=\"lastName\" ng-model=\"lastName\" required md-maxlength=\"10\" minlength=\"4\">\n *     <div ng-messages=\"userForm.lastName.$error\" ng-show=\"userForm.lastName.$dirty\">\n *       <div ng-message=\"required\">This is required!</div>\n *       <div ng-message=\"md-maxlength\">That's too long!</div>\n *       <div ng-message=\"minlength\">That's too short!</div>\n *     </div>\n *   </md-input-container>\n *   <md-input-container>\n *     <label>Biography</label>\n *     <textarea name=\"bio\" ng-model=\"biography\" required md-maxlength=\"150\"></textarea>\n *     <div ng-messages=\"userForm.bio.$error\" ng-show=\"userForm.bio.$dirty\">\n *       <div ng-message=\"required\">This is required!</div>\n *       <div ng-message=\"md-maxlength\">That's too long!</div>\n *     </div>\n *   </md-input-container>\n *   <md-input-container>\n *     <input aria-label='title' ng-model='title'>\n *   </md-input-container>\n *   <md-input-container>\n *     <input placeholder='title' ng-model='title'>\n *   </md-input-container>\n * </form>\n * </hljs>\n *\n * <h3>Notes</h3>\n *\n * - Requires [ngMessages](https://docs.angularjs.org/api/ngMessages).\n * - Behaves like the [AngularJS input directive](https://docs.angularjs.org/api/ng/directive/input).\n *\n * The `md-input` and `md-input-container` directives use very specific positioning to achieve the\n * error animation effects. Therefore, it is *not* advised to use the Layout system inside of the\n * `<md-input-container>` tags. Instead, use relative or absolute positioning.\n *\n *\n * <h3>Textarea directive</h3>\n * The `textarea` element within a `md-input-container` has the following specific behavior:\n * - By default the `textarea` grows as the user types. This can be disabled via the `md-no-autogrow`\n * attribute.\n * - If a `textarea` has the `rows` attribute, it will treat the `rows` as the minimum height and will\n * continue growing as the user types. For example a textarea with `rows=\"3\"` will be 3 lines of text\n * high initially. If no rows are specified, the directive defaults to 1.\n * - The textarea's height gets set on initialization, as well as while the user is typing. In certain situations\n * (e.g. while animating) the directive might have been initialized, before the element got it's final height. In\n * those cases, you can trigger a resize manually by broadcasting a `md-resize-textarea` event on the scope.\n * - If you wan't a `textarea` to stop growing at a certain point, you can specify the `max-rows` attribute.\n * - The textarea's bottom border acts as a handle which users can drag, in order to resize the element vertically.\n * Once the user has resized a `textarea`, the autogrowing functionality becomes disabled. If you don't want a\n * `textarea` to be resizeable by the user, you can add the `md-no-resize` attribute.\n */\n\nfunction inputTextareaDirective($mdUtil, $window, $mdAria, $timeout, $mdGesture) {\n  return {\n    restrict: 'E',\n    require: ['^?mdInputContainer', '?ngModel', '?^form'],\n    link: postLink\n  };\n\n  function postLink(scope, element, attr, ctrls) {\n\n    var containerCtrl = ctrls[0];\n    var hasNgModel = !!ctrls[1];\n    var ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel();\n    var parentForm = ctrls[2];\n    var isReadonly = angular.isDefined(attr.readonly);\n    var mdNoAsterisk = $mdUtil.parseAttributeBoolean(attr.mdNoAsterisk);\n    var tagName = element[0].tagName.toLowerCase();\n\n\n    if (!containerCtrl) return;\n    if (attr.type === 'hidden') {\n      element.attr('aria-hidden', 'true');\n      return;\n    } else if (containerCtrl.input) {\n      if (containerCtrl.input[0].contains(element[0])) {\n        return;\n      } else {\n        throw new Error(\"<md-input-container> can only have *one* <input>, <textarea> or <md-select> child element!\");\n      }\n    }\n    containerCtrl.input = element;\n\n    setupAttributeWatchers();\n\n    // Add an error spacer div after our input to provide space for the char counter and any ng-messages\n    var errorsSpacer = angular.element('<div class=\"md-errors-spacer\">');\n    element.after(errorsSpacer);\n\n    if (!containerCtrl.label) {\n      $mdAria.expect(element, 'aria-label', attr.placeholder);\n    }\n\n    element.addClass('md-input');\n    if (!element.attr('id')) {\n      element.attr('id', 'input_' + $mdUtil.nextUid());\n    }\n\n    // This works around a Webkit issue where number inputs, placed in a flexbox, that have\n    // a `min` and `max` will collapse to about 1/3 of their proper width. Please check #7349\n    // for more info. Also note that we don't override the `step` if the user has specified it,\n    // in order to prevent some unexpected behaviour.\n    if (tagName === 'input' && attr.type === 'number' && attr.min && attr.max && !attr.step) {\n      element.attr('step', 'any');\n    } else if (tagName === 'textarea') {\n      setupTextarea();\n    }\n\n    // If the input doesn't have an ngModel, it may have a static value. For that case,\n    // we have to do one initial check to determine if the container should be in the\n    // \"has a value\" state.\n    if (!hasNgModel) {\n      inputCheckValue();\n    }\n\n    var isErrorGetter = containerCtrl.isErrorGetter || function() {\n      return ngModelCtrl.$invalid && (ngModelCtrl.$touched || (parentForm && parentForm.$submitted));\n    };\n\n    scope.$watch(isErrorGetter, containerCtrl.setInvalid);\n\n    // When the developer uses the ngValue directive for the input, we have to observe the attribute, because\n    // Angular's ngValue directive is just setting the `value` attribute.\n    if (attr.ngValue) {\n      attr.$observe('value', inputCheckValue);\n    }\n\n    ngModelCtrl.$parsers.push(ngModelPipelineCheckValue);\n    ngModelCtrl.$formatters.push(ngModelPipelineCheckValue);\n\n    element.on('input', inputCheckValue);\n\n    if (!isReadonly) {\n      element\n        .on('focus', function(ev) {\n          $mdUtil.nextTick(function() {\n            containerCtrl.setFocused(true);\n          });\n        })\n        .on('blur', function(ev) {\n          $mdUtil.nextTick(function() {\n            containerCtrl.setFocused(false);\n            inputCheckValue();\n          });\n        });\n    }\n\n    scope.$on('$destroy', function() {\n      containerCtrl.setFocused(false);\n      containerCtrl.setHasValue(false);\n      containerCtrl.input = null;\n    });\n\n    /** Gets run through ngModel's pipeline and set the `has-value` class on the container. */\n    function ngModelPipelineCheckValue(arg) {\n      containerCtrl.setHasValue(!ngModelCtrl.$isEmpty(arg));\n      return arg;\n    }\n\n    function setupAttributeWatchers() {\n      if (containerCtrl.label) {\n        attr.$observe('required', function (value) {\n          // We don't need to parse the required value, it's always a boolean because of angular's\n          // required directive.\n          containerCtrl.label.toggleClass('md-required', value && !mdNoAsterisk);\n        });\n      }\n    }\n\n    function inputCheckValue() {\n      // An input's value counts if its length > 0,\n      // or if the input's validity state says it has bad input (eg string in a number input)\n      containerCtrl.setHasValue(element.val().length > 0 || (element[0].validity || {}).badInput);\n    }\n\n    function setupTextarea() {\n      var isAutogrowing = !attr.hasOwnProperty('mdNoAutogrow');\n\n      attachResizeHandle();\n\n      if (!isAutogrowing) return;\n\n      // Can't check if height was or not explicity set,\n      // so rows attribute will take precedence if present\n      var minRows = attr.hasOwnProperty('rows') ? parseInt(attr.rows) : NaN;\n      var maxRows = attr.hasOwnProperty('maxRows') ? parseInt(attr.maxRows) : NaN;\n      var scopeResizeListener = scope.$on('md-resize-textarea', growTextarea);\n      var lineHeight = null;\n      var node = element[0];\n\n      // This timeout is necessary, because the browser needs a little bit\n      // of time to calculate the `clientHeight` and `scrollHeight`.\n      $timeout(function() {\n        $mdUtil.nextTick(growTextarea);\n      }, 10, false);\n\n      // We could leverage ngModel's $parsers here, however it\n      // isn't reliable, because Angular trims the input by default,\n      // which means that growTextarea won't fire when newlines and\n      // spaces are added.\n      element.on('input', growTextarea);\n\n      // We should still use the $formatters, because they fire when\n      // the value was changed from outside the textarea.\n      if (hasNgModel) {\n        ngModelCtrl.$formatters.push(formattersListener);\n      }\n\n      if (!minRows) {\n        element.attr('rows', 1);\n      }\n\n      angular.element($window).on('resize', growTextarea);\n      scope.$on('$destroy', disableAutogrow);\n\n      function growTextarea() {\n        // temporarily disables element's flex so its height 'runs free'\n        element\n          .attr('rows', 1)\n          .css('height', 'auto')\n          .addClass('md-no-flex');\n\n        var height = getHeight();\n\n        if (!lineHeight) {\n          // offsetHeight includes padding which can throw off our value\n          var originalPadding = element[0].style.padding || '';\n          lineHeight = element.css('padding', 0).prop('offsetHeight');\n          element[0].style.padding = originalPadding;\n        }\n\n        if (minRows && lineHeight) {\n          height = Math.max(height, lineHeight * minRows);\n        }\n\n        if (maxRows && lineHeight) {\n          var maxHeight = lineHeight * maxRows;\n\n          if (maxHeight < height) {\n            element.attr('md-no-autogrow', '');\n            height = maxHeight;\n          } else {\n            element.removeAttr('md-no-autogrow');\n          }\n        }\n\n        if (lineHeight) {\n          element.attr('rows', Math.round(height / lineHeight));\n        }\n\n        element\n          .css('height', height + 'px')\n          .removeClass('md-no-flex');\n      }\n\n      function getHeight() {\n        var offsetHeight = node.offsetHeight;\n        var line = node.scrollHeight - offsetHeight;\n        return offsetHeight + Math.max(line, 0);\n      }\n\n      function formattersListener(value) {\n        $mdUtil.nextTick(growTextarea);\n        return value;\n      }\n\n      function disableAutogrow() {\n        if (!isAutogrowing) return;\n\n        isAutogrowing = false;\n        angular.element($window).off('resize', growTextarea);\n        scopeResizeListener && scopeResizeListener();\n        element\n          .attr('md-no-autogrow', '')\n          .off('input', growTextarea);\n\n        if (hasNgModel) {\n          var listenerIndex = ngModelCtrl.$formatters.indexOf(formattersListener);\n\n          if (listenerIndex > -1) {\n            ngModelCtrl.$formatters.splice(listenerIndex, 1);\n          }\n        }\n      }\n\n      function attachResizeHandle() {\n        if (attr.hasOwnProperty('mdNoResize')) return;\n\n        var handle = angular.element('<div class=\"md-resize-handle\"></div>');\n        var isDragging = false;\n        var dragStart = null;\n        var startHeight = 0;\n        var container = containerCtrl.element;\n        var dragGestureHandler = $mdGesture.register(handle, 'drag', { horizontal: false });\n\n\n        element.wrap('<div class=\"md-resize-wrapper\">').after(handle);\n        handle.on('mousedown', onMouseDown);\n\n        container\n          .on('$md.dragstart', onDragStart)\n          .on('$md.drag', onDrag)\n          .on('$md.dragend', onDragEnd);\n\n        scope.$on('$destroy', function() {\n          handle\n            .off('mousedown', onMouseDown)\n            .remove();\n\n          container\n            .off('$md.dragstart', onDragStart)\n            .off('$md.drag', onDrag)\n            .off('$md.dragend', onDragEnd);\n\n          dragGestureHandler();\n          handle = null;\n          container = null;\n          dragGestureHandler = null;\n        });\n\n        function onMouseDown(ev) {\n          ev.preventDefault();\n          isDragging = true;\n          dragStart = ev.clientY;\n          startHeight = parseFloat(element.css('height')) || element.prop('offsetHeight');\n        }\n\n        function onDragStart(ev) {\n          if (!isDragging) return;\n          ev.preventDefault();\n          disableAutogrow();\n          container.addClass('md-input-resized');\n        }\n\n        function onDrag(ev) {\n          if (!isDragging) return;\n\n          element.css('height', (startHeight + ev.pointer.distanceY) + 'px');\n        }\n\n        function onDragEnd(ev) {\n          if (!isDragging) return;\n          isDragging = false;\n          container.removeClass('md-input-resized');\n        }\n      }\n\n      // Attach a watcher to detect when the textarea gets shown.\n      if (attr.hasOwnProperty('mdDetectHidden')) {\n\n        var handleHiddenChange = function() {\n          var wasHidden = false;\n\n          return function() {\n            var isHidden = node.offsetHeight === 0;\n\n            if (isHidden === false && wasHidden === true) {\n              growTextarea();\n            }\n\n            wasHidden = isHidden;\n          };\n        }();\n\n        // Check every digest cycle whether the visibility of the textarea has changed.\n        // Queue up to run after the digest cycle is complete.\n        scope.$watch(function() {\n          $mdUtil.nextTick(handleHiddenChange, false);\n          return true;\n        });\n      }\n    }\n  }\n}\n\nfunction mdMaxlengthDirective($animate, $mdUtil) {\n  return {\n    restrict: 'A',\n    require: ['ngModel', '^mdInputContainer'],\n    link: postLink\n  };\n\n  function postLink(scope, element, attr, ctrls) {\n    var maxlength;\n    var ngModelCtrl = ctrls[0];\n    var containerCtrl = ctrls[1];\n    var charCountEl, errorsSpacer;\n\n    // Wait until the next tick to ensure that the input has setup the errors spacer where we will\n    // append our counter\n    $mdUtil.nextTick(function() {\n      errorsSpacer = angular.element(containerCtrl.element[0].querySelector('.md-errors-spacer'));\n      charCountEl = angular.element('<div class=\"md-char-counter\">');\n\n      // Append our character counter inside the errors spacer\n      errorsSpacer.append(charCountEl);\n\n      // Stop model from trimming. This makes it so whitespace\n      // over the maxlength still counts as invalid.\n      attr.$set('ngTrim', 'false');\n\n      scope.$watch(attr.mdMaxlength, function(value) {\n        maxlength = value;\n        if (angular.isNumber(value) && value > 0) {\n          if (!charCountEl.parent().length) {\n            $animate.enter(charCountEl, errorsSpacer);\n          }\n          renderCharCount();\n        } else {\n          $animate.leave(charCountEl);\n        }\n      });\n\n      ngModelCtrl.$validators['md-maxlength'] = function(modelValue, viewValue) {\n        if (!angular.isNumber(maxlength) || maxlength < 0) {\n          return true;\n        }\n\n        // We always update the char count, when the modelValue has changed.\n        // Using the $validators for triggering the update works very well.\n        renderCharCount();\n\n        return ( modelValue || element.val() || viewValue || '' ).length <= maxlength;\n      };\n    });\n\n    function renderCharCount(value) {\n      // If we have not been appended to the body yet; do not render\n      if (!charCountEl.parent) {\n        return value;\n      }\n\n      // Force the value into a string since it may be a number,\n      // which does not have a length property.\n      charCountEl.text(String(element.val() || value || '').length + ' / ' + maxlength);\n      return value;\n    }\n  }\n}\n\nfunction placeholderDirective($compile) {\n  return {\n    restrict: 'A',\n    require: '^^?mdInputContainer',\n    priority: 200,\n    link: {\n      // Note that we need to do this in the pre-link, as opposed to the post link, if we want to\n      // support data bindings in the placeholder. This is necessary, because we have a case where\n      // we transfer the placeholder value to the `<label>` and we remove it from the original `<input>`.\n      // If we did this in the post-link, Angular would have set up the observers already and would be\n      // re-adding the attribute, even though we removed it from the element.\n      pre: preLink\n    }\n  };\n\n  function preLink(scope, element, attr, inputContainer) {\n    // If there is no input container, just return\n    if (!inputContainer) return;\n\n    var label = inputContainer.element.find('label');\n    var noFloat = inputContainer.element.attr('md-no-float');\n\n    // If we have a label, or they specify the md-no-float attribute, just return\n    if ((label && label.length) || noFloat === '' || scope.$eval(noFloat)) {\n      // Add a placeholder class so we can target it in the CSS\n      inputContainer.setHasPlaceholder(true);\n      return;\n    }\n\n    // md-select handles placeholders on it's own\n    if (element[0].nodeName != 'MD-SELECT') {\n      // Move the placeholder expression to the label\n      var newLabel = angular.element('<label ng-click=\"delegateClick()\" tabindex=\"-1\">' + attr.placeholder + '</label>');\n\n      // Note that we unset it via `attr`, in order to get Angular\n      // to remove any observers that it might have set up. Otherwise\n      // the attribute will be added on the next digest.\n      attr.$set('placeholder', null);\n\n      // We need to compile the label manually in case it has any bindings.\n      // A gotcha here is that we first add the element to the DOM and we compile\n      // it later. This is necessary, because if we compile the element beforehand,\n      // it won't be able to find the `mdInputContainer` controller.\n      inputContainer.element\n        .addClass('md-icon-float')\n        .prepend(newLabel);\n\n      $compile(newLabel)(scope);\n    }\n  }\n}\n\n/**\n * @ngdoc directive\n * @name mdSelectOnFocus\n * @module material.components.input\n *\n * @restrict A\n *\n * @description\n * The `md-select-on-focus` directive allows you to automatically select the element's input text on focus.\n *\n * <h3>Notes</h3>\n * - The use of `md-select-on-focus` is restricted to `<input>` and `<textarea>` elements.\n *\n * @usage\n * <h3>Using with an Input</h3>\n * <hljs lang=\"html\">\n *\n * <md-input-container>\n *   <label>Auto Select</label>\n *   <input type=\"text\" md-select-on-focus>\n * </md-input-container>\n * </hljs>\n *\n * <h3>Using with a Textarea</h3>\n * <hljs lang=\"html\">\n *\n * <md-input-container>\n *   <label>Auto Select</label>\n *   <textarea md-select-on-focus>This text will be selected on focus.</textarea>\n * </md-input-container>\n *\n * </hljs>\n */\nfunction mdSelectOnFocusDirective($timeout) {\n\n  return {\n    restrict: 'A',\n    link: postLink\n  };\n\n  function postLink(scope, element, attr) {\n    if (element[0].nodeName !== 'INPUT' && element[0].nodeName !== \"TEXTAREA\") return;\n\n    var preventMouseUp = false;\n\n    element\n      .on('focus', onFocus)\n      .on('mouseup', onMouseUp);\n\n    scope.$on('$destroy', function() {\n      element\n        .off('focus', onFocus)\n        .off('mouseup', onMouseUp);\n    });\n\n    function onFocus() {\n      preventMouseUp = true;\n\n      $timeout(function() {\n        // Use HTMLInputElement#select to fix firefox select issues.\n        // The debounce is here for Edge's sake, otherwise the selection doesn't work.\n        element[0].select();\n\n        // This should be reset from inside the `focus`, because the event might\n        // have originated from something different than a click, e.g. a keyboard event.\n        preventMouseUp = false;\n      }, 1, false);\n    }\n\n    // Prevents the default action of the first `mouseup` after a focus.\n    // This is necessary, because browsers fire a `mouseup` right after the element\n    // has been focused. In some browsers (Firefox in particular) this can clear the\n    // selection. There are examples of the problem in issue #7487.\n    function onMouseUp(event) {\n      if (preventMouseUp) {\n        event.preventDefault();\n      }\n    }\n  }\n}\n\nvar visibilityDirectives = ['ngIf', 'ngShow', 'ngHide', 'ngSwitchWhen', 'ngSwitchDefault'];\nfunction ngMessagesDirective() {\n  return {\n    restrict: 'EA',\n    link: postLink,\n\n    // This is optional because we don't want target *all* ngMessage instances, just those inside of\n    // mdInputContainer.\n    require: '^^?mdInputContainer'\n  };\n\n  function postLink(scope, element, attrs, inputContainer) {\n    // If we are not a child of an input container, don't do anything\n    if (!inputContainer) return;\n\n    // Add our animation class\n    element.toggleClass('md-input-messages-animation', true);\n\n    // Add our md-auto-hide class to automatically hide/show messages when container is invalid\n    element.toggleClass('md-auto-hide', true);\n\n    // If we see some known visibility directives, remove the md-auto-hide class\n    if (attrs.mdAutoHide == 'false' || hasVisibiltyDirective(attrs)) {\n      element.toggleClass('md-auto-hide', false);\n    }\n  }\n\n  function hasVisibiltyDirective(attrs) {\n    return visibilityDirectives.some(function(attr) {\n      return attrs[attr];\n    });\n  }\n}\n\nfunction ngMessageDirective($mdUtil) {\n  return {\n    restrict: 'EA',\n    compile: compile,\n    priority: 100\n  };\n\n  function compile(tElement) {\n    if (!isInsideInputContainer(tElement)) {\n\n      // When the current element is inside of a document fragment, then we need to check for an input-container\n      // in the postLink, because the element will be later added to the DOM and is currently just in a temporary\n      // fragment, which causes the input-container check to fail.\n      if (isInsideFragment()) {\n        return function (scope, element) {\n          if (isInsideInputContainer(element)) {\n            // Inside of the postLink function, a ngMessage directive will be a comment element, because it's\n            // currently hidden. To access the shown element, we need to use the element from the compile function.\n            initMessageElement(tElement);\n          }\n        };\n      }\n    } else {\n      initMessageElement(tElement);\n    }\n\n    function isInsideFragment() {\n      var nextNode = tElement[0];\n      while (nextNode = nextNode.parentNode) {\n        if (nextNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    function isInsideInputContainer(element) {\n      return !!$mdUtil.getClosest(element, \"md-input-container\");\n    }\n\n    function initMessageElement(element) {\n      // Add our animation class\n      element.toggleClass('md-input-message-animation', true);\n    }\n  }\n}\n\nvar $$AnimateRunner, $animateCss, $mdUtil, $log;\n\nfunction mdInputInvalidMessagesAnimation($$AnimateRunner, $animateCss, $mdUtil, $log) {\n  saveSharedServices($$AnimateRunner, $animateCss, $mdUtil, $log);\n\n  return {\n    addClass: function(element, className, done) {\n      showInputMessages(element, done);\n    }\n\n    // NOTE: We do not need the removeClass method, because the message ng-leave animation will fire\n  };\n}\n\nfunction ngMessagesAnimation($$AnimateRunner, $animateCss, $mdUtil, $log) {\n  saveSharedServices($$AnimateRunner, $animateCss, $mdUtil, $log);\n\n  return {\n    enter: function(element, done) {\n      showInputMessages(element, done);\n    },\n\n    leave: function(element, done) {\n      hideInputMessages(element, done);\n    },\n\n    addClass: function(element, className, done) {\n      if (className == \"ng-hide\") {\n        hideInputMessages(element, done);\n      } else {\n        done();\n      }\n    },\n\n    removeClass: function(element, className, done) {\n      if (className == \"ng-hide\") {\n        showInputMessages(element, done);\n      } else {\n        done();\n      }\n    }\n  };\n}\n\nfunction ngMessageAnimation($$AnimateRunner, $animateCss, $mdUtil, $log) {\n  saveSharedServices($$AnimateRunner, $animateCss, $mdUtil, $log);\n\n  return {\n    enter: function(element, done) {\n      var animator = showMessage(element);\n\n      animator.start().done(done);\n    },\n\n    leave: function(element, done) {\n      var animator = hideMessage(element);\n\n      animator.start().done(done);\n    }\n  };\n}\n\nfunction showInputMessages(element, done) {\n  var animators = [], animator;\n  var messages = getMessagesElement(element);\n  var children = messages.children();\n\n  if (messages.length == 0 || children.length == 0) {\n    $log.warn('mdInput messages show animation called on invalid messages element: ', element);\n    done();\n    return;\n  }\n\n  angular.forEach(children, function(child) {\n    animator = showMessage(angular.element(child));\n\n    animators.push(animator.start());\n  });\n\n  $$AnimateRunner.all(animators, done);\n}\n\nfunction hideInputMessages(element, done) {\n  var animators = [], animator;\n  var messages = getMessagesElement(element);\n  var children = messages.children();\n\n  if (messages.length == 0 || children.length == 0) {\n    $log.warn('mdInput messages hide animation called on invalid messages element: ', element);\n    done();\n    return;\n  }\n\n  angular.forEach(children, function(child) {\n    animator = hideMessage(angular.element(child));\n\n    animators.push(animator.start());\n  });\n\n  $$AnimateRunner.all(animators, done);\n}\n\nfunction showMessage(element) {\n  var height = parseInt(window.getComputedStyle(element[0]).height);\n  var topMargin = parseInt(window.getComputedStyle(element[0]).marginTop);\n\n  var messages = getMessagesElement(element);\n  var container = getInputElement(element);\n\n  // Check to see if the message is already visible so we can skip\n  var alreadyVisible = (topMargin > -height);\n\n  // If we have the md-auto-hide class, the md-input-invalid animation will fire, so we can skip\n  if (alreadyVisible || (messages.hasClass('md-auto-hide') && !container.hasClass('md-input-invalid'))) {\n    return $animateCss(element, {});\n  }\n\n  return $animateCss(element, {\n    event: 'enter',\n    structural: true,\n    from: {\"opacity\": 0, \"margin-top\": -height + \"px\"},\n    to: {\"opacity\": 1, \"margin-top\": \"0\"},\n    duration: 0.3\n  });\n}\n\nfunction hideMessage(element) {\n  var height = element[0].offsetHeight;\n  var styles = window.getComputedStyle(element[0]);\n\n  // If we are already hidden, just return an empty animation\n  if (parseInt(styles.opacity) === 0) {\n    return $animateCss(element, {});\n  }\n\n  // Otherwise, animate\n  return $animateCss(element, {\n    event: 'leave',\n    structural: true,\n    from: {\"opacity\": 1, \"margin-top\": 0},\n    to: {\"opacity\": 0, \"margin-top\": -height + \"px\"},\n    duration: 0.3\n  });\n}\n\nfunction getInputElement(element) {\n  var inputContainer = element.controller('mdInputContainer');\n\n  return inputContainer.element;\n}\n\nfunction getMessagesElement(element) {\n  // If we ARE the messages element, just return ourself\n  if (element.hasClass('md-input-messages-animation')) {\n    return element;\n  }\n\n  // If we are a ng-message element, we need to traverse up the DOM tree\n  if (element.hasClass('md-input-message-animation')) {\n    return angular.element($mdUtil.getClosest(element, function(node) {\n      return node.classList.contains('md-input-messages-animation');\n    }));\n  }\n\n  // Otherwise, we can traverse down\n  return angular.element(element[0].querySelector('.md-input-messages-animation'));\n}\n\nfunction saveSharedServices(_$$AnimateRunner_, _$animateCss_, _$mdUtil_, _$log_) {\n  $$AnimateRunner = _$$AnimateRunner_;\n  $animateCss = _$animateCss_;\n  $mdUtil = _$mdUtil_;\n  $log = _$log_;\n}\n\n})(window, window.angular);"]}