{"version":3,"sources":["textField.js"],"names":[],"mappings":"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","file":"textField-compiled.js","sourcesContent":["/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.9.0-rc1-master-3c0ce9b\n */\n(function() {\n'use strict';\n\n/**\n * @ngdoc module\n * @name material.components.textField\n * @description\n * Form\n */\nangular.module('material.components.textField', [\n  'material.core'\n])\n  .directive('mdInputGroup', mdInputGroupDirective)\n  .directive('mdInput', mdInputDirective)\n  .directive('mdTextFloat', mdTextFloatDirective);\n\n\nfunction mdTextFloatDirective($mdTheming, $mdUtil, $parse, $log) {\n  return {\n    restrict: 'E',\n    replace: true,\n    scope : {\n      fid : '@?mdFid',\n      label : '@?',\n      value : '=ngModel'\n    },\n    compile : function(element, attr) {\n\n      $log.warn('<md-text-float> is deprecated. Please use `<md-input-container>` and `<input>`.' + \n                'More information at http://material.angularjs.org/#/api/material.components.input/directive/mdInputContainer');\n\n      if ( angular.isUndefined(attr.mdFid) ) {\n        attr.mdFid = $mdUtil.nextUid();\n      }\n\n      return {\n        pre : function(scope, element, attrs) {\n          var disabledParsed = $parse(attrs.ngDisabled);\n          scope.isDisabled = function() {\n            return disabledParsed(scope.$parent);\n          };\n\n          scope.inputType = attrs.type || \"text\";\n        },\n        post: $mdTheming\n      };\n    },\n    template:\n    '<md-input-group tabindex=\"-1\">' +\n    ' <label for=\"{{fid}}\" >{{label}}</label>' +\n    ' <md-input id=\"{{fid}}\" ng-disabled=\"isDisabled()\" ng-model=\"value\" type=\"{{inputType}}\"></md-input>' +\n    '</md-input-group>'\n  };\n}\nmdTextFloatDirective.$inject = [\"$mdTheming\", \"$mdUtil\", \"$parse\", \"$log\"];\n\nfunction mdInputGroupDirective($log) {\n  return {\n    restrict: 'CE',\n    controller: ['$element', function($element) {\n\n      $log.warn('<md-input-group> is deprecated. Please use `<md-input-container>` and `<input>`.' + \n                'More information at http://material.angularjs.org/#/api/material.components.input/directive/mdInputContainer');\n      this.setFocused = function(isFocused) {\n        $element.toggleClass('md-input-focused', !!isFocused);\n      };\n      this.setHasValue = function(hasValue) {\n        $element.toggleClass('md-input-has-value', hasValue );\n      };\n    }]\n  };\n\n}\nmdInputGroupDirective.$inject = [\"$log\"];\n\nfunction mdInputDirective($mdUtil, $log) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<input >',\n    require: ['^?mdInputGroup', '?ngModel'],\n    link: function(scope, element, attr, ctrls) {\n      if ( !ctrls[0] ) return;\n\n      $log.warn('<md-input> is deprecated. Please use `<md-input-container>` and `<input>`.' + \n                'More information at http://material.angularjs.org/#/api/material.components.input/directive/mdInputContainer');\n\n      var inputGroupCtrl = ctrls[0];\n      var ngModelCtrl = ctrls[1];\n\n      scope.$watch(scope.isDisabled, function(isDisabled) {\n        element.attr('aria-disabled', !!isDisabled);\n        element.attr('tabindex', !!isDisabled);\n      });\n      element.attr('type', attr.type || element.parent().attr('type') || \"text\");\n\n      // When the input value changes, check if it \"has\" a value, and\n      // set the appropriate class on the input group\n      if (ngModelCtrl) {\n        //Add a $formatter so we don't use up the render function\n        ngModelCtrl.$formatters.push(function(value) {\n          inputGroupCtrl.setHasValue( isNotEmpty(value) );\n          return value;\n        });\n      }\n\n      element\n        .on('input', function() {\n          inputGroupCtrl.setHasValue( isNotEmpty() );\n        })\n        .on('focus', function(e) {\n          // When the input focuses, add the focused class to the group\n          inputGroupCtrl.setFocused(true);\n        })\n        .on('blur', function(e) {\n          // When the input blurs, remove the focused class from the group\n          inputGroupCtrl.setFocused(false);\n          inputGroupCtrl.setHasValue( isNotEmpty() );\n        });\n\n      scope.$on('$destroy', function() {\n        inputGroupCtrl.setFocused(false);\n        inputGroupCtrl.setHasValue(false);\n      });\n\n\n      function isNotEmpty(value) {\n        value = angular.isUndefined(value) ? element.val() : value;\n        return (angular.isDefined(value) && (value!==null) &&\n               (value.toString().trim() !== \"\"));\n      }\n    }\n  };\n}\nmdInputDirective.$inject = [\"$mdUtil\", \"$log\"];\n\n})();\n"]}