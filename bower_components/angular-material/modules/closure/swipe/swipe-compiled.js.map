{"version":3,"sources":["swipe.js"],"names":[],"mappings":";;AAAA;;;;;;AAMA,KAAK,OAAL,CAAa,6BAAb;AACA,KAAK,OAAL,CAAa,iBAAb;AACA;;;;;AAKA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;AAiBA,QAAQ,MAAR,CAAe,2BAAf,EAA4C,CAAC,eAAD,CAA5C,EACK,SADL,CACe,aADf,EAC8B,aAAa,WAAb,CAD9B,EAEK,SAFL,CAEe,cAFf,EAE+B,aAAa,YAAb,CAF/B,EAGK,SAHL,CAGe,WAHf,EAG4B,aAAa,SAAb,CAH5B,EAIK,SAJL,CAIe,aAJf,EAI8B,aAAa,WAAb,CAJ9B;;AAMA,SAAS,YAAT,CAAsB,IAAtB,EAA4B;AACxB,mBAAiB,SAAjB,IAA8B,CAAC,QAAD,CAA9B;AACF,MAAI,gBAAgB,OAAO,IAA3B;AACA,MAAI,YAAY,SAAS,KAAK,WAAL,EAAzB;;AAEA,SAAO,gBAAP;;AAEA;AACA,WAAS,gBAAT,CAA0B,MAA1B,EAAkC;AAC9B,WAAO,EAAE,UAAU,GAAZ,EAAiB,MAAM,QAAvB,EAAP;AACA,aAAS,QAAT,CAAkB,KAAlB,EAAyB,OAAzB,EAAkC,IAAlC,EAAwC;AACtC,UAAI,KAAK,OAAO,KAAK,aAAL,CAAP,CAAT;AACA,cAAQ,EAAR,CAAW,SAAX,EAAsB,UAAS,EAAT,EAAa;AACjC,cAAM,WAAN,CAAkB,YAAW;AAAE,aAAG,KAAH,EAAU,EAAE,QAAQ,EAAV,EAAV;AAA4B,SAA3D;AACD,OAFD;AAGD;AACF;AACJ;;AAID,WAAW,UAAX,CAAsB,KAAtB,GAA8B,QAAQ,MAAR,CAAe,2BAAf,CAA9B","file":"swipe-compiled.js","sourcesContent":["/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v1.1.1-master-f7ecb4f\n */\ngoog.provide('ngmaterial.components.swipe');\ngoog.require('ngmaterial.core');\n/**\n * @ngdoc module\n * @name material.components.swipe\n * @description Swipe module!\n */\n/**\n * @ngdoc directive\n * @module material.components.swipe\n * @name mdSwipeLeft\n *\n * @restrict A\n *\n * @description\n * The md-swipe-left directive allows you to specify custom behavior when an element is swiped\n * left.\n *\n * @usage\n * <hljs lang=\"html\">\n * <div md-swipe-left=\"onSwipeLeft()\">Swipe me left!</div>\n * </hljs>\n */\n/**\n * @ngdoc directive\n * @module material.components.swipe\n * @name mdSwipeRight\n *\n * @restrict A\n *\n * @description\n * The md-swipe-right directive allows you to specify custom behavior when an element is swiped\n * right.\n *\n * @usage\n * <hljs lang=\"html\">\n * <div md-swipe-right=\"onSwipeRight()\">Swipe me right!</div>\n * </hljs>\n */\n/**\n * @ngdoc directive\n * @module material.components.swipe\n * @name mdSwipeUp\n *\n * @restrict A\n *\n * @description\n * The md-swipe-up directive allows you to specify custom behavior when an element is swiped\n * up.\n *\n * @usage\n * <hljs lang=\"html\">\n * <div md-swipe-up=\"onSwipeUp()\">Swipe me up!</div>\n * </hljs>\n */\n/**\n * @ngdoc directive\n * @module material.components.swipe\n * @name mdSwipeDown\n *\n * @restrict A\n *\n * @description\n * The md-swipe-down directive allows you to specify custom behavior when an element is swiped\n * down.\n *\n * @usage\n * <hljs lang=\"html\">\n * <div md-swipe-down=\"onSwipDown()\">Swipe me down!</div>\n * </hljs>\n */\n\nangular.module('material.components.swipe', ['material.core'])\n    .directive('mdSwipeLeft', getDirective('SwipeLeft'))\n    .directive('mdSwipeRight', getDirective('SwipeRight'))\n    .directive('mdSwipeUp', getDirective('SwipeUp'))\n    .directive('mdSwipeDown', getDirective('SwipeDown'));\n\nfunction getDirective(name) {\n    DirectiveFactory['$inject'] = [\"$parse\"];\n  var directiveName = 'md' + name;\n  var eventName = '$md.' + name.toLowerCase();\n\n  return DirectiveFactory;\n\n  /* ngInject */\n  function DirectiveFactory($parse) {\n      return { restrict: 'A', link: postLink };\n      function postLink(scope, element, attr) {\n        var fn = $parse(attr[directiveName]);\n        element.on(eventName, function(ev) {\n          scope.$applyAsync(function() { fn(scope, { $event: ev }); });\n        });\n      }\n    }\n}\n\n\n\nngmaterial.components.swipe = angular.module(\"material.components.swipe\");"]}