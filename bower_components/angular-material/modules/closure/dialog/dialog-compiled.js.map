{"version":3,"sources":["dialog.js"],"names":[],"mappings":";;AAAA;;;;;;AAMA,KAAK,OAAL,CAAa,8BAAb;AACA,KAAK,OAAL,CAAa,gCAAb;AACA,KAAK,OAAL,CAAa,iBAAb;AACA;;;;AAIA,kBAAkB,SAAlB,IAA+B,CAAC,OAAD,EAAU,YAAV,EAAwB,WAAxB,CAA/B;AACA,iBAAiB,SAAjB,IAA8B,CAAC,0BAAD,CAA9B;AACA,QACG,MADH,CACU,4BADV,EACwC,CACpC,eADoC,EAEpC,8BAFoC,CADxC,EAKG,SALH,CAKa,UALb,EAKyB,iBALzB,EAMG,QANH,CAMY,WANZ,EAMyB,gBANzB;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,SAAS,iBAAT,CAA2B,KAA3B,EAAkC,UAAlC,EAA8C,SAA9C,EAAyD;AACvD,SAAO;AACL,cAAU,GADL;AAEL,UAAM,cAAS,KAAT,EAAgB,OAAhB,EAAyB;AAC7B,cAAQ,QAAR,CAAiB,KAAjB,EAD6B,CACA;;AAE7B,iBAAW,OAAX;AACA,YAAM,YAAW;AACf,YAAI,MAAJ;AACA,YAAI,UAAU,QAAQ,CAAR,EAAW,aAAX,CAAyB,mBAAzB,CAAd;;AAEA,YAAI,OAAJ,EAAa;AACX,mBAAS,QAAQ,oBAAR,CAA6B,KAA7B,CAAT;AACA;AACA;AACA,kBAAQ,OAAR,CAAgB,MAAhB,EAAwB,EAAxB,CAA2B,MAA3B,EAAmC,gBAAnC;AACD;;AAED,cAAM,GAAN,CAAU,UAAV,EAAsB,YAAW;AAC/B,oBAAU,OAAV,CAAkB,OAAlB;AACD,SAFD;;AAIA;;;AAGA,iBAAS,gBAAT,GAA4B;AAC1B,kBAAQ,WAAR,CAAoB,qBAApB,EAA2C,QAAQ,YAAR,GAAuB,QAAQ,YAA1E;AACD;AAGF,OAvBD;AAwBD;AA9BI,GAAP;AAgCD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuUA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuEA;;;;;;;;;;;;AAYA;;;;;;;;;;;;AAYA,SAAS,gBAAT,CAA0B,wBAA1B,EAAoD;AAClD;AACA,wBAAsB,SAAtB,IAAmC,CAAC,WAAD,EAAc,aAAd,CAAnC;AACA,uBAAqB,SAArB,IAAkC,CAAC,WAAD,EAAc,SAAd,EAAyB,SAAzB,EAAoC,aAApC,EAAmD,UAAnD,EAA+D,WAA/D,EAA4E,SAA5E,EAAuF,cAAvF,EAAuG,MAAvG,EAA+G,WAA/G,EAA4H,YAA5H,EAA0I,cAA1I,EAA0J,gBAA1J,CAAlC;AACA,MAAI,YAAJ,EAAkB,eAAlB;;AAEA,SAAO,yBAAyB,WAAzB,EACJ,WADI,CACQ;AACX,aAAS,CAAC,qBAAD,EAAwB,aAAxB,EAAuC,qBAAvC,EAA8D,eAA9D,EACL,aADK,EACU,SADV,EACqB,UADrB,EACiC,QADjC,EAC2C,YAD3C,EACyD,UADzD,CADE;AAGX,aAAS;AAHE,GADR,EAMJ,SANI,CAMM,OANN,EAMe;AAClB,aAAS,CAAC,OAAD,EAAU,aAAV,EAAyB,aAAzB,EAAwC,SAAxC,EAAmD,WAAnD,EAAgE,IAAhE,EAAsE,OAAtE,EACL,KADK,CADS;AAGlB,aAAS;AAHS,GANf,EAWJ,SAXI,CAWM,SAXN,EAWiB;AACpB,aAAS,CAAC,OAAD,EAAU,aAAV,EAAyB,aAAzB,EAAwC,SAAxC,EAAmD,WAAnD,EAAgE,IAAhE,EAAsE,QAAtE,EACL,OADK,EACI,KADJ,CADW;AAGpB,aAAS;AAHW,GAXjB,EAgBJ,SAhBI,CAgBM,QAhBN,EAgBgB;AACnB,aAAS,CAAC,OAAD,EAAU,aAAV,EAAyB,aAAzB,EAAwC,cAAxC,EAAwD,SAAxD,EAAmE,aAAnE,EAAkF,WAAlF,EACL,IADK,EACC,QADD,EACW,OADX,EACoB,KADpB,CADU;AAGnB,aAAS;AAHU,GAhBhB,CAAP;;AAsBA;AACA,WAAS,qBAAT,CAA+B,SAA/B,EAA0C,WAA1C,EAAuD;AACrD,WAAO;AACL,gBAAU,CACR,4HADQ,EAER,+EAFQ,EAGR,kDAHQ,EAIR,yEAJQ,EAKR,sDALQ,EAMR,0EANQ,EAOR,yCAPQ,EAQR,YARQ,EASR,6GATQ,EAUR,8FACA,sDAXQ,EAYR,2BAZQ,EAaR,wBAbQ,EAcR,uBAdQ,EAeR,uFACA,+EAhBQ,EAiBR,2BAjBQ,EAkBR,kBAlBQ,EAmBR,uHAnBQ,EAoBR,uBApBQ,EAqBR,kBArBQ,EAsBR,wBAtBQ,EAuBR,cAvBQ,EAwBR,IAxBQ,CAwBH,EAxBG,EAwBC,OAxBD,CAwBS,QAxBT,EAwBmB,EAxBnB,CADL;AA0BL,kBAAY,SAAS,YAAT,GAAwB;AAClC,YAAI,WAAW,KAAK,KAAL,IAAc,QAA7B;;AAEA,YAAI,YAAY,KAAK,YAArB,EAAmC;AACjC,eAAK,MAAL,GAAc,KAAK,YAAnB;AACD;;AAED,aAAK,IAAL,GAAY,YAAW;AACrB,oBAAU,IAAV,CAAe,WAAW,KAAK,MAAhB,GAAyB,IAAxC;AACD,SAFD;AAGA,aAAK,KAAL,GAAa,YAAW;AACtB,oBAAU,MAAV;AACD,SAFD;AAGA,aAAK,QAAL,GAAgB,UAAS,MAAT,EAAiB;AAC/B,cAAI,OAAO,OAAP,KAAmB,YAAY,QAAZ,CAAqB,KAA5C,EAAmD;AACjD,sBAAU,IAAV,CAAe,KAAK,MAApB;AACD;AACF,SAJD;AAKD,OA5CI;AA6CL,oBAAc,QA7CT;AA8CL,wBAAkB;AA9Cb,KAAP;AAgDD;;AAED;AACA,WAAS,oBAAT,CAA8B,SAA9B,EAAyC,OAAzC,EAAkD,OAAlD,EAA2D,WAA3D,EAAwE,QAAxE,EAAkF,SAAlF,EAA6F,OAA7F,EAAsG,YAAtG,EAC8B,IAD9B,EACoC,SADpC,EAC+C,UAD/C,EAC2D,YAD3D,EACyE,cADzE,EACyF;;AAEvF,WAAO;AACL,mBAAa,IADR;AAEL,oBAAc,IAFT;AAGL,mBAAa,aAHR;AAIL,cAAQ,MAJH;AAKL,iBAAW,UALN;AAML,gBAAU,QANL;AAOL,2BAAqB,KAPhB;AAQL,qBAAe,IARV;AASL,mBAAa,IATR;AAUL,eAAS,IAVJ;AAWL,gBAAU,IAXL;AAYL,mBAAa,IAZR;AAaL,2BAAqB,IAbhB;AAcL,gBAAU,IAdL;AAeL,kBAAY,KAfP;AAgBL,yBAAmB,2BAAS,QAAT,EAAmB,OAAnB,EAA4B;AAC7C;AACA;AACA;AACA;AACA,YAAI,cAAc,aAAa,WAAb,EAAlB;AACA,YAAI,YAAY,aAAa,SAAb,EAAhB;AACA,YAAI,QAAQ,eAAe,QAAQ,UAAR,GAAqB,EAArB,GAA0B,IAAzC,IAAiD,OAAjD,GAA2D,SAAvE;AACA,eAAO,8DAA8D,KAA9D,GAAsE,IAAtE,GAA6E,kBAAkB,QAAlB,CAA7E,GAA2G,QAAlH;;AAEA;;;AAGA,iBAAS,iBAAT,CAA2B,QAA3B,EAAqC;AACnC,cAAI,QAAQ,QAAR,IAAoB,CAAC,iBAAiB,IAAjB,CAAsB,QAAtB,CAAzB,EAA0D;AACxD,mBAAO,iBAAiB,YAAY,EAA7B,IAAmC,cAA1C;AACD,WAFD,MAEO;AACL,mBAAO,YAAY,EAAnB;AACD;AACF;AACF;AApCI,KAAP;;AAuCA,aAAS,aAAT,CAAuB,OAAvB,EAAgC;AAC9B;AACA;AACA;AACA,cAAQ,YAAR,GAAuB,WAAW,YAAX,EAAvB;;AAEA,oBAAc,OAAd;AACD;;AAED,aAAS,UAAT,CAAoB,KAApB,EAA2B,OAA3B,EAAoC,OAApC,EAA6C,UAA7C,EAAyD;;AAEvD,UAAI,UAAJ,EAAgB;AACd,YAAI,gBAAgB,WAAW,WAAX,IAA0B,QAAQ,WAAlC,IAAiD,EAArE;AACA,YAAI,gBAAgB,WAAW,WAAX,IAA0B,QAAQ,WAAlC,IAChB,WAAW,OADK,IACM,QAAQ,OADd,IACyB,EAD7C;;AAGA,YAAI,iBAAiB,CAAC,UAAU,GAAV,CAAc,WAAd,CAAtB,EAAkD;AAChD,gBAAM,MAAM,mEAAN,CAAN;AACD;;AAED,YAAI,iBAAiB,aAArB,EAAoC;AAClC,gBAAM,MAAM,4DAAN,CAAN;AACD;;AAED;AACA,mBAAW,aAAX,GAA2B,aAA3B;AACA,mBAAW,aAAX,GAA2B,aAA3B;AACD;AACF;;AAED;AACA,aAAS,MAAT,CAAgB,KAAhB,EAAuB,OAAvB,EAAgC,OAAhC,EAAyC,UAAzC,EAAqD;AACnD,cAAQ,OAAR,CAAgB,UAAU,CAAV,EAAa,IAA7B,EAAmC,QAAnC,CAA4C,sBAA5C;;AAEA,UAAI,gBAAgB,QAAQ,IAAR,CAAa,WAAb,CAApB;;AAEA;AACA;AACA,UAAI,cAAc,QAAd,CAAuB,UAAvB,CAAJ,EAAwC;AACtC,YAAI,UAAU,oFAAd;AACA,aAAK,IAAL,CAAW,OAAX,EAAoB,QAAQ,CAAR,CAApB;AACD;;AAED,qCAA+B,OAA/B;AACA,oBAAc,aAAd,EAA6B,OAA7B;AACA,mBAAa,KAAb,EAAoB,OAApB,EAA6B,OAA7B;AACA,wBAAkB,OAAlB,EAA2B,OAA3B;;AAEA,aAAO,YAAY,OAAZ,EAAqB,OAArB,EACJ,IADI,CACC,YAAW;AACf,yBAAiB,OAAjB,EAA0B,OAA1B;AACA;AACD,OAJI,CAAP;;AAMA;;;;AAIA,eAAS,WAAT,GAAuB;AACrB,YAAI,QAAQ,WAAZ,EAAyB;AACvB,cAAI,SAAS,QAAQ,eAAR,CAAwB,OAAxB,KAAoC,iBAApC,IAAyD,aAAtE;AACA,iBAAO,KAAP;AACD;;AAED;;;;;;AAMA,iBAAS,eAAT,GAA2B;AACzB,iBAAO,QAAQ,CAAR,EAAW,aAAX,CAAyB,oDAAzB,CAAP;AACD;AACF;AACF;;AAED;;;AAGA,aAAS,QAAT,CAAkB,KAAlB,EAAyB,OAAzB,EAAkC,OAAlC,EAA2C;AACzC,cAAQ,mBAAR;AACA,cAAQ,kBAAR;AACA,cAAQ,YAAR,CAAqB,QAAQ,QAA7B;;AAEA;AACA,UAAI,gBAAgB,aAAa,UAAjC,EAA6C;AAC3C,qBAAa,UAAb,CAAwB,WAAxB,CAAoC,YAApC;AACD;;AAED,UAAI,mBAAmB,gBAAgB,UAAvC,EAAmD;AACjD,wBAAgB,UAAhB,CAA2B,WAA3B,CAAuC,eAAvC;AACD;;AAED;AACA;AACA,aAAO,CAAC,CAAC,QAAQ,QAAV,GAAqB,gBAArB,GAAwC,iBAAiB,IAAjB,CAAuB,cAAvB,CAA/C;;AAEA;;;;AAIA,eAAS,cAAT,GAA0B;AACxB,eAAO,aAAa,OAAb,EAAsB,OAAtB,CAAP;AACD;;AAED;;;AAGA,eAAS,cAAT,GAA0B;AACxB,gBAAQ,OAAR,CAAgB,UAAU,CAAV,EAAa,IAA7B,EAAmC,WAAnC,CAA+C,sBAA/C;;AAEA;AACA,YAAI,QAAQ,cAAZ,EAA4B;AAC1B,kBAAQ,uBAAR;AACD;;AAED;AACA,gBAAQ,cAAR;;AAEA;AACA,YAAI,CAAC,QAAQ,QAAT,IAAqB,QAAQ,iBAAR,KAA8B,UAAvD,EAAmE;AACjE,kBAAQ,MAAR,CAAe,KAAf;AACD;AACF;AACF;;AAED,aAAS,aAAT,CAAuB,OAAvB,EAAgC;AAC9B;AACA;AACA,UAAI,QAAJ;AACA,UAAI,QAAQ,WAAR,IAAuB,QAAQ,WAAR,CAAoB,MAA/C,EAAuD;AACrD,mBAAW,QAAQ,OAAR,CAAgB,QAAQ,WAAR,CAAoB,MAApC,CAAX;AACD;;AAED,UAAI,YAAY,YAAY,SAAS,UAAT,CAAoB,SAApB,CAA5B;;AAEA,UAAI,CAAC,SAAL,EAAgB;AACd;AACD;;AAED,cAAQ,UAAR,GAAqB,UAAU,YAA/B;;AAEA,UAAI,QAAQ,QAAQ,KAAR,IAAiB,UAAU,QAAvC;;AAEA,UAAI,KAAJ,EAAW;AACT,gBAAQ,KAAR,CAAc,KAAd,GAAsB,KAAtB;AACD;;AAED,UAAI,UAAU,UAAU,eAAV,CAA0B,UAAU,QAAV,EAAoB;AAC1D,gBAAQ,KAAR,CAAc,KAAd,GAAsB,QAAtB;;AAEA,YAAI,CAAC,QAAQ,UAAb,EAAyB;AACvB;AACD;AACF,OANa,CAAd;AAOD;;AAED;;;;;AAKA,aAAS,8BAAT,CAAwC,OAAxC,EAAiD;AAC3C,cAAQ,MAAR,GAAiB,QAAQ,MAAR,CAAe;AAC9B,iBAAS,IADqB;AAE9B,gBAAQ,IAFsB;AAG9B,eAAO,QAAQ;AAHe,OAAf,EAId,QAAQ,MAAR,IAAkB,EAJJ,CAAjB;;AAMA,cAAQ,MAAR,GAAmB,cAAc,QAAQ,MAAtB,EAA8B,YAA9B,CAAnB;AACA,cAAQ,OAAR,GAAmB,sBAAsB,cAAc,QAAQ,OAAtB,CAAtB,CAAnB;AACA,cAAQ,QAAR,GAAmB,sBAAsB,cAAc,QAAQ,QAAtB,CAAtB,CAAnB;;AAEA,UAAK,QAAQ,WAAb,EAA2B;AACzB,gBAAQ,MAAR,GAAiB,sBAAsB,QAAQ,WAAR,CAAoB,MAA1C,EAAkD,QAAQ,MAA1D,CAAjB;AACA,gBAAQ,iBAAR,GAA4B,eAAe,sBAAf,EAA5B;AACD;;AAGD;;;;AAIA,eAAS,qBAAT,CAAgC,OAAhC,EAAyC,IAAzC,EAA+C;AAC7C,YAAI,SAAS,QAAQ,OAAR,CAAiB,WAAW,EAA5B,CAAb;AACA,YAAI,UAAU,OAAO,MAArB,EAA6B;AAC3B;AACA;AACA;AACA;AACA;AACA,cAAI,SAAS,EAAC,KAAI,CAAL,EAAO,MAAK,CAAZ,EAAc,QAAO,CAArB,EAAuB,OAAM,CAA7B,EAAb;AACA,cAAI,QAAQ,QAAQ,UAAR,CAAmB,OAAO,CAAP,EAAU,qBAA7B,CAAZ;;AAEA,iBAAO,QAAQ,MAAR,CAAe,QAAQ,EAAvB,EAA2B;AAC9B,qBAAU,QAAQ,MAAR,GAAiB,SADG;AAE9B,oBAAU,QAAQ,OAAO,CAAP,EAAU,qBAAV,EAAR,GAA4C,QAAQ,MAAR,CAAe,EAAf,EAAmB,MAAnB,EAA2B,OAAO,CAAP,CAA3B,CAFxB;AAG9B,mBAAU,QAAQ,IAAR,CAAa,MAAb,EAAqB,OAAO,KAA5B;AAHoB,WAA3B,CAAP;AAKD;AACF;;AAED;;;;AAIA,eAAS,aAAT,CAAuB,OAAvB,EAAgC,cAAhC,EAAgD;AAC9C,YAAI,QAAQ,QAAR,CAAiB,OAAjB,CAAJ,EAA+B;AAC7B,oBAAU,UAAU,CAAV,EAAa,aAAb,CAA2B,OAA3B,CAAV;AACD;;AAED;AACA,eAAO,QAAQ,OAAR,CAAgB,WAAW,cAA3B,CAAP;AACD;AAEF;;AAEL;;;AAGA,aAAS,iBAAT,CAA2B,OAA3B,EAAoC,OAApC,EAA6C;AAC3C,UAAI,SAAS,QAAQ,OAAR,CAAgB,OAAhB,CAAb;AACA,UAAI,iBAAiB,QAAQ,QAAR,CAAiB,YAAW;AAC/C,yCAAiC,OAAjC,EAA0C,OAA1C;AACD,OAFoB,EAElB,EAFkB,CAArB;;AAIA,UAAI,kBAAkB,EAAtB;AACA,UAAI,aAAa,SAAb,UAAa,GAAW;AAC1B;AACA;AACA,YAAI,UAAY,QAAQ,KAAR,IAAiB,OAAnB,GAA+B,UAAU,IAAzC,GAAgD,UAAU,MAAxE;AACA,gBAAQ,QAAR,CAAiB,OAAjB,EAA0B,IAA1B;AACD,OALD;;AAOA,UAAI,QAAQ,aAAZ,EAA2B;AACzB,YAAI,eAAe,QAAQ,MAA3B;AACA,YAAI,eAAe,SAAf,YAAe,CAAS,EAAT,EAAa;AAC9B,cAAI,GAAG,OAAH,KAAe,YAAY,QAAZ,CAAqB,MAAxC,EAAgD;AAC9C,eAAG,eAAH;AACA,eAAG,cAAH;;AAEA;AACD;AACF,SAPD;;AASA;AACA,gBAAQ,EAAR,CAAW,SAAX,EAAsB,YAAtB;AACA,qBAAa,EAAb,CAAgB,SAAhB,EAA2B,YAA3B;;AAEA;AACA,wBAAgB,IAAhB,CAAqB,YAAW;;AAE9B,kBAAQ,GAAR,CAAY,SAAZ,EAAuB,YAAvB;AACA,uBAAa,GAAb,CAAiB,SAAjB,EAA4B,YAA5B;AAED,SALD;AAMD;;AAED;AACA,aAAO,EAAP,CAAU,QAAV,EAAoB,cAApB;;AAEA,sBAAgB,IAAhB,CAAqB,YAAW;AAC9B,eAAO,GAAP,CAAW,QAAX,EAAqB,cAArB;AACD,OAFD;;AAIA,UAAI,QAAQ,mBAAZ,EAAiC;AAC/B,YAAI,SAAS,OAAb;AACA,YAAI,UAAJ;;AAEA;AACA;AACA;AACA;AACA,YAAI,mBAAmB,SAAnB,gBAAmB,CAAS,EAAT,EAAa;AAClC,uBAAa,GAAG,MAAhB;AACD,SAFD;;AAIA;AACA;AACA;AACA,YAAI,iBAAiB,SAAjB,cAAiB,CAAS,EAAT,EAAa;AAChC,cAAI,eAAe,OAAO,CAAP,CAAf,IAA4B,GAAG,MAAH,KAAc,OAAO,CAAP,CAA9C,EAAyD;AACvD,eAAG,eAAH;AACA,eAAG,cAAH;;AAEA;AACD;AACF,SAPD;;AASA;AACA,eAAO,EAAP,CAAU,WAAV,EAAuB,gBAAvB;AACA,eAAO,EAAP,CAAU,SAAV,EAAqB,cAArB;;AAEA;AACA,wBAAgB,IAAhB,CAAqB,YAAW;AAC9B,iBAAO,GAAP,CAAW,WAAX,EAAwB,gBAAxB;AACA,iBAAO,GAAP,CAAW,SAAX,EAAsB,cAAtB;AACD,SAHD;AAID;;AAED;AACA,cAAQ,mBAAR,GAA8B,YAAW;AACvC,wBAAgB,OAAhB,CAAwB,UAAS,QAAT,EAAmB;AACzC;AACD,SAFD;AAGA,gBAAQ,mBAAR,GAA8B,IAA9B;AACD,OALD;AAMD;;AAED;;;AAGA,aAAS,YAAT,CAAsB,KAAtB,EAA6B,OAA7B,EAAsC,OAAtC,EAA+C;;AAE7C,UAAI,QAAQ,mBAAZ,EAAiC;AAC/B;AACA;AACA,gBAAQ,aAAR,GAAwB,QAAQ,mBAAR,CAA4B,OAA5B,EAAqC,QAAQ,MAA7C,CAAxB;AACD;;AAED,UAAI,QAAQ,WAAZ,EAAyB;AACvB,gBAAQ,QAAR,GAAmB,QAAQ,cAAR,CAAuB,KAAvB,EAA8B,8BAA9B,CAAnB;AACA,iBAAS,KAAT,CAAe,QAAQ,QAAvB,EAAiC,QAAQ,MAAzC;AACD;;AAED;;;AAGA,cAAQ,YAAR,GAAuB,SAAS,YAAT,CAAsB,QAAtB,EAAgC;AACrD,YAAI,QAAQ,QAAZ,EAAsB;AACpB,cAAK,CAAC,CAAC,QAAP,EAAkB,QAAQ,QAAR,CAAiB,MAAjB,GAAlB,KACkB,SAAS,KAAT,CAAe,QAAQ,QAAvB;AACnB;;AAGD,YAAI,QAAQ,mBAAZ,EAAiC;AAC/B,kBAAQ,aAAR,IAAyB,QAAQ,aAAR,EAAzB;AACA,iBAAO,QAAQ,aAAf;AACD;;AAED,gBAAQ,YAAR,GAAuB,IAAvB;AACD,OAbD;AAcD;;AAED;;;AAGA,aAAS,aAAT,CAAuB,OAAvB,EAAgC,OAAhC,EAAyC;;AAEvC,UAAI,OAAQ,QAAQ,KAAR,KAAkB,OAAnB,GAA8B,aAA9B,GAA8C,QAAzD;AACA,UAAI,gBAAgB,QAAQ,IAAR,CAAa,mBAAb,CAApB;AACA,UAAI,mBAAmB,QAAQ,IAAR,CAAa,IAAb,CAAvB;AACA,UAAI,kBAAkB,oBAAoB,oBAAoB,QAAQ,OAAR,EAAxC,CAAtB;;AAEA,cAAQ,IAAR,CAAa;AACX,gBAAQ,IADG;AAEX,oBAAY;AAFD,OAAb;;AAKA,UAAI,cAAc,MAAd,KAAyB,CAA7B,EAAgC;AAC9B,wBAAgB,OAAhB;AACA;AACA,YAAI,gBAAJ,EAAsB;AACpB,4BAAkB,gBAAlB;AACD;AACF;;AAED,oBAAc,IAAd,CAAmB,IAAnB,EAAyB,eAAzB;AACA,cAAQ,IAAR,CAAa,kBAAb,EAAiC,eAAjC;;AAEA,UAAI,QAAQ,SAAZ,EAAuB;AACrB,gBAAQ,MAAR,CAAe,OAAf,EAAwB,YAAxB,EAAsC,QAAQ,SAA9C;AACD,OAFD,MAGK;AACH,gBAAQ,WAAR,CAAoB,OAApB,EAA6B,YAA7B,EAA2C,YAAW;AACpD,cAAI,QAAQ,cAAc,IAAd,GAAqB,KAArB,CAA2B,KAA3B,CAAZ;AACA,cAAI,MAAM,MAAN,GAAe,CAAnB,EAAsB,QAAQ,MAAM,KAAN,CAAY,CAAZ,EAAe,CAAf,EAAkB,MAAlB,CAAyB,KAAzB,CAAR;AACtB,iBAAO,MAAM,IAAN,CAAW,GAAX,CAAP;AACD,SAJD;AAKD;;AAED;AACA;AACA,qBAAe,SAAS,aAAT,CAAuB,KAAvB,CAAf;AACA,mBAAa,SAAb,CAAuB,GAAvB,CAA2B,sBAA3B;AACA,mBAAa,QAAb,GAAwB,CAAxB;;AAEA,wBAAkB,aAAa,SAAb,CAAuB,KAAvB,CAAlB;;AAEA;AACA;AACA,UAAI,eAAe,SAAf,YAAe,GAAW;AAC5B,gBAAQ,KAAR;AACD,OAFD;AAGA,mBAAa,gBAAb,CAA8B,OAA9B,EAAuC,YAAvC;AACA,sBAAgB,gBAAhB,CAAiC,OAAjC,EAA0C,YAA1C;;AAEA;AACA;AACA,cAAQ,CAAR,EAAW,UAAX,CAAsB,YAAtB,CAAmC,YAAnC,EAAiD,QAAQ,CAAR,CAAjD;AACA,cAAQ,KAAR,CAAc,eAAd;AACD;;AAED;;;;AAIA,aAAS,gBAAT,CAA0B,OAA1B,EAAmC,OAAnC,EAA4C;AAC1C,UAAI,WAAW,IAAf;;AAEA;AACA,cAAQ,QAAQ,CAAR,CAAR;;AAEA,cAAQ,kBAAR,GAA6B,YAAW;AACtC,mBAAW,KAAX;AACA,gBAAQ,QAAQ,CAAR,CAAR;;AAEA,gBAAQ,kBAAR,GAA6B,IAA7B;AACD,OALD;;AAOA;;;;;AAKA,eAAS,OAAT,CAAiB,OAAjB,EAA0B;AACxB,eAAO,QAAQ,UAAf,EAA2B;AACzB,cAAI,YAAY,SAAS,IAAzB,EAA+B;AAC7B;AACD;AACD,cAAI,WAAW,QAAQ,UAAR,CAAmB,QAAlC;AACA,eAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAAS,MAA7B,EAAqC,GAArC,EAA0C;AACxC;AACA;AACA,gBAAI,YAAY,SAAS,CAAT,CAAZ,IAA2B,CAAC,YAAY,SAAS,CAAT,CAAZ,EAAyB,CAAC,QAAD,EAAW,OAAX,CAAzB,CAAhC,EAA+E;AAC7E,uBAAS,CAAT,EAAY,YAAZ,CAAyB,aAAzB,EAAwC,QAAxC;AACD;AACF;;AAED,kBAAQ,UAAU,QAAQ,UAA1B;AACD;AACF;AACF;;AAED;;;AAGA,aAAS,gCAAT,CAA0C,SAA1C,EAAqD,OAArD,EAA8D;AAC5D,UAAI,UAAU,QAAQ,gBAAR,CAAyB,UAAU,CAAV,EAAa,IAAtC,EAA4C,QAA5C,IAAwD,OAAtE;AACA,UAAI,WAAW,QAAQ,QAAR,GAAmB,QAAQ,gBAAR,CAAyB,QAAQ,QAAR,CAAiB,CAAjB,CAAzB,CAAnB,GAAmE,IAAlF;AACA,UAAI,SAAS,WAAW,KAAK,GAAL,CAAS,UAAU,CAAV,EAAa,IAAb,CAAkB,YAA3B,EAAyC,KAAK,IAAL,CAAU,KAAK,GAAL,CAAS,SAAS,SAAS,MAAlB,EAA0B,EAA1B,CAAT,CAAV,CAAzC,CAAX,GAA0G,CAAvH;;AAEA,UAAI,iBAAiB;AACnB,aAAK,UAAU,GAAV,CAAc,KAAd,CADc;AAEnB,gBAAQ,UAAU,GAAV,CAAc,QAAd;AAFW,OAArB;;AAKA;AACA,UAAI,YAAY,KAAK,GAAL,CAAS,QAAQ,MAAR,CAAe,CAAf,EAAkB,qBAAlB,GAA0C,GAAnD,CAAhB;;AAEA,gBAAU,GAAV,CAAc;AACZ,aAAK,CAAC,UAAU,SAAV,GAAsB,CAAvB,IAA4B,IADrB;AAEZ,gBAAQ,SAAS,SAAS,IAAlB,GAAyB;AAFrB,OAAd;;AAKA,aAAO,YAAW;AAChB;AACA;AACA;AACA,kBAAU,GAAV,CAAc,cAAd;AACD,OALD;AAMD;;AAED;;;AAGA,aAAS,WAAT,CAAqB,SAArB,EAAgC,OAAhC,EAAyC;AACvC;AACA,cAAQ,MAAR,CAAe,MAAf,CAAsB,SAAtB;AACA,cAAQ,uBAAR,GAAkC,iCAAiC,SAAjC,EAA4C,OAA5C,CAAlC;;AAEA,UAAI,WAAW,UAAU,IAAV,CAAe,WAAf,CAAf;AACA,UAAI,WAAW,QAAQ,GAAR,CAAY,QAA3B;AACA,UAAI,yBAAyB,SAAS,qBAAtC;AACA,UAAI,mBAAmB,EAAC,mBAAmB,kBAApB,EAAwC,oBAAoB,mBAA5D,EAAvB;AACA,UAAI,OAAO,SAAS,cAAT,CAAwB,uBAAuB,QAAvB,EAAiC,QAAQ,QAAR,IAAoB,QAAQ,MAA7D,CAAxB,CAAX;AACA,UAAI,KAAK,SAAS,cAAT,CAAwB,EAAxB,CAAT,CAVuC,CAUA;;AAEvC,eAAS,WAAT,CAAqB,sBAArB,EAA6C,CAAC,CAAC,QAAQ,UAAvD;;AAEA,aAAO,SACJ,WADI,CACQ,QADR,EACkB,IADlB,EACwB,EADxB,EAC4B,gBAD5B,EAEJ,IAFI,CAEC,UAAS,eAAT,EAA0B;;AAE9B;AACA,gBAAQ,cAAR,GAAyB,YAAW;AAClC,iBAAO,QAAQ,cAAf;;AAEA,cAAI,QAAQ,OAAZ,EAAqB;AACnB;AACA,+BAAmB,EAAC,mBAAmB,mBAApB,EAAyC,oBAAoB,kBAA7D,EAAnB;AACA,mBAAO,EAAP;AACA,iBAAK,SAAS,cAAT,CAAwB,uBAAuB,QAAvB,EAAiC,QAAQ,OAAzC,CAAxB,CAAL;;AAEA,mBAAO,SACJ,WADI,CACQ,QADR,EACkB,IADlB,EACwB,EADxB,EAC2B,gBAD3B,CAAP;AAED;;AAED,iBAAO,gBACL,KAAK,SAAS,cAAT;AACH;AACA;AACA,iCAAuB,QAAvB,EAAiC,QAAQ,MAAzC,CAHG,CADA,CAAP;AAQD,SArBD;;AAuBA;AACA;AACA,gBAAQ,YAAR,GAAuB,YAAW;AAChC,iBAAO,QAAQ,YAAf;;AAEA;AACA;AACA,mBAAS,WAAT,CAAqB,CACnB,iBAAiB,kBADE,EAEnB,iBAAiB,iBAFE,EAGnB,IAHmB,CAGd,GAHc,CAArB;;AAKA;AACA,iBAAO,SAAS,WAAT,CAAqB,QAArB,EAA+B,EAA/B,EAAmC,SAAS,cAAT,CAAwB,EAAxB,CAAnC,EAAgE,EAAhE,CAAP;AACD,SAZD;;AAcA,eAAO,IAAP;AACD,OA7CI,CAAP;AA8CD;;AAED;;;AAGA,aAAS,YAAT,CAAsB,SAAtB,EAAiC,OAAjC,EAA0C;AACxC,aAAO,QAAQ,cAAR,GAAyB,IAAzB,CAA8B,YAAW;AAC9C,YAAI,QAAQ,cAAZ,EAA4B;AAC1B;AACA;AACA,kBAAQ,YAAR;AACD;AACF,OANM,CAAP;AAOD;;AAED;;;AAGA,aAAS,WAAT,CAAqB,IAArB,EAA2B,aAA3B,EAA0C;AACxC,UAAI,cAAc,OAAd,CAAsB,KAAK,QAA3B,MAAyC,CAAC,CAA9C,EAAiD;AAC/C,eAAO,IAAP;AACD;AACF;AAEF;AACF;;AAED,WAAW,UAAX,CAAsB,MAAtB,GAA+B,QAAQ,MAAR,CAAe,4BAAf,CAA/B","file":"dialog-compiled.js","sourcesContent":["/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v1.1.1-master-f7ecb4f\n */\ngoog.provide('ngmaterial.components.dialog');\ngoog.require('ngmaterial.components.backdrop');\ngoog.require('ngmaterial.core');\n/**\n * @ngdoc module\n * @name material.components.dialog\n */\nMdDialogDirective['$inject'] = [\"$$rAF\", \"$mdTheming\", \"$mdDialog\"];\nMdDialogProvider['$inject'] = [\"$$interimElementProvider\"];\nangular\n  .module('material.components.dialog', [\n    'material.core',\n    'material.components.backdrop'\n  ])\n  .directive('mdDialog', MdDialogDirective)\n  .provider('$mdDialog', MdDialogProvider);\n\n/**\n * @ngdoc directive\n * @name mdDialog\n * @module material.components.dialog\n *\n * @restrict E\n *\n * @description\n * `<md-dialog>` - The dialog's template must be inside this element.\n *\n * Inside, use an `<md-dialog-content>` element for the dialog's content, and use\n * an `<md-dialog-actions>` element for the dialog's actions.\n *\n * ## CSS\n * - `.md-dialog-content` - class that sets the padding on the content as the spec file\n *\n * ## Notes\n * - If you specify an `id` for the `<md-dialog>`, the `<md-dialog-content>` will have the same `id`\n * prefixed with `dialogContent_`.\n *\n * @usage\n * ### Dialog template\n * <hljs lang=\"html\">\n * <md-dialog aria-label=\"List dialog\">\n *   <md-dialog-content>\n *     <md-list>\n *       <md-list-item ng-repeat=\"item in items\">\n *         <p>Number {{item}}</p>\n *       </md-list-item>\n *     </md-list>\n *   </md-dialog-content>\n *   <md-dialog-actions>\n *     <md-button ng-click=\"closeDialog()\" class=\"md-primary\">Close Dialog</md-button>\n *   </md-dialog-actions>\n * </md-dialog>\n * </hljs>\n */\nfunction MdDialogDirective($$rAF, $mdTheming, $mdDialog) {\n  return {\n    restrict: 'E',\n    link: function(scope, element) {\n      element.addClass('_md');     // private md component indicator for styling\n\n      $mdTheming(element);\n      $$rAF(function() {\n        var images;\n        var content = element[0].querySelector('md-dialog-content');\n\n        if (content) {\n          images = content.getElementsByTagName('img');\n          addOverflowClass();\n          //-- delayed image loading may impact scroll height, check after images are loaded\n          angular.element(images).on('load', addOverflowClass);\n        }\n\n        scope.$on('$destroy', function() {\n          $mdDialog.destroy(element);\n        });\n\n        /**\n         *\n         */\n        function addOverflowClass() {\n          element.toggleClass('md-content-overflow', content.scrollHeight > content.clientHeight);\n        }\n\n\n      });\n    }\n  };\n}\n\n/**\n * @ngdoc service\n * @name $mdDialog\n * @module material.components.dialog\n *\n * @description\n * `$mdDialog` opens a dialog over the app to inform users about critical information or require\n *  them to make decisions. There are two approaches for setup: a simple promise API\n *  and regular object syntax.\n *\n * ## Restrictions\n *\n * - The dialog is always given an isolate scope.\n * - The dialog's template must have an outer `<md-dialog>` element.\n *   Inside, use an `<md-dialog-content>` element for the dialog's content, and use\n *   an `<md-dialog-actions>` element for the dialog's actions.\n * - Dialogs must cover the entire application to keep interactions inside of them.\n * Use the `parent` option to change where dialogs are appended.\n *\n * ## Sizing\n * - Complex dialogs can be sized with `flex=\"percentage\"`, i.e. `flex=\"66\"`.\n * - Default max-width is 80% of the `rootElement` or `parent`.\n *\n * ## CSS\n * - `.md-dialog-content` - class that sets the padding on the content as the spec file\n *\n * @usage\n * <hljs lang=\"html\">\n * <div  ng-app=\"demoApp\" ng-controller=\"EmployeeController\">\n *   <div>\n *     <md-button ng-click=\"showAlert()\" class=\"md-raised md-warn\">\n *       Employee Alert!\n *       </md-button>\n *   </div>\n *   <div>\n *     <md-button ng-click=\"showDialog($event)\" class=\"md-raised\">\n *       Custom Dialog\n *       </md-button>\n *   </div>\n *   <div>\n *     <md-button ng-click=\"closeAlert()\" ng-disabled=\"!hasAlert()\" class=\"md-raised\">\n *       Close Alert\n *     </md-button>\n *   </div>\n *   <div>\n *     <md-button ng-click=\"showGreeting($event)\" class=\"md-raised md-primary\" >\n *       Greet Employee\n *       </md-button>\n *   </div>\n * </div>\n * </hljs>\n *\n * ### JavaScript: object syntax\n * <hljs lang=\"js\">\n * (function(angular, undefined){\n *   \"use strict\";\n *\n *   angular\n *    .module('demoApp', ['ngMaterial'])\n *    .controller('AppCtrl', AppController);\n *\n *   function AppController($scope, $mdDialog) {\n *     var alert;\n *     $scope.showAlert = showAlert;\n *     $scope.showDialog = showDialog;\n *     $scope.items = [1, 2, 3];\n *\n *     // Internal method\n *     function showAlert() {\n *       alert = $mdDialog.alert({\n *         title: 'Attention',\n *         textContent: 'This is an example of how easy dialogs can be!',\n *         ok: 'Close'\n *       });\n *\n *       $mdDialog\n *         .show( alert )\n *         .finally(function() {\n *           alert = undefined;\n *         });\n *     }\n *\n *     function showDialog($event) {\n *        var parentEl = angular.element(document.body);\n *        $mdDialog.show({\n *          parent: parentEl,\n *          targetEvent: $event,\n *          template:\n *            '<md-dialog aria-label=\"List dialog\">' +\n *            '  <md-dialog-content>'+\n *            '    <md-list>'+\n *            '      <md-list-item ng-repeat=\"item in items\">'+\n *            '       <p>Number {{item}}</p>' +\n *            '      </md-item>'+\n *            '    </md-list>'+\n *            '  </md-dialog-content>' +\n *            '  <md-dialog-actions>' +\n *            '    <md-button ng-click=\"closeDialog()\" class=\"md-primary\">' +\n *            '      Close Dialog' +\n *            '    </md-button>' +\n *            '  </md-dialog-actions>' +\n *            '</md-dialog>',\n *          locals: {\n *            items: $scope.items\n *          },\n *          controller: DialogController\n *       });\n *       function DialogController($scope, $mdDialog, items) {\n *         $scope.items = items;\n *         $scope.closeDialog = function() {\n *           $mdDialog.hide();\n *         }\n *       }\n *     }\n *   }\n * })(angular);\n * </hljs>\n *\n * ### Multiple Dialogs\n * Using the `multiple` option for the `$mdDialog` service allows developers to show multiple dialogs\n * at the same time.\n *\n * <hljs lang=\"js\">\n *   // From plain options\n *   $mdDialog.show({\n *     multiple: true\n *   });\n *\n *   // From a dialog preset\n *   $mdDialog.show(\n *     $mdDialog\n *       .alert()\n *       .multiple(true)\n *   );\n *\n * </hljs>\n *\n * ### Pre-Rendered Dialogs\n * By using the `contentElement` option, it is possible to use an already existing element in the DOM.\n *\n * > Pre-rendered dialogs will be not linked to any scope and will not instantiate any new controller.<br/>\n * > You can manually link the elements to a scope or instantiate a controller from the template (`ng-controller`)\n *\n * <hljs lang=\"js\">\n *   $scope.showPrerenderedDialog = function() {\n *     $mdDialog.show({\n *       contentElement: '#myStaticDialog',\n *       parent: angular.element(document.body)\n *     });\n *   };\n * </hljs>\n *\n * When using a string as value, `$mdDialog` will automatically query the DOM for the specified CSS selector.\n *\n * <hljs lang=\"html\">\n *   <div style=\"visibility: hidden\">\n *     <div class=\"md-dialog-container\" id=\"myStaticDialog\">\n *       <md-dialog>\n *         This is a pre-rendered dialog.\n *       </md-dialog>\n *     </div>\n *   </div>\n * </hljs>\n *\n * **Notice**: It is important, to use the `.md-dialog-container` as the content element, otherwise the dialog\n * will not show up.\n *\n * It also possible to use a DOM element for the `contentElement` option.\n * - `contentElement: document.querySelector('#myStaticDialog')`\n * - `contentElement: angular.element(TEMPLATE)`\n *\n * When using a `template` as content element, it will be not compiled upon open.\n * This allows you to compile the element yourself and use it each time the dialog opens.\n *\n * ### Custom Presets\n * Developers are also able to create their own preset, which can be easily used without repeating\n * their options each time.\n *\n * <hljs lang=\"js\">\n *   $mdDialogProvider.addPreset('testPreset', {\n *     options: function() {\n *       return {\n *         template:\n *           '<md-dialog>' +\n *             'This is a custom preset' +\n *           '</md-dialog>',\n *         controllerAs: 'dialog',\n *         bindToController: true,\n *         clickOutsideToClose: true,\n *         escapeToClose: true\n *       };\n *     }\n *   });\n * </hljs>\n *\n * After you created your preset at config phase, you can easily access it.\n *\n * <hljs lang=\"js\">\n *   $mdDialog.show(\n *     $mdDialog.testPreset()\n *   );\n * </hljs>\n *\n * ### JavaScript: promise API syntax, custom dialog template\n * <hljs lang=\"js\">\n * (function(angular, undefined){\n *   \"use strict\";\n *\n *   angular\n *     .module('demoApp', ['ngMaterial'])\n *     .controller('EmployeeController', EmployeeEditor)\n *     .controller('GreetingController', GreetingController);\n *\n *   // Fictitious Employee Editor to show how to use simple and complex dialogs.\n *\n *   function EmployeeEditor($scope, $mdDialog) {\n *     var alert;\n *\n *     $scope.showAlert = showAlert;\n *     $scope.closeAlert = closeAlert;\n *     $scope.showGreeting = showCustomGreeting;\n *\n *     $scope.hasAlert = function() { return !!alert };\n *     $scope.userName = $scope.userName || 'Bobby';\n *\n *     // Dialog #1 - Show simple alert dialog and cache\n *     // reference to dialog instance\n *\n *     function showAlert() {\n *       alert = $mdDialog.alert()\n *         .title('Attention, ' + $scope.userName)\n *         .textContent('This is an example of how easy dialogs can be!')\n *         .ok('Close');\n *\n *       $mdDialog\n *           .show( alert )\n *           .finally(function() {\n *             alert = undefined;\n *           });\n *     }\n *\n *     // Close the specified dialog instance and resolve with 'finished' flag\n *     // Normally this is not needed, just use '$mdDialog.hide()' to close\n *     // the most recent dialog popup.\n *\n *     function closeAlert() {\n *       $mdDialog.hide( alert, \"finished\" );\n *       alert = undefined;\n *     }\n *\n *     // Dialog #2 - Demonstrate more complex dialogs construction and popup.\n *\n *     function showCustomGreeting($event) {\n *         $mdDialog.show({\n *           targetEvent: $event,\n *           template:\n *             '<md-dialog>' +\n *\n *             '  <md-dialog-content>Hello {{ employee }}!</md-dialog-content>' +\n *\n *             '  <md-dialog-actions>' +\n *             '    <md-button ng-click=\"closeDialog()\" class=\"md-primary\">' +\n *             '      Close Greeting' +\n *             '    </md-button>' +\n *             '  </md-dialog-actions>' +\n *             '</md-dialog>',\n *           controller: 'GreetingController',\n *           onComplete: afterShowAnimation,\n *           locals: { employee: $scope.userName }\n *         });\n *\n *         // When the 'enter' animation finishes...\n *\n *         function afterShowAnimation(scope, element, options) {\n *            // post-show code here: DOM element focus, etc.\n *         }\n *     }\n *\n *     // Dialog #3 - Demonstrate use of ControllerAs and passing $scope to dialog\n *     //             Here we used ng-controller=\"GreetingController as vm\" and\n *     //             $scope.vm === <controller instance>\n *\n *     function showCustomGreeting() {\n *\n *        $mdDialog.show({\n *           clickOutsideToClose: true,\n *\n *           scope: $scope,        // use parent scope in template\n *           preserveScope: true,  // do not forget this if use parent scope\n\n *           // Since GreetingController is instantiated with ControllerAs syntax\n *           // AND we are passing the parent '$scope' to the dialog, we MUST\n *           // use 'vm.<xxx>' in the template markup\n *\n *           template: '<md-dialog>' +\n *                     '  <md-dialog-content>' +\n *                     '     Hi There {{vm.employee}}' +\n *                     '  </md-dialog-content>' +\n *                     '</md-dialog>',\n *\n *           controller: function DialogController($scope, $mdDialog) {\n *             $scope.closeDialog = function() {\n *               $mdDialog.hide();\n *             }\n *           }\n *        });\n *     }\n *\n *   }\n *\n *   // Greeting controller used with the more complex 'showCustomGreeting()' custom dialog\n *\n *   function GreetingController($scope, $mdDialog, employee) {\n *     // Assigned from construction <code>locals</code> options...\n *     $scope.employee = employee;\n *\n *     $scope.closeDialog = function() {\n *       // Easily hides most recent dialog shown...\n *       // no specific instance reference is needed.\n *       $mdDialog.hide();\n *     };\n *   }\n *\n * })(angular);\n * </hljs>\n */\n\n/**\n * @ngdoc method\n * @name $mdDialog#alert\n *\n * @description\n * Builds a preconfigured dialog with the specified message.\n *\n * @returns {obj} an `$mdDialogPreset` with the chainable configuration methods:\n *\n * - $mdDialogPreset#title(string) - Sets the alert title.\n * - $mdDialogPreset#textContent(string) - Sets the alert message.\n * - $mdDialogPreset#htmlContent(string) - Sets the alert message as HTML. Requires ngSanitize\n *     module to be loaded. HTML is not run through Angular's compiler.\n * - $mdDialogPreset#ok(string) - Sets the alert \"Okay\" button text.\n * - $mdDialogPreset#theme(string) - Sets the theme of the alert dialog.\n * - $mdDialogPreset#targetEvent(DOMClickEvent=) - A click's event object. When passed in as an option,\n *     the location of the click will be used as the starting point for the opening animation\n *     of the the dialog.\n *\n */\n\n/**\n * @ngdoc method\n * @name $mdDialog#confirm\n *\n * @description\n * Builds a preconfigured dialog with the specified message. You can call show and the promise returned\n * will be resolved only if the user clicks the confirm action on the dialog.\n *\n * @returns {obj} an `$mdDialogPreset` with the chainable configuration methods:\n *\n * Additionally, it supports the following methods:\n *\n * - $mdDialogPreset#title(string) - Sets the confirm title.\n * - $mdDialogPreset#textContent(string) - Sets the confirm message.\n * - $mdDialogPreset#htmlContent(string) - Sets the confirm message as HTML. Requires ngSanitize\n *     module to be loaded. HTML is not run through Angular's compiler.\n * - $mdDialogPreset#ok(string) - Sets the confirm \"Okay\" button text.\n * - $mdDialogPreset#cancel(string) - Sets the confirm \"Cancel\" button text.\n * - $mdDialogPreset#theme(string) - Sets the theme of the confirm dialog.\n * - $mdDialogPreset#targetEvent(DOMClickEvent=) - A click's event object. When passed in as an option,\n *     the location of the click will be used as the starting point for the opening animation\n *     of the the dialog.\n *\n */\n\n/**\n * @ngdoc method\n * @name $mdDialog#prompt\n *\n * @description\n * Builds a preconfigured dialog with the specified message and input box. You can call show and the promise returned\n * will be resolved only if the user clicks the prompt action on the dialog, passing the input value as the first argument.\n *\n * @returns {obj} an `$mdDialogPreset` with the chainable configuration methods:\n *\n * Additionally, it supports the following methods:\n *\n * - $mdDialogPreset#title(string) - Sets the prompt title.\n * - $mdDialogPreset#textContent(string) - Sets the prompt message.\n * - $mdDialogPreset#htmlContent(string) - Sets the prompt message as HTML. Requires ngSanitize\n *     module to be loaded. HTML is not run through Angular's compiler.\n * - $mdDialogPreset#placeholder(string) - Sets the placeholder text for the input.\n * - $mdDialogPreset#initialValue(string) - Sets the initial value for the prompt input.\n * - $mdDialogPreset#ok(string) - Sets the prompt \"Okay\" button text.\n * - $mdDialogPreset#cancel(string) - Sets the prompt \"Cancel\" button text.\n * - $mdDialogPreset#theme(string) - Sets the theme of the prompt dialog.\n * - $mdDialogPreset#targetEvent(DOMClickEvent=) - A click's event object. When passed in as an option,\n *     the location of the click will be used as the starting point for the opening animation\n *     of the the dialog.\n *\n */\n\n/**\n * @ngdoc method\n * @name $mdDialog#show\n *\n * @description\n * Show a dialog with the specified options.\n *\n * @param {object} optionsOrPreset Either provide an `$mdDialogPreset` returned from `alert()`, and\n * `confirm()`, or an options object with the following properties:\n *   - `templateUrl` - `{string=}`: The url of a template that will be used as the content\n *   of the dialog.\n *   - `template` - `{string=}`: HTML template to show in the dialog. This **must** be trusted HTML\n *      with respect to Angular's [$sce service](https://docs.angularjs.org/api/ng/service/$sce).\n *      This template should **never** be constructed with any kind of user input or user data.\n *   - `contentElement` - `{string|Element}`: Instead of using a template, which will be compiled each time a\n *     dialog opens, you can also use a DOM element.<br/>\n *     * When specifying an element, which is present on the DOM, `$mdDialog` will temporary fetch the element into\n *       the dialog and restores it at the old DOM position upon close.\n *     * When specifying a string, the string be used as a CSS selector, to lookup for the element in the DOM.\n *   - `autoWrap` - `{boolean=}`: Whether or not to automatically wrap the template with a\n *     `<md-dialog>` tag if one is not provided. Defaults to true. Can be disabled if you provide a\n *     custom dialog directive.\n *   - `targetEvent` - `{DOMClickEvent=}`: A click's event object. When passed in as an option,\n *     the location of the click will be used as the starting point for the opening animation\n *     of the the dialog.\n *   - `openFrom` - `{string|Element|object}`: The query selector, DOM element or the Rect object\n *     that is used to determine the bounds (top, left, height, width) from which the Dialog will\n *     originate.\n *   - `closeTo` - `{string|Element|object}`: The query selector, DOM element or the Rect object\n *     that is used to determine the bounds (top, left, height, width) to which the Dialog will\n *     target.\n *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified,\n *     it will create a new isolate scope.\n *     This scope will be destroyed when the dialog is removed unless `preserveScope` is set to true.\n *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false\n *   - `disableParentScroll` - `{boolean=}`: Whether to disable scrolling while the dialog is open.\n *     Default true.\n *   - `hasBackdrop` - `{boolean=}`: Whether there should be an opaque backdrop behind the dialog.\n *     Default true.\n *   - `clickOutsideToClose` - `{boolean=}`: Whether the user can click outside the dialog to\n *     close it. Default false.\n *   - `escapeToClose` - `{boolean=}`: Whether the user can press escape to close the dialog.\n *     Default true.\n *   - `focusOnOpen` - `{boolean=}`: An option to override focus behavior on open. Only disable if\n *     focusing some other way, as focus management is required for dialogs to be accessible.\n *     Defaults to true.\n *   - `controller` - `{function|string=}`: The controller to associate with the dialog. The controller\n *     will be injected with the local `$mdDialog`, which passes along a scope for the dialog.\n *   - `locals` - `{object=}`: An object containing key/value pairs. The keys will be used as names\n *     of values to inject into the controller. For example, `locals: {three: 3}` would inject\n *     `three` into the controller, with the value 3. If `bindToController` is true, they will be\n *     copied to the controller instead.\n *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values, and the\n *     dialog will not open until all of the promises resolve.\n *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.\n *   - `parent` - `{element=}`: The element to append the dialog to. Defaults to appending\n *     to the root element of the application.\n *   - `onShowing` - `function(scope, element)`: Callback function used to announce the show() action is\n *     starting.\n *   - `onComplete` - `function(scope, element)`: Callback function used to announce when the show() action is\n *     finished.\n *   - `onRemoving` - `function(element, removePromise)`: Callback function used to announce the\n *      close/hide() action is starting. This allows developers to run custom animations\n *      in parallel the close animations.\n *   - `fullscreen` `{boolean=}`: An option to toggle whether the dialog should show in fullscreen\n *      or not. Defaults to `false`.\n * @returns {promise} A promise that can be resolved with `$mdDialog.hide()` or\n * rejected with `$mdDialog.cancel()`.\n */\n\n/**\n * @ngdoc method\n * @name $mdDialog#hide\n *\n * @description\n * Hide an existing dialog and resolve the promise returned from `$mdDialog.show()`.\n *\n * @param {*=} response An argument for the resolved promise.\n *\n * @returns {promise} A promise that is resolved when the dialog has been closed.\n */\n\n/**\n * @ngdoc method\n * @name $mdDialog#cancel\n *\n * @description\n * Hide an existing dialog and reject the promise returned from `$mdDialog.show()`.\n *\n * @param {*=} response An argument for the rejected promise.\n *\n * @returns {promise} A promise that is resolved when the dialog has been closed.\n */\n\nfunction MdDialogProvider($$interimElementProvider) {\n  // Elements to capture and redirect focus when the user presses tab at the dialog boundary.\n  advancedDialogOptions['$inject'] = [\"$mdDialog\", \"$mdConstant\"];\n  dialogDefaultOptions['$inject'] = [\"$mdDialog\", \"$mdAria\", \"$mdUtil\", \"$mdConstant\", \"$animate\", \"$document\", \"$window\", \"$rootElement\", \"$log\", \"$injector\", \"$mdTheming\", \"$interpolate\", \"$mdInteraction\"];\n  var topFocusTrap, bottomFocusTrap;\n\n  return $$interimElementProvider('$mdDialog')\n    .setDefaults({\n      methods: ['disableParentScroll', 'hasBackdrop', 'clickOutsideToClose', 'escapeToClose',\n          'targetEvent', 'closeTo', 'openFrom', 'parent', 'fullscreen', 'multiple'],\n      options: dialogDefaultOptions\n    })\n    .addPreset('alert', {\n      methods: ['title', 'htmlContent', 'textContent', 'content', 'ariaLabel', 'ok', 'theme',\n          'css'],\n      options: advancedDialogOptions\n    })\n    .addPreset('confirm', {\n      methods: ['title', 'htmlContent', 'textContent', 'content', 'ariaLabel', 'ok', 'cancel',\n          'theme', 'css'],\n      options: advancedDialogOptions\n    })\n    .addPreset('prompt', {\n      methods: ['title', 'htmlContent', 'textContent', 'initialValue', 'content', 'placeholder', 'ariaLabel',\n          'ok', 'cancel', 'theme', 'css'],\n      options: advancedDialogOptions\n    });\n\n  /* ngInject */\n  function advancedDialogOptions($mdDialog, $mdConstant) {\n    return {\n      template: [\n        '<md-dialog md-theme=\"{{ dialog.theme || dialog.defaultTheme }}\" aria-label=\"{{ dialog.ariaLabel }}\" ng-class=\"dialog.css\">',\n        '  <md-dialog-content class=\"md-dialog-content\" role=\"document\" tabIndex=\"-1\">',\n        '    <h2 class=\"md-title\">{{ dialog.title }}</h2>',\n        '    <div ng-if=\"::dialog.mdHtmlContent\" class=\"md-dialog-content-body\" ',\n        '        ng-bind-html=\"::dialog.mdHtmlContent\"></div>',\n        '    <div ng-if=\"::!dialog.mdHtmlContent\" class=\"md-dialog-content-body\">',\n        '      <p>{{::dialog.mdTextContent}}</p>',\n        '    </div>',\n        '    <md-input-container md-no-float ng-if=\"::dialog.$type == \\'prompt\\'\" class=\"md-prompt-input-container\">',\n        '      <input ng-keypress=\"dialog.keypress($event)\" md-autofocus ng-model=\"dialog.result\" ' +\n        '             placeholder=\"{{::dialog.placeholder}}\">',\n        '    </md-input-container>',\n        '  </md-dialog-content>',\n        '  <md-dialog-actions>',\n        '    <md-button ng-if=\"dialog.$type === \\'confirm\\' || dialog.$type === \\'prompt\\'\"' +\n        '               ng-click=\"dialog.abort()\" class=\"md-primary md-cancel-button\">',\n        '      {{ dialog.cancel }}',\n        '    </md-button>',\n        '    <md-button ng-click=\"dialog.hide()\" class=\"md-primary md-confirm-button\" md-autofocus=\"dialog.$type===\\'alert\\'\">',\n        '      {{ dialog.ok }}',\n        '    </md-button>',\n        '  </md-dialog-actions>',\n        '</md-dialog>'\n      ].join('').replace(/\\s\\s+/g, ''),\n      controller: function mdDialogCtrl() {\n        var isPrompt = this.$type == 'prompt';\n\n        if (isPrompt && this.initialValue) {\n          this.result = this.initialValue;\n        }\n\n        this.hide = function() {\n          $mdDialog.hide(isPrompt ? this.result : true);\n        };\n        this.abort = function() {\n          $mdDialog.cancel();\n        };\n        this.keypress = function($event) {\n          if ($event.keyCode === $mdConstant.KEY_CODE.ENTER) {\n            $mdDialog.hide(this.result);\n          }\n        };\n      },\n      controllerAs: 'dialog',\n      bindToController: true,\n    };\n  }\n\n  /* ngInject */\n  function dialogDefaultOptions($mdDialog, $mdAria, $mdUtil, $mdConstant, $animate, $document, $window, $rootElement,\n                                $log, $injector, $mdTheming, $interpolate, $mdInteraction) {\n\n    return {\n      hasBackdrop: true,\n      isolateScope: true,\n      onCompiling: beforeCompile,\n      onShow: onShow,\n      onShowing: beforeShow,\n      onRemove: onRemove,\n      clickOutsideToClose: false,\n      escapeToClose: true,\n      targetEvent: null,\n      closeTo: null,\n      openFrom: null,\n      focusOnOpen: true,\n      disableParentScroll: true,\n      autoWrap: true,\n      fullscreen: false,\n      transformTemplate: function(template, options) {\n        // Make the dialog container focusable, because otherwise the focus will be always redirected to\n        // an element outside of the container, and the focus trap won't work probably..\n        // Also the tabindex is needed for the `escapeToClose` functionality, because\n        // the keyDown event can't be triggered when the focus is outside of the container.\n        var startSymbol = $interpolate.startSymbol();\n        var endSymbol = $interpolate.endSymbol();\n        var theme = startSymbol + (options.themeWatch ? '' : '::') + 'theme' + endSymbol;\n        return '<div class=\"md-dialog-container\" tabindex=\"-1\" md-theme=\"' + theme + '\">' + validatedTemplate(template) + '</div>';\n\n        /**\n         * The specified template should contain a <md-dialog> wrapper element....\n         */\n        function validatedTemplate(template) {\n          if (options.autoWrap && !/<\\/md-dialog>/g.test(template)) {\n            return '<md-dialog>' + (template || '') + '</md-dialog>';\n          } else {\n            return template || '';\n          }\n        }\n      }\n    };\n\n    function beforeCompile(options) {\n      // Automatically apply the theme, if the user didn't specify a theme explicitly.\n      // Those option changes need to be done, before the compilation has started, because otherwise\n      // the option changes will be not available in the $mdCompilers locales.\n      options.defaultTheme = $mdTheming.defaultTheme();\n\n      detectTheming(options);\n    }\n\n    function beforeShow(scope, element, options, controller) {\n\n      if (controller) {\n        var mdHtmlContent = controller.htmlContent || options.htmlContent || '';\n        var mdTextContent = controller.textContent || options.textContent ||\n            controller.content || options.content || '';\n\n        if (mdHtmlContent && !$injector.has('$sanitize')) {\n          throw Error('The ngSanitize module must be loaded in order to use htmlContent.');\n        }\n\n        if (mdHtmlContent && mdTextContent) {\n          throw Error('md-dialog cannot have both `htmlContent` and `textContent`');\n        }\n\n        // Only assign the content if nothing throws, otherwise it'll still be compiled.\n        controller.mdHtmlContent = mdHtmlContent;\n        controller.mdTextContent = mdTextContent;\n      }\n    }\n\n    /** Show method for dialogs */\n    function onShow(scope, element, options, controller) {\n      angular.element($document[0].body).addClass('md-dialog-is-showing');\n\n      var dialogElement = element.find('md-dialog');\n\n      // Once a dialog has `ng-cloak` applied on his template the dialog animation will not work properly.\n      // This is a very common problem, so we have to notify the developer about this.\n      if (dialogElement.hasClass('ng-cloak')) {\n        var message = '$mdDialog: using `<md-dialog ng-cloak>` will affect the dialog opening animations.';\n        $log.warn( message, element[0] );\n      }\n\n      captureParentAndFromToElements(options);\n      configureAria(dialogElement, options);\n      showBackdrop(scope, element, options);\n      activateListeners(element, options);\n\n      return dialogPopIn(element, options)\n        .then(function() {\n          lockScreenReader(element, options);\n          focusOnOpen();\n        });\n\n      /**\n       * For alerts, focus on content... otherwise focus on\n       * the close button (or equivalent)\n       */\n      function focusOnOpen() {\n        if (options.focusOnOpen) {\n          var target = $mdUtil.findFocusTarget(element) || findCloseButton() || dialogElement;\n          target.focus();\n        }\n\n        /**\n         * If no element with class dialog-close, try to find the last\n         * button child in md-actions and assume it is a close button.\n         *\n         * If we find no actions at all, log a warning to the console.\n         */\n        function findCloseButton() {\n          return element[0].querySelector('.dialog-close, md-dialog-actions button:last-child');\n        }\n      }\n    }\n\n    /**\n     * Remove function for all dialogs\n     */\n    function onRemove(scope, element, options) {\n      options.deactivateListeners();\n      options.unlockScreenReader();\n      options.hideBackdrop(options.$destroy);\n\n      // Remove the focus traps that we added earlier for keeping focus within the dialog.\n      if (topFocusTrap && topFocusTrap.parentNode) {\n        topFocusTrap.parentNode.removeChild(topFocusTrap);\n      }\n\n      if (bottomFocusTrap && bottomFocusTrap.parentNode) {\n        bottomFocusTrap.parentNode.removeChild(bottomFocusTrap);\n      }\n\n      // For navigation $destroy events, do a quick, non-animated removal,\n      // but for normal closes (from clicks, etc) animate the removal\n      return !!options.$destroy ? detachAndClean() : animateRemoval().then( detachAndClean );\n\n      /**\n       * For normal closes, animate the removal.\n       * For forced closes (like $destroy events), skip the animations\n       */\n      function animateRemoval() {\n        return dialogPopOut(element, options);\n      }\n\n      /**\n       * Detach the element\n       */\n      function detachAndClean() {\n        angular.element($document[0].body).removeClass('md-dialog-is-showing');\n\n        // Reverse the container stretch if using a content element.\n        if (options.contentElement) {\n          options.reverseContainerStretch();\n        }\n\n        // Exposed cleanup function from the $mdCompiler.\n        options.cleanupElement();\n\n        // Restores the focus to the origin element if the last interaction upon opening was a keyboard.\n        if (!options.$destroy && options.originInteraction === 'keyboard') {\n          options.origin.focus();\n        }\n      }\n    }\n\n    function detectTheming(options) {\n      // Once the user specifies a targetEvent, we will automatically try to find the correct\n      // nested theme.\n      var targetEl;\n      if (options.targetEvent && options.targetEvent.target) {\n        targetEl = angular.element(options.targetEvent.target);\n      }\n\n      var themeCtrl = targetEl && targetEl.controller('mdTheme');\n\n      if (!themeCtrl) {\n        return;\n      }\n\n      options.themeWatch = themeCtrl.$shouldWatch;\n\n      var theme = options.theme || themeCtrl.$mdTheme;\n\n      if (theme) {\n        options.scope.theme = theme;\n      }\n\n      var unwatch = themeCtrl.registerChanges(function (newTheme) {\n        options.scope.theme = newTheme;\n\n        if (!options.themeWatch) {\n          unwatch();\n        }\n      });\n    }\n\n    /**\n     * Capture originator/trigger/from/to element information (if available)\n     * and the parent container for the dialog; defaults to the $rootElement\n     * unless overridden in the options.parent\n     */\n    function captureParentAndFromToElements(options) {\n          options.origin = angular.extend({\n            element: null,\n            bounds: null,\n            focus: angular.noop\n          }, options.origin || {});\n\n          options.parent   = getDomElement(options.parent, $rootElement);\n          options.closeTo  = getBoundingClientRect(getDomElement(options.closeTo));\n          options.openFrom = getBoundingClientRect(getDomElement(options.openFrom));\n\n          if ( options.targetEvent ) {\n            options.origin = getBoundingClientRect(options.targetEvent.target, options.origin);\n            options.originInteraction = $mdInteraction.getLastInteractionType();\n          }\n\n\n          /**\n           * Identify the bounding RECT for the target element\n           *\n           */\n          function getBoundingClientRect (element, orig) {\n            var source = angular.element((element || {}));\n            if (source && source.length) {\n              // Compute and save the target element's bounding rect, so that if the\n              // element is hidden when the dialog closes, we can shrink the dialog\n              // back to the same position it expanded from.\n              //\n              // Checking if the source is a rect object or a DOM element\n              var bounds = {top:0,left:0,height:0,width:0};\n              var hasFn = angular.isFunction(source[0].getBoundingClientRect);\n\n              return angular.extend(orig || {}, {\n                  element : hasFn ? source : undefined,\n                  bounds  : hasFn ? source[0].getBoundingClientRect() : angular.extend({}, bounds, source[0]),\n                  focus   : angular.bind(source, source.focus),\n              });\n            }\n          }\n\n          /**\n           * If the specifier is a simple string selector, then query for\n           * the DOM element.\n           */\n          function getDomElement(element, defaultElement) {\n            if (angular.isString(element)) {\n              element = $document[0].querySelector(element);\n            }\n\n            // If we have a reference to a raw dom element, always wrap it in jqLite\n            return angular.element(element || defaultElement);\n          }\n\n        }\n\n    /**\n     * Listen for escape keys and outside clicks to auto close\n     */\n    function activateListeners(element, options) {\n      var window = angular.element($window);\n      var onWindowResize = $mdUtil.debounce(function() {\n        stretchDialogContainerToViewport(element, options);\n      }, 60);\n\n      var removeListeners = [];\n      var smartClose = function() {\n        // Only 'confirm' dialogs have a cancel button... escape/clickOutside will\n        // cancel or fallback to hide.\n        var closeFn = ( options.$type == 'alert' ) ? $mdDialog.hide : $mdDialog.cancel;\n        $mdUtil.nextTick(closeFn, true);\n      };\n\n      if (options.escapeToClose) {\n        var parentTarget = options.parent;\n        var keyHandlerFn = function(ev) {\n          if (ev.keyCode === $mdConstant.KEY_CODE.ESCAPE) {\n            ev.stopPropagation();\n            ev.preventDefault();\n\n            smartClose();\n          }\n        };\n\n        // Add keydown listeners\n        element.on('keydown', keyHandlerFn);\n        parentTarget.on('keydown', keyHandlerFn);\n\n        // Queue remove listeners function\n        removeListeners.push(function() {\n\n          element.off('keydown', keyHandlerFn);\n          parentTarget.off('keydown', keyHandlerFn);\n\n        });\n      }\n\n      // Register listener to update dialog on window resize\n      window.on('resize', onWindowResize);\n\n      removeListeners.push(function() {\n        window.off('resize', onWindowResize);\n      });\n\n      if (options.clickOutsideToClose) {\n        var target = element;\n        var sourceElem;\n\n        // Keep track of the element on which the mouse originally went down\n        // so that we can only close the backdrop when the 'click' started on it.\n        // A simple 'click' handler does not work,\n        // it sets the target object as the element the mouse went down on.\n        var mousedownHandler = function(ev) {\n          sourceElem = ev.target;\n        };\n\n        // We check if our original element and the target is the backdrop\n        // because if the original was the backdrop and the target was inside the dialog\n        // we don't want to dialog to close.\n        var mouseupHandler = function(ev) {\n          if (sourceElem === target[0] && ev.target === target[0]) {\n            ev.stopPropagation();\n            ev.preventDefault();\n\n            smartClose();\n          }\n        };\n\n        // Add listeners\n        target.on('mousedown', mousedownHandler);\n        target.on('mouseup', mouseupHandler);\n\n        // Queue remove listeners function\n        removeListeners.push(function() {\n          target.off('mousedown', mousedownHandler);\n          target.off('mouseup', mouseupHandler);\n        });\n      }\n\n      // Attach specific `remove` listener handler\n      options.deactivateListeners = function() {\n        removeListeners.forEach(function(removeFn) {\n          removeFn();\n        });\n        options.deactivateListeners = null;\n      };\n    }\n\n    /**\n     * Show modal backdrop element...\n     */\n    function showBackdrop(scope, element, options) {\n\n      if (options.disableParentScroll) {\n        // !! DO this before creating the backdrop; since disableScrollAround()\n        //    configures the scroll offset; which is used by mdBackDrop postLink()\n        options.restoreScroll = $mdUtil.disableScrollAround(element, options.parent);\n      }\n\n      if (options.hasBackdrop) {\n        options.backdrop = $mdUtil.createBackdrop(scope, \"md-dialog-backdrop md-opaque\");\n        $animate.enter(options.backdrop, options.parent);\n      }\n\n      /**\n       * Hide modal backdrop element...\n       */\n      options.hideBackdrop = function hideBackdrop($destroy) {\n        if (options.backdrop) {\n          if ( !!$destroy ) options.backdrop.remove();\n          else              $animate.leave(options.backdrop);\n        }\n\n\n        if (options.disableParentScroll) {\n          options.restoreScroll && options.restoreScroll();\n          delete options.restoreScroll;\n        }\n\n        options.hideBackdrop = null;\n      };\n    }\n\n    /**\n     * Inject ARIA-specific attributes appropriate for Dialogs\n     */\n    function configureAria(element, options) {\n\n      var role = (options.$type === 'alert') ? 'alertdialog' : 'dialog';\n      var dialogContent = element.find('md-dialog-content');\n      var existingDialogId = element.attr('id');\n      var dialogContentId = 'dialogContent_' + (existingDialogId || $mdUtil.nextUid());\n\n      element.attr({\n        'role': role,\n        'tabIndex': '-1'\n      });\n\n      if (dialogContent.length === 0) {\n        dialogContent = element;\n        // If the dialog element already had an ID, don't clobber it.\n        if (existingDialogId) {\n          dialogContentId = existingDialogId;\n        }\n      }\n\n      dialogContent.attr('id', dialogContentId);\n      element.attr('aria-describedby', dialogContentId);\n\n      if (options.ariaLabel) {\n        $mdAria.expect(element, 'aria-label', options.ariaLabel);\n      }\n      else {\n        $mdAria.expectAsync(element, 'aria-label', function() {\n          var words = dialogContent.text().split(/\\s+/);\n          if (words.length > 3) words = words.slice(0, 3).concat('...');\n          return words.join(' ');\n        });\n      }\n\n      // Set up elements before and after the dialog content to capture focus and\n      // redirect back into the dialog.\n      topFocusTrap = document.createElement('div');\n      topFocusTrap.classList.add('md-dialog-focus-trap');\n      topFocusTrap.tabIndex = 0;\n\n      bottomFocusTrap = topFocusTrap.cloneNode(false);\n\n      // When focus is about to move out of the dialog, we want to intercept it and redirect it\n      // back to the dialog element.\n      var focusHandler = function() {\n        element.focus();\n      };\n      topFocusTrap.addEventListener('focus', focusHandler);\n      bottomFocusTrap.addEventListener('focus', focusHandler);\n\n      // The top focus trap inserted immeidately before the md-dialog element (as a sibling).\n      // The bottom focus trap is inserted at the very end of the md-dialog element (as a child).\n      element[0].parentNode.insertBefore(topFocusTrap, element[0]);\n      element.after(bottomFocusTrap);\n    }\n\n    /**\n     * Prevents screen reader interaction behind modal window\n     * on swipe interfaces\n     */\n    function lockScreenReader(element, options) {\n      var isHidden = true;\n\n      // get raw DOM node\n      walkDOM(element[0]);\n\n      options.unlockScreenReader = function() {\n        isHidden = false;\n        walkDOM(element[0]);\n\n        options.unlockScreenReader = null;\n      };\n\n      /**\n       * Walk DOM to apply or remove aria-hidden on sibling nodes\n       * and parent sibling nodes\n       *\n       */\n      function walkDOM(element) {\n        while (element.parentNode) {\n          if (element === document.body) {\n            return;\n          }\n          var children = element.parentNode.children;\n          for (var i = 0; i < children.length; i++) {\n            // skip over child if it is an ascendant of the dialog\n            // or a script or style tag\n            if (element !== children[i] && !isNodeOneOf(children[i], ['SCRIPT', 'STYLE'])) {\n              children[i].setAttribute('aria-hidden', isHidden);\n            }\n          }\n\n          walkDOM(element = element.parentNode);\n        }\n      }\n    }\n\n    /**\n     * Ensure the dialog container fill-stretches to the viewport\n     */\n    function stretchDialogContainerToViewport(container, options) {\n      var isFixed = $window.getComputedStyle($document[0].body).position == 'fixed';\n      var backdrop = options.backdrop ? $window.getComputedStyle(options.backdrop[0]) : null;\n      var height = backdrop ? Math.min($document[0].body.clientHeight, Math.ceil(Math.abs(parseInt(backdrop.height, 10)))) : 0;\n\n      var previousStyles = {\n        top: container.css('top'),\n        height: container.css('height')\n      };\n\n      // If the body is fixed, determine the distance to the viewport in relative from the parent.\n      var parentTop = Math.abs(options.parent[0].getBoundingClientRect().top);\n\n      container.css({\n        top: (isFixed ? parentTop : 0) + 'px',\n        height: height ? height + 'px' : '100%'\n      });\n\n      return function() {\n        // Reverts the modified styles back to the previous values.\n        // This is needed for contentElements, which should have the same styles after close\n        // as before.\n        container.css(previousStyles);\n      };\n    }\n\n    /**\n     *  Dialog open and pop-in animation\n     */\n    function dialogPopIn(container, options) {\n      // Add the `md-dialog-container` to the DOM\n      options.parent.append(container);\n      options.reverseContainerStretch = stretchDialogContainerToViewport(container, options);\n\n      var dialogEl = container.find('md-dialog');\n      var animator = $mdUtil.dom.animator;\n      var buildTranslateToOrigin = animator.calculateZoomToOrigin;\n      var translateOptions = {transitionInClass: 'md-transition-in', transitionOutClass: 'md-transition-out'};\n      var from = animator.toTransformCss(buildTranslateToOrigin(dialogEl, options.openFrom || options.origin));\n      var to = animator.toTransformCss(\"\");  // defaults to center display (or parent or $rootElement)\n\n      dialogEl.toggleClass('md-dialog-fullscreen', !!options.fullscreen);\n\n      return animator\n        .translate3d(dialogEl, from, to, translateOptions)\n        .then(function(animateReversal) {\n\n          // Build a reversal translate function synced to this translation...\n          options.reverseAnimate = function() {\n            delete options.reverseAnimate;\n\n            if (options.closeTo) {\n              // Using the opposite classes to create a close animation to the closeTo element\n              translateOptions = {transitionInClass: 'md-transition-out', transitionOutClass: 'md-transition-in'};\n              from = to;\n              to = animator.toTransformCss(buildTranslateToOrigin(dialogEl, options.closeTo));\n\n              return animator\n                .translate3d(dialogEl, from, to,translateOptions);\n            }\n\n            return animateReversal(\n              to = animator.toTransformCss(\n                // in case the origin element has moved or is hidden,\n                // let's recalculate the translateCSS\n                buildTranslateToOrigin(dialogEl, options.origin)\n              )\n            );\n\n          };\n\n          // Function to revert the generated animation styles on the dialog element.\n          // Useful when using a contentElement instead of a template.\n          options.clearAnimate = function() {\n            delete options.clearAnimate;\n\n            // Remove the transition classes, added from $animateCSS, since those can't be removed\n            // by reversely running the animator.\n            dialogEl.removeClass([\n              translateOptions.transitionOutClass,\n              translateOptions.transitionInClass\n            ].join(' '));\n\n            // Run the animation reversely to remove the previous added animation styles.\n            return animator.translate3d(dialogEl, to, animator.toTransformCss(''), {});\n          };\n\n          return true;\n        });\n    }\n\n    /**\n     * Dialog close and pop-out animation\n     */\n    function dialogPopOut(container, options) {\n      return options.reverseAnimate().then(function() {\n        if (options.contentElement) {\n          // When we use a contentElement, we want the element to be the same as before.\n          // That means, that we have to clear all the animation properties, like transform.\n          options.clearAnimate();\n        }\n      });\n    }\n\n    /**\n     * Utility function to filter out raw DOM nodes\n     */\n    function isNodeOneOf(elem, nodeTypeArray) {\n      if (nodeTypeArray.indexOf(elem.nodeName) !== -1) {\n        return true;\n      }\n    }\n\n  }\n}\n\nngmaterial.components.dialog = angular.module(\"material.components.dialog\");"]}