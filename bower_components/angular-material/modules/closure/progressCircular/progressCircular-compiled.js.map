{"version":3,"sources":["progressCircular.js"],"names":[],"mappings":"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","file":"progressCircular-compiled.js","sourcesContent":["/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v1.1.1-master-f7ecb4f\n */\ngoog.provide('ngmaterial.components.progressCircular');\ngoog.require('ngmaterial.core');\n/**\n * @ngdoc module\n * @name material.components.progressCircular\n * @description Module for a circular progressbar\n */\n\nangular.module('material.components.progressCircular', ['material.core']);\n\n/**\n * @ngdoc directive\n * @name mdProgressCircular\n * @module material.components.progressCircular\n * @restrict E\n *\n * @description\n * The circular progress directive is used to make loading content in your app as delightful and\n * painless as possible by minimizing the amount of visual change a user sees before they can view\n * and interact with content.\n *\n * For operations where the percentage of the operation completed can be determined, use a\n * determinate indicator. They give users a quick sense of how long an operation will take.\n *\n * For operations where the user is asked to wait a moment while something finishes up, and itâ€™s\n * not necessary to expose what's happening behind the scenes and how long it will take, use an\n * indeterminate indicator.\n *\n * @param {string} md-mode Select from one of two modes: **'determinate'** and **'indeterminate'**.\n *\n * Note: if the `md-mode` value is set as undefined or specified as not 1 of the two (2) valid modes, then **'indeterminate'**\n * will be auto-applied as the mode.\n *\n * Note: if not configured, the `md-mode=\"indeterminate\"` will be auto injected as an attribute.\n * If `value=\"\"` is also specified, however, then `md-mode=\"determinate\"` would be auto-injected instead.\n * @param {number=} value In determinate mode, this number represents the percentage of the\n *     circular progress. Default: 0\n * @param {number=} md-diameter This specifies the diameter of the circular progress. The value\n * should be a pixel-size value (eg '100'). If this attribute is\n * not present then a default value of '50px' is assumed.\n *\n * @param {boolean=} ng-disabled Determines whether to disable the progress element.\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-progress-circular md-mode=\"determinate\" value=\"...\"></md-progress-circular>\n *\n * <md-progress-circular md-mode=\"determinate\" ng-value=\"...\"></md-progress-circular>\n *\n * <md-progress-circular md-mode=\"determinate\" value=\"...\" md-diameter=\"100\"></md-progress-circular>\n *\n * <md-progress-circular md-mode=\"indeterminate\"></md-progress-circular>\n * </hljs>\n */\n\nMdProgressCircularDirective['$inject'] = [\"$window\", \"$mdProgressCircular\", \"$mdTheming\", \"$mdUtil\", \"$interval\", \"$log\"];\nangular\n  .module('material.components.progressCircular')\n  .directive('mdProgressCircular', MdProgressCircularDirective);\n\n/* ngInject */\nfunction MdProgressCircularDirective($window, $mdProgressCircular, $mdTheming,\n                                     $mdUtil, $interval, $log) {\n\n  // Note that this shouldn't use use $$rAF, because it can cause an infinite loop\n  // in any tests that call $animate.flush.\n  var rAF = $window.requestAnimationFrame ||\n            $window.webkitRequestAnimationFrame ||\n            angular.noop;\n\n  var cAF = $window.cancelAnimationFrame ||\n            $window.webkitCancelAnimationFrame ||\n            $window.webkitCancelRequestAnimationFrame ||\n            angular.noop;\n\n  var DEGREE_IN_RADIANS = $window.Math.PI / 180;\n  var MODE_DETERMINATE = 'determinate';\n  var MODE_INDETERMINATE = 'indeterminate';\n  var DISABLED_CLASS = '_md-progress-circular-disabled';\n  var INDETERMINATE_CLASS = 'md-mode-indeterminate';\n\n  return {\n    restrict: 'E',\n    scope: {\n      value: '@',\n      mdDiameter: '@',\n      mdMode: '@'\n    },\n    template:\n      '<svg xmlns=\"http://www.w3.org/2000/svg\">' +\n        '<path fill=\"none\"/>' +\n      '</svg>',\n    compile: function(element, attrs) {\n      element.attr({\n        'aria-valuemin': 0,\n        'aria-valuemax': 100,\n        'role': 'progressbar'\n      });\n\n      if (angular.isUndefined(attrs.mdMode)) {\n        var mode = attrs.hasOwnProperty('value') ? MODE_DETERMINATE : MODE_INDETERMINATE;\n        attrs.$set('mdMode', mode);\n      } else {\n        attrs.$set('mdMode', attrs.mdMode.trim());\n      }\n\n      return MdProgressCircularLink;\n    }\n  };\n\n  function MdProgressCircularLink(scope, element, attrs) {\n    var node = element[0];\n    var svg = angular.element(node.querySelector('svg'));\n    var path = angular.element(node.querySelector('path'));\n    var startIndeterminate = $mdProgressCircular.startIndeterminate;\n    var endIndeterminate = $mdProgressCircular.endIndeterminate;\n    var rotationIndeterminate = 0;\n    var lastAnimationId = 0;\n    var lastDrawFrame;\n    var interval;\n\n    $mdTheming(element);\n    element.toggleClass(DISABLED_CLASS, attrs.hasOwnProperty('disabled'));\n\n    // If the mode is indeterminate, it doesn't need to\n    // wait for the next digest. It can start right away.\n    if(scope.mdMode === MODE_INDETERMINATE){\n      startIndeterminateAnimation();\n    }\n\n    scope.$on('$destroy', function(){\n      cleanupIndeterminateAnimation();\n\n      if (lastDrawFrame) {\n        cAF(lastDrawFrame);\n      }\n    });\n\n    scope.$watchGroup(['value', 'mdMode', function() {\n      var isDisabled = node.disabled;\n\n      // Sometimes the browser doesn't return a boolean, in\n      // which case we should check whether the attribute is\n      // present.\n      if (isDisabled === true || isDisabled === false){\n        return isDisabled;\n      }\n\n      return angular.isDefined(element.attr('disabled'));\n    }], function(newValues, oldValues) {\n      var mode = newValues[1];\n      var isDisabled = newValues[2];\n      var wasDisabled = oldValues[2];\n\n      if (isDisabled !== wasDisabled) {\n        element.toggleClass(DISABLED_CLASS, !!isDisabled);\n      }\n\n      if (isDisabled) {\n        cleanupIndeterminateAnimation();\n      } else {\n        if (mode !== MODE_DETERMINATE && mode !== MODE_INDETERMINATE) {\n          mode = MODE_INDETERMINATE;\n          attrs.$set('mdMode', mode);\n        }\n\n        if (mode === MODE_INDETERMINATE) {\n          startIndeterminateAnimation();\n        } else {\n          var newValue = clamp(newValues[0]);\n\n          cleanupIndeterminateAnimation();\n\n          element.attr('aria-valuenow', newValue);\n          renderCircle(clamp(oldValues[0]), newValue);\n        }\n      }\n\n    });\n\n    // This is in a separate watch in order to avoid layout, unless\n    // the value has actually changed.\n    scope.$watch('mdDiameter', function(newValue) {\n      var diameter = getSize(newValue);\n      var strokeWidth = getStroke(diameter);\n      var value = clamp(scope.value);\n      var transformOrigin = (diameter / 2) + 'px';\n      var dimensions = {\n        width: diameter + 'px',\n        height: diameter + 'px'\n      };\n\n      // The viewBox has to be applied via setAttribute, because it is\n      // case-sensitive. If jQuery is included in the page, `.attr` lowercases\n      // all attribute names.\n      svg[0].setAttribute('viewBox', '0 0 ' + diameter + ' ' + diameter);\n\n      // Usually viewBox sets the dimensions for the SVG, however that doesn't\n      // seem to be the case on IE10.\n      // Important! The transform origin has to be set from here and it has to\n      // be in the format of \"Ypx Ypx Ypx\", otherwise the rotation wobbles in\n      // IE and Edge, because they don't account for the stroke width when\n      // rotating. Also \"center\" doesn't help in this case, it has to be a\n      // precise value.\n      svg\n        .css(dimensions)\n        .css('transform-origin', transformOrigin + ' ' + transformOrigin + ' ' + transformOrigin);\n\n      element.css(dimensions);\n      path.css('stroke-width',  strokeWidth + 'px');\n\n      renderCircle(value, value);\n    });\n\n    function renderCircle(animateFrom, animateTo, easing, duration, rotation) {\n      var id = ++lastAnimationId;\n      var startTime = $mdUtil.now();\n      var changeInValue = animateTo - animateFrom;\n      var diameter = getSize(scope.mdDiameter);\n      var pathDiameter = diameter - getStroke(diameter);\n      var ease = easing || $mdProgressCircular.easeFn;\n      var animationDuration = duration || $mdProgressCircular.duration;\n\n      // No need to animate it if the values are the same\n      if (animateTo === animateFrom) {\n        path.attr('d', getSvgArc(animateTo, diameter, pathDiameter, rotation));\n      } else {\n        lastDrawFrame = rAF(function animation() {\n          var currentTime = $window.Math.max(0, $window.Math.min($mdUtil.now() - startTime, animationDuration));\n\n          path.attr('d', getSvgArc(\n            ease(currentTime, animateFrom, changeInValue, animationDuration),\n            diameter,\n            pathDiameter,\n            rotation\n          ));\n\n          // Do not allow overlapping animations\n          if (id === lastAnimationId && currentTime < animationDuration) {\n            lastDrawFrame = rAF(animation);\n          }\n        });\n      }\n    }\n\n    function animateIndeterminate() {\n      renderCircle(\n        startIndeterminate,\n        endIndeterminate,\n        $mdProgressCircular.easeFnIndeterminate,\n        $mdProgressCircular.durationIndeterminate,\n        rotationIndeterminate\n      );\n\n      // The % 100 technically isn't necessary, but it keeps the rotation\n      // under 100, instead of becoming a crazy large number.\n      rotationIndeterminate = (rotationIndeterminate + endIndeterminate) % 100;\n\n      var temp = startIndeterminate;\n      startIndeterminate = -endIndeterminate;\n      endIndeterminate = -temp;\n    }\n\n    function startIndeterminateAnimation() {\n      if (!interval) {\n        // Note that this interval isn't supposed to trigger a digest.\n        interval = $interval(\n          animateIndeterminate,\n          $mdProgressCircular.durationIndeterminate + 50,\n          0,\n          false\n        );\n\n        animateIndeterminate();\n\n        element\n          .addClass(INDETERMINATE_CLASS)\n          .removeAttr('aria-valuenow');\n      }\n    }\n\n    function cleanupIndeterminateAnimation() {\n      if (interval) {\n        $interval.cancel(interval);\n        interval = null;\n        element.removeClass(INDETERMINATE_CLASS);\n      }\n    }\n  }\n\n  /**\n   * Generates an arc following the SVG arc syntax.\n   * Syntax spec: https://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands\n   *\n   * @param {number} current Current value between 0 and 100.\n   * @param {number} diameter Diameter of the container.\n   * @param {number} pathDiameter Diameter of the path element.\n   * @param {number=0} rotation The point at which the semicircle should start rendering.\n   * Used for doing the indeterminate animation.\n   *\n   * @returns {string} String representation of an SVG arc.\n   */\n  function getSvgArc(current, diameter, pathDiameter, rotation) {\n    // The angle can't be exactly 360, because the arc becomes hidden.\n    var maximumAngle = 359.99 / 100;\n    var startPoint = rotation || 0;\n    var radius = diameter / 2;\n    var pathRadius = pathDiameter / 2;\n\n    var startAngle = startPoint * maximumAngle;\n    var endAngle = current * maximumAngle;\n    var start = polarToCartesian(radius, pathRadius, startAngle);\n    var end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\n    var arcSweep = endAngle < 0 ? 0 : 1;\n    var largeArcFlag;\n\n    if (endAngle < 0) {\n      largeArcFlag = endAngle >= -180 ? 0 : 1;\n    } else {\n      largeArcFlag = endAngle <= 180 ? 0 : 1;\n    }\n\n    return 'M' + start + 'A' + pathRadius + ',' + pathRadius +\n      ' 0 ' + largeArcFlag + ',' + arcSweep + ' ' + end;\n  }\n\n  /**\n   * Converts Polar coordinates to Cartesian.\n   *\n   * @param {number} radius Radius of the container.\n   * @param {number} pathRadius Radius of the path element\n   * @param {number} angleInDegress Angle at which to place the point.\n   *\n   * @returns {string} Cartesian coordinates in the format of `x,y`.\n   */\n  function polarToCartesian(radius, pathRadius, angleInDegrees) {\n    var angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\n\n    return (radius + (pathRadius * $window.Math.cos(angleInRadians))) +\n      ',' + (radius + (pathRadius * $window.Math.sin(angleInRadians)));\n  }\n\n  /**\n   * Limits a value between 0 and 100.\n   */\n  function clamp(value) {\n    return $window.Math.max(0, $window.Math.min(value || 0, 100));\n  }\n\n  /**\n   * Determines the size of a progress circle, based on the provided\n   * value in the following formats: `X`, `Ypx`, `Z%`.\n   */\n  function getSize(value) {\n    var defaultValue = $mdProgressCircular.progressSize;\n\n    if (value) {\n      var parsed = parseFloat(value);\n\n      if (value.lastIndexOf('%') === value.length - 1) {\n        parsed = (parsed / 100) * defaultValue;\n      }\n\n      return parsed;\n    }\n\n    return defaultValue;\n  }\n\n  /**\n   * Determines the circle's stroke width, based on\n   * the provided diameter.\n   */\n  function getStroke(diameter) {\n    return $mdProgressCircular.strokeWidth / 100 * diameter;\n  }\n}\n\n/**\n * @ngdoc service\n * @name $mdProgressCircular\n * @module material.components.progressCircular\n *\n * @description\n * Allows the user to specify the default options for the `progressCircular` directive.\n *\n * @property {number} progressSize Diameter of the progress circle in pixels.\n * @property {number} strokeWidth Width of the circle's stroke as a percentage of the circle's size.\n * @property {number} duration Length of the circle animation in milliseconds.\n * @property {function} easeFn Default easing animation function.\n * @property {object} easingPresets Collection of pre-defined easing functions.\n *\n * @property {number} durationIndeterminate Duration of the indeterminate animation.\n * @property {number} startIndeterminate Indeterminate animation start point.\n * @property {number} endIndeterminate Indeterminate animation end point.\n * @property {function} easeFnIndeterminate Easing function to be used when animating\n * between the indeterminate values.\n *\n * @property {(function(object): object)} configure Used to modify the default options.\n *\n * @usage\n * <hljs lang=\"js\">\n *   myAppModule.config(function($mdProgressCircularProvider) {\n *\n *     // Example of changing the default progress options.\n *     $mdProgressCircularProvider.configure({\n *       progressSize: 100,\n *       strokeWidth: 20,\n *       duration: 800\n *     });\n * });\n * </hljs>\n *\n */\n\nangular\n  .module('material.components.progressCircular')\n  .provider(\"$mdProgressCircular\", MdProgressCircularProvider);\n\nfunction MdProgressCircularProvider() {\n  var progressConfig = {\n    progressSize: 50,\n    strokeWidth: 10,\n    duration: 100,\n    easeFn: linearEase,\n\n    durationIndeterminate: 500,\n    startIndeterminate: 3,\n    endIndeterminate: 80,\n    easeFnIndeterminate: materialEase,\n\n    easingPresets: {\n      linearEase: linearEase,\n      materialEase: materialEase\n    }\n  };\n\n  return {\n    configure: function(options) {\n      progressConfig = angular.extend(progressConfig, options || {});\n      return progressConfig;\n    },\n    $get: function() { return progressConfig; }\n  };\n\n  function linearEase(t, b, c, d) {\n    return c * t / d + b;\n  }\n\n  function materialEase(t, b, c, d) {\n    // via http://www.timotheegroleau.com/Flash/experiments/easing_function_generator.htm\n    // with settings of [0, 0, 1, 1]\n    var ts = (t /= d) * t;\n    var tc = ts * t;\n    return b + c * (6 * tc * ts + -15 * ts * ts + 10 * tc);\n  }\n}\n\nngmaterial.components.progressCircular = angular.module(\"material.components.progressCircular\");"]}