{"version":3,"sources":["toast.js"],"names":[],"mappings":"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","file":"toast-compiled.js","sourcesContent":["/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v1.1.1-master-f7ecb4f\n */\ngoog.provide('ngmaterial.components.toast');\ngoog.require('ngmaterial.components.button');\ngoog.require('ngmaterial.core');\n/**\n  * @ngdoc module\n  * @name material.components.toast\n  * @description\n  * Toast\n  */\nMdToastDirective['$inject'] = [\"$mdToast\"];\nMdToastProvider['$inject'] = [\"$$interimElementProvider\"];\nangular.module('material.components.toast', [\n  'material.core',\n  'material.components.button'\n])\n  .directive('mdToast', MdToastDirective)\n  .provider('$mdToast', MdToastProvider);\n\n/* ngInject */\nfunction MdToastDirective($mdToast) {\n  return {\n    restrict: 'E',\n    link: function postLink(scope, element) {\n      element.addClass('_md');     // private md component indicator for styling\n      \n      // When navigation force destroys an interimElement, then\n      // listen and $destroy() that interim instance...\n      scope.$on('$destroy', function() {\n        $mdToast.destroy();\n      });\n    }\n  };\n}\n\n/**\n  * @ngdoc service\n  * @name $mdToast\n  * @module material.components.toast\n  *\n  * @description\n  * `$mdToast` is a service to build a toast notification on any position\n  * on the screen with an optional duration, and provides a simple promise API.\n  *\n  * The toast will be always positioned at the `bottom`, when the screen size is\n  * between `600px` and `959px` (`sm` breakpoint)\n  *\n  * ## Restrictions on custom toasts\n  * - The toast's template must have an outer `<md-toast>` element.\n  * - For a toast action, use element with class `md-action`.\n  * - Add the class `md-capsule` for curved corners.\n  *\n  * ### Custom Presets\n  * Developers are also able to create their own preset, which can be easily used without repeating\n  * their options each time.\n  *\n  * <hljs lang=\"js\">\n  *   $mdToastProvider.addPreset('testPreset', {\n  *     options: function() {\n  *       return {\n  *         template:\n  *           '<md-toast>' +\n  *             '<div class=\"md-toast-content\">' +\n  *               'This is a custom preset' +\n  *             '</div>' +\n  *           '</md-toast>',\n  *         controllerAs: 'toast',\n  *         bindToController: true\n  *       };\n  *     }\n  *   });\n  * </hljs>\n  *\n  * After you created your preset at config phase, you can easily access it.\n  *\n  * <hljs lang=\"js\">\n  *   $mdToast.show(\n  *     $mdToast.testPreset()\n  *   );\n  * </hljs>\n  *\n  * ## Parent container notes\n  *\n  * The toast is positioned using absolute positioning relative to its first non-static parent\n  * container. Thus, if the requested parent container uses static positioning, we will temporarily\n  * set its positioning to `relative` while the toast is visible and reset it when the toast is\n  * hidden.\n  *\n  * Because of this, it is usually best to ensure that the parent container has a fixed height and\n  * prevents scrolling by setting the `overflow: hidden;` style. Since the position is based off of\n  * the parent's height, the toast may be mispositioned if you allow the parent to scroll.\n  *\n  * You can, however, have a scrollable element inside of the container; just make sure the\n  * container itself does not scroll.\n  *\n  * <hljs lang=\"html\">\n  * <div layout-fill id=\"toast-container\">\n  *   <md-content>\n  *     I can have lots of content and scroll!\n  *   </md-content>\n  * </div>\n  * </hljs>\n  *\n  * @usage\n  * <hljs lang=\"html\">\n  * <div ng-controller=\"MyController\">\n  *   <md-button ng-click=\"openToast()\">\n  *     Open a Toast!\n  *   </md-button>\n  * </div>\n  * </hljs>\n  *\n  * <hljs lang=\"js\">\n  * var app = angular.module('app', ['ngMaterial']);\n  * app.controller('MyController', function($scope, $mdToast) {\n  *   $scope.openToast = function($event) {\n  *     $mdToast.show($mdToast.simple().textContent('Hello!'));\n  *     // Could also do $mdToast.showSimple('Hello');\n  *   };\n  * });\n  * </hljs>\n  */\n\n/**\n * @ngdoc method\n * @name $mdToast#showSimple\n * \n * @param {string} message The message to display inside the toast\n * @description\n * Convenience method which builds and shows a simple toast.\n *\n * @returns {promise} A promise that can be resolved with `$mdToast.hide()` or\n * rejected with `$mdToast.cancel()`.\n *\n */\n\n /**\n  * @ngdoc method\n  * @name $mdToast#simple\n  *\n  * @description\n  * Builds a preconfigured toast.\n  *\n  * @returns {obj} a `$mdToastPreset` with the following chainable configuration methods.\n  *\n  * _**Note:** These configuration methods are provided in addition to the methods provided by\n  * the `build()` and `show()` methods below._\n  *\n  * <table class=\"md-api-table methods\">\n  *    <thead>\n  *      <tr>\n  *        <th>Method</th>\n  *        <th>Description</th>\n  *      </tr>\n  *    </thead>\n  *    <tbody>\n  *      <tr>\n  *        <td>`.textContent(string)`</td>\n  *        <td>Sets the toast content to the specified string</td>\n  *      </tr>\n  *      <tr>\n  *        <td>`.action(string)`</td>\n  *        <td>\n  *          Adds an action button. <br/>\n  *          If clicked, the promise (returned from `show()`)\n  *          will resolve with the value `'ok'`; otherwise, it is resolved with `true` after a `hideDelay`\n  *          timeout\n  *        </td>\n  *      </tr>\n  *      <tr>\n  *        <td>`.highlightAction(boolean)`</td>\n  *        <td>\n  *          Whether or not the action button will have an additional highlight class.<br/>\n  *          By default the `accent` color will be applied to the action button.\n  *        </td>\n  *      </tr>\n  *      <tr>\n  *        <td>`.highlightClass(string)`</td>\n  *        <td>\n  *          If set, the given class will be applied to the highlighted action button.<br/>\n  *          This allows you to specify the highlight color easily. Highlight classes are `md-primary`, `md-warn`\n  *          and `md-accent`\n  *        </td>\n  *      </tr>\n  *      <tr>\n  *        <td>`.capsule(boolean)`</td>\n  *        <td>Whether or not to add the `md-capsule` class to the toast to provide rounded corners</td>\n  *      </tr>\n  *      <tr>\n  *        <td>`.theme(string)`</td>\n  *        <td>Sets the theme on the toast to the requested theme. Default is `$mdThemingProvider`'s default.</td>\n  *      </tr>\n  *      <tr>\n  *        <td>`.toastClass(string)`</td>\n  *        <td>Sets a class on the toast element</td>\n  *      </tr>\n  *    </tbody>\n  * </table>\n  *\n  */\n\n/**\n  * @ngdoc method\n  * @name $mdToast#updateTextContent\n  *\n  * @description\n  * Updates the content of an existing toast. Useful for updating things like counts, etc.\n  *\n  */\n\n /**\n  * @ngdoc method\n  * @name $mdToast#build\n  *\n  * @description\n  * Creates a custom `$mdToastPreset` that you can configure.\n  *\n  * @returns {obj} a `$mdToastPreset` with the chainable configuration methods for shows' options (see below).\n  */\n\n /**\n  * @ngdoc method\n  * @name $mdToast#show\n  *\n  * @description Shows the toast.\n  *\n  * @param {object} optionsOrPreset Either provide an `$mdToastPreset` returned from `simple()`\n  * and `build()`, or an options object with the following properties:\n  *\n  *   - `templateUrl` - `{string=}`: The url of an html template file that will\n  *     be used as the content of the toast. Restrictions: the template must\n  *     have an outer `md-toast` element.\n  *   - `template` - `{string=}`: Same as templateUrl, except this is an actual\n  *     template string.\n  *   - `autoWrap` - `{boolean=}`: Whether or not to automatically wrap the template content with a\n  *     `<div class=\"md-toast-content\">` if one is not provided. Defaults to true. Can be disabled if you provide a\n  *     custom toast directive.\n  *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified, it will create a new child scope.\n  *     This scope will be destroyed when the toast is removed unless `preserveScope` is set to true.\n  *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false\n  *   - `hideDelay` - `{number=}`: How many milliseconds the toast should stay\n  *     active before automatically closing.  Set to 0 or false to have the toast stay open until\n  *     closed manually. Default: 3000.\n  *   - `position` - `{string=}`: Sets the position of the toast. <br/>\n  *     Available: any combination of `'bottom'`, `'left'`, `'top'`, `'right'`, `'end'` and `'start'`.\n  *     The properties `'end'` and `'start'` are dynamic and can be used for RTL support.<br/>\n  *     Default combination: `'bottom left'`.\n  *   - `toastClass` - `{string=}`: A class to set on the toast element.\n  *   - `controller` - `{string=}`: The controller to associate with this toast.\n  *     The controller will be injected the local `$mdToast.hide( )`, which is a function\n  *     used to hide the toast.\n  *   - `locals` - `{string=}`: An object containing key/value pairs. The keys will\n  *     be used as names of values to inject into the controller. For example,\n  *     `locals: {three: 3}` would inject `three` into the controller with the value\n  *     of 3.\n  *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n  *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values\n  *     and the toast will not open until the promises resolve.\n  *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.\n  *   - `parent` - `{element=}`: The element to append the toast to. Defaults to appending\n  *     to the root element of the application.\n  *\n  * @returns {promise} A promise that can be resolved with `$mdToast.hide()` or\n  * rejected with `$mdToast.cancel()`. `$mdToast.hide()` will resolve either with a Boolean\n  * value == 'true' or the value passed as an argument to `$mdToast.hide()`.\n  * And `$mdToast.cancel()` will resolve the promise with a Boolean value == 'false'\n  */\n\n/**\n  * @ngdoc method\n  * @name $mdToast#hide\n  *\n  * @description\n  * Hide an existing toast and resolve the promise returned from `$mdToast.show()`.\n  *\n  * @param {*=} response An argument for the resolved promise.\n  *\n  * @returns {promise} a promise that is called when the existing element is removed from the DOM.\n  * The promise is resolved with either a Boolean value == 'true' or the value passed as the\n  * argument to `.hide()`.\n  *\n  */\n\n/**\n  * @ngdoc method\n  * @name $mdToast#cancel\n  *\n  * @description\n  * `DEPRECATED` - The promise returned from opening a toast is used only to notify about the closing of the toast.\n  * As such, there isn't any reason to also allow that promise to be rejected,\n  * since it's not clear what the difference between resolve and reject would be.\n  *\n  * Hide the existing toast and reject the promise returned from\n  * `$mdToast.show()`.\n  *\n  * @param {*=} response An argument for the rejected promise.\n  *\n  * @returns {promise} a promise that is called when the existing element is removed from the DOM\n  * The promise is resolved with a Boolean value == 'false'.\n  *\n  */\n\nfunction MdToastProvider($$interimElementProvider) {\n  // Differentiate promise resolves: hide timeout (value == true) and hide action clicks (value == ok).\n  toastDefaultOptions['$inject'] = [\"$animate\", \"$mdToast\", \"$mdUtil\", \"$mdMedia\"];\n  var ACTION_RESOLVE = 'ok';\n\n  var activeToastContent;\n  var $mdToast = $$interimElementProvider('$mdToast')\n    .setDefaults({\n      methods: ['position', 'hideDelay', 'capsule', 'parent', 'position', 'toastClass'],\n      options: toastDefaultOptions\n    })\n    .addPreset('simple', {\n      argOption: 'textContent',\n      methods: ['textContent', 'content', 'action', 'highlightAction', 'highlightClass', 'theme', 'parent' ],\n      options: /* ngInject */ [\"$mdToast\", \"$mdTheming\", function($mdToast, $mdTheming) {\n        return {\n          template:\n            '<md-toast md-theme=\"{{ toast.theme }}\" ng-class=\"{\\'md-capsule\\': toast.capsule}\">' +\n            '  <div class=\"md-toast-content\">' +\n            '    <span class=\"md-toast-text\" role=\"alert\" aria-relevant=\"all\" aria-atomic=\"true\">' +\n            '      {{ toast.content }}' +\n            '    </span>' +\n            '    <md-button class=\"md-action\" ng-if=\"toast.action\" ng-click=\"toast.resolve()\" ' +\n            '        ng-class=\"highlightClasses\">' +\n            '      {{ toast.action }}' +\n            '    </md-button>' +\n            '  </div>' +\n            '</md-toast>',\n          controller: /* ngInject */ [\"$scope\", function mdToastCtrl($scope) {\n            var self = this;\n\n            if (self.highlightAction) {\n              $scope.highlightClasses = [\n                'md-highlight',\n                self.highlightClass\n              ]\n            }\n\n            $scope.$watch(function() { return activeToastContent; }, function() {\n              self.content = activeToastContent;\n            });\n\n            this.resolve = function() {\n              $mdToast.hide( ACTION_RESOLVE );\n            };\n          }],\n          theme: $mdTheming.defaultTheme(),\n          controllerAs: 'toast',\n          bindToController: true\n        };\n      }]\n    })\n    .addMethod('updateTextContent', updateTextContent)\n    .addMethod('updateContent', updateTextContent);\n\n    function updateTextContent(newContent) {\n      activeToastContent = newContent;\n    }\n\n    return $mdToast;\n\n  /* ngInject */\n  function toastDefaultOptions($animate, $mdToast, $mdUtil, $mdMedia) {\n    var SWIPE_EVENTS = '$md.swipeleft $md.swiperight $md.swipeup $md.swipedown';\n    return {\n      onShow: onShow,\n      onRemove: onRemove,\n      toastClass: '',\n      position: 'bottom left',\n      themable: true,\n      hideDelay: 3000,\n      autoWrap: true,\n      transformTemplate: function(template, options) {\n        var shouldAddWrapper = options.autoWrap && template && !/md-toast-content/g.test(template);\n\n        if (shouldAddWrapper) {\n          // Root element of template will be <md-toast>. We need to wrap all of its content inside of\n          // of <div class=\"md-toast-content\">. All templates provided here should be static, developer-controlled\n          // content (meaning we're not attempting to guard against XSS).\n          var templateRoot = document.createElement('md-template');\n          templateRoot.innerHTML = template;\n\n          // Iterate through all root children, to detect possible md-toast directives.\n          for (var i = 0; i < templateRoot.children.length; i++) {\n            if (templateRoot.children[i].nodeName === 'MD-TOAST') {\n              var wrapper = angular.element('<div class=\"md-toast-content\">');\n\n              // Wrap the children of the `md-toast` directive in jqLite, to be able to append multiple\n              // nodes with the same execution.\n              wrapper.append(angular.element(templateRoot.children[i].childNodes));\n\n              // Append the new wrapped element to the `md-toast` directive.\n              templateRoot.children[i].appendChild(wrapper[0]);\n            }\n          }\n\n          // We have to return the innerHTMl, because we do not want to have the `md-template` element to be\n          // the root element of our interimElement.\n          return templateRoot.innerHTML;\n        }\n\n        return template || '';\n      }\n    };\n\n    function onShow(scope, element, options) {\n      activeToastContent = options.textContent || options.content; // support deprecated #content method\n\n      var isSmScreen = !$mdMedia('gt-sm');\n\n      element = $mdUtil.extractElementByName(element, 'md-toast', true);\n      options.element = element;\n\n      options.onSwipe = function(ev, gesture) {\n        //Add the relevant swipe class to the element so it can animate correctly\n        var swipe = ev.type.replace('$md.','');\n        var direction = swipe.replace('swipe', '');\n\n        // If the swipe direction is down/up but the toast came from top/bottom don't fade away\n        // Unless the screen is small, then the toast always on bottom\n        if ((direction === 'down' && options.position.indexOf('top') != -1 && !isSmScreen) ||\n            (direction === 'up' && (options.position.indexOf('bottom') != -1 || isSmScreen))) {\n          return;\n        }\n\n        if ((direction === 'left' || direction === 'right') && isSmScreen) {\n          return;\n        }\n\n        element.addClass('md-' + swipe);\n        $mdUtil.nextTick($mdToast.cancel);\n      };\n      options.openClass = toastOpenClass(options.position);\n\n      element.addClass(options.toastClass);\n\n      // 'top left' -> 'md-top md-left'\n      options.parent.addClass(options.openClass);\n\n      // static is the default position\n      if ($mdUtil.hasComputedStyle(options.parent, 'position', 'static')) {\n        options.parent.css('position', 'relative');\n      }\n\n      element.on(SWIPE_EVENTS, options.onSwipe);\n      element.addClass(isSmScreen ? 'md-bottom' : options.position.split(' ').map(function(pos) {\n        return 'md-' + pos;\n      }).join(' '));\n\n      if (options.parent) options.parent.addClass('md-toast-animating');\n      return $animate.enter(element, options.parent).then(function() {\n        if (options.parent) options.parent.removeClass('md-toast-animating');\n      });\n    }\n\n    function onRemove(scope, element, options) {\n      element.off(SWIPE_EVENTS, options.onSwipe);\n      if (options.parent) options.parent.addClass('md-toast-animating');\n      if (options.openClass) options.parent.removeClass(options.openClass);\n\n      return ((options.$destroy == true) ? element.remove() : $animate.leave(element))\n        .then(function () {\n          if (options.parent) options.parent.removeClass('md-toast-animating');\n          if ($mdUtil.hasComputedStyle(options.parent, 'position', 'static')) {\n            options.parent.css('position', '');\n          }\n        });\n    }\n\n    function toastOpenClass(position) {\n      // For mobile, always open full-width on bottom\n      if (!$mdMedia('gt-xs')) {\n        return 'md-toast-open-bottom';\n      }\n\n      return 'md-toast-open-' +\n        (position.indexOf('top') > -1 ? 'top' : 'bottom');\n    }\n  }\n\n}\n\nngmaterial.components.toast = angular.module(\"material.components.toast\");"]}