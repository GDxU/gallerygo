{"version":3,"sources":["progressLinear.js"],"names":[],"mappings":"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","file":"progressLinear-compiled.js","sourcesContent":["/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v1.1.1-master-f7ecb4f\n */\ngoog.provide('ngmaterial.components.progressLinear');\ngoog.require('ngmaterial.core');\n/**\n * @ngdoc module\n * @name material.components.progressLinear\n * @description Linear Progress module!\n */\nMdProgressLinearDirective['$inject'] = [\"$mdTheming\", \"$mdUtil\", \"$log\"];\nangular.module('material.components.progressLinear', [\n  'material.core'\n])\n  .directive('mdProgressLinear', MdProgressLinearDirective);\n\n/**\n * @ngdoc directive\n * @name mdProgressLinear\n * @module material.components.progressLinear\n * @restrict E\n *\n * @description\n * The linear progress directive is used to make loading content\n * in your app as delightful and painless as possible by minimizing\n * the amount of visual change a user sees before they can view\n * and interact with content.\n *\n * Each operation should only be represented by one activity indicator\n * For example: one refresh operation should not display both a\n * refresh bar and an activity circle.\n *\n * For operations where the percentage of the operation completed\n * can be determined, use a determinate indicator. They give users\n * a quick sense of how long an operation will take.\n *\n * For operations where the user is asked to wait a moment while\n * something finishes up, and itâ€™s not necessary to expose what's\n * happening behind the scenes and how long it will take, use an\n * indeterminate indicator.\n *\n * @param {string} md-mode Select from one of four modes: determinate, indeterminate, buffer or query.\n *\n * Note: if the `md-mode` value is set as undefined or specified as 1 of the four (4) valid modes, then `indeterminate`\n * will be auto-applied as the mode.\n *\n * Note: if not configured, the `md-mode=\"indeterminate\"` will be auto injected as an attribute. If `value=\"\"` is also specified, however,\n * then `md-mode=\"determinate\"` would be auto-injected instead.\n * @param {number=} value In determinate and buffer modes, this number represents the percentage of the primary progress bar. Default: 0\n * @param {number=} md-buffer-value In the buffer mode, this number represents the percentage of the secondary progress bar. Default: 0\n * @param {boolean=} ng-disabled Determines whether to disable the progress element.\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-progress-linear md-mode=\"determinate\" value=\"...\"></md-progress-linear>\n *\n * <md-progress-linear md-mode=\"determinate\" ng-value=\"...\"></md-progress-linear>\n *\n * <md-progress-linear md-mode=\"indeterminate\"></md-progress-linear>\n *\n * <md-progress-linear md-mode=\"buffer\" value=\"...\" md-buffer-value=\"...\"></md-progress-linear>\n *\n * <md-progress-linear md-mode=\"query\"></md-progress-linear>\n * </hljs>\n */\nfunction MdProgressLinearDirective($mdTheming, $mdUtil, $log) {\n  var MODE_DETERMINATE = \"determinate\";\n  var MODE_INDETERMINATE = \"indeterminate\";\n  var MODE_BUFFER = \"buffer\";\n  var MODE_QUERY = \"query\";\n  var DISABLED_CLASS = \"_md-progress-linear-disabled\";\n\n  return {\n    restrict: 'E',\n    template: '<div class=\"md-container\">' +\n      '<div class=\"md-dashed\"></div>' +\n      '<div class=\"md-bar md-bar1\"></div>' +\n      '<div class=\"md-bar md-bar2\"></div>' +\n      '</div>',\n    compile: compile\n  };\n\n  function compile(tElement, tAttrs, transclude) {\n    tElement.attr('aria-valuemin', 0);\n    tElement.attr('aria-valuemax', 100);\n    tElement.attr('role', 'progressbar');\n\n    return postLink;\n  }\n  function postLink(scope, element, attr) {\n    $mdTheming(element);\n\n    var lastMode;\n    var isDisabled = attr.hasOwnProperty('disabled');\n    var toVendorCSS = $mdUtil.dom.animator.toCss;\n    var bar1 = angular.element(element[0].querySelector('.md-bar1'));\n    var bar2 = angular.element(element[0].querySelector('.md-bar2'));\n    var container = angular.element(element[0].querySelector('.md-container'));\n\n    element\n      .attr('md-mode', mode())\n      .toggleClass(DISABLED_CLASS, isDisabled);\n\n    validateMode();\n    watchAttributes();\n\n    /**\n     * Watch the value, md-buffer-value, and md-mode attributes\n     */\n    function watchAttributes() {\n      attr.$observe('value', function(value) {\n        var percentValue = clamp(value);\n        element.attr('aria-valuenow', percentValue);\n\n        if (mode() != MODE_QUERY) animateIndicator(bar2, percentValue);\n      });\n\n      attr.$observe('mdBufferValue', function(value) {\n        animateIndicator(bar1, clamp(value));\n      });\n\n      attr.$observe('disabled', function(value) {\n        if (value === true || value === false) {\n          isDisabled = !!value;\n        } else {\n          isDisabled = angular.isDefined(value);\n        }\n\n        element.toggleClass(DISABLED_CLASS, isDisabled);\n        container.toggleClass(lastMode, !isDisabled);\n      });\n\n      attr.$observe('mdMode', function(mode) {\n        if (lastMode) container.removeClass( lastMode );\n\n        switch( mode ) {\n          case MODE_QUERY:\n          case MODE_BUFFER:\n          case MODE_DETERMINATE:\n          case MODE_INDETERMINATE:\n            container.addClass( lastMode = \"md-mode-\" + mode );\n            break;\n          default:\n            container.addClass( lastMode = \"md-mode-\" + MODE_INDETERMINATE );\n            break;\n        }\n      });\n    }\n\n    /**\n     * Auto-defaults the mode to either `determinate` or `indeterminate` mode; if not specified\n     */\n    function validateMode() {\n      if ( angular.isUndefined(attr.mdMode) ) {\n        var hasValue = angular.isDefined(attr.value);\n        var mode = hasValue ? MODE_DETERMINATE : MODE_INDETERMINATE;\n        var info = \"Auto-adding the missing md-mode='{0}' to the ProgressLinear element\";\n\n        //$log.debug( $mdUtil.supplant(info, [mode]) );\n\n        element.attr(\"md-mode\", mode);\n        attr.mdMode = mode;\n      }\n    }\n\n    /**\n     * Is the md-mode a valid option?\n     */\n    function mode() {\n      var value = (attr.mdMode || \"\").trim();\n      if ( value ) {\n        switch(value) {\n          case MODE_DETERMINATE:\n          case MODE_INDETERMINATE:\n          case MODE_BUFFER:\n          case MODE_QUERY:\n            break;\n          default:\n            value = MODE_INDETERMINATE;\n            break;\n        }\n      }\n      return value;\n    }\n\n    /**\n     * Manually set CSS to animate the Determinate indicator based on the specified\n     * percentage value (0-100).\n     */\n    function animateIndicator(target, value) {\n      if ( isDisabled || !mode() ) return;\n\n      var to = $mdUtil.supplant(\"translateX({0}%) scale({1},1)\", [ (value-100)/2, value/100 ]);\n      var styles = toVendorCSS({ transform : to });\n      angular.element(target).css( styles );\n    }\n  }\n\n  /**\n   * Clamps the value to be between 0 and 100.\n   * @param {number} value The value to clamp.\n   * @returns {number}\n   */\n  function clamp(value) {\n    return Math.max(0, Math.min(value || 0, 100));\n  }\n}\n\n\nngmaterial.components.progressLinear = angular.module(\"material.components.progressLinear\");"]}